
TUT_F4_AUDIO_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe94  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0801002c  0801002c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010554  08010554  000120b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010554  08010554  00011554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801055c  0801055c  000120b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801055c  0801055c  0001155c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010560  08010560  00011560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08010564  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002518  200000b8  0801061c  000120b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025d0  0801061c  000125d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002002e  00000000  00000000  000120e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a63  00000000  00000000  00032116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a3  00000000  00000000  000392c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d31e  00000000  00000000  0003a463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026175  00000000  00000000  00057781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ce9  00000000  00000000  0007d8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001115df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000614c  00000000  00000000  00111624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00117770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b8 	.word	0x200000b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08010014 	.word	0x08010014

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000bc 	.word	0x200000bc
 80001d4:	08010014 	.word	0x08010014

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	603a      	str	r2, [r7, #0]
 80004d2:	80fb      	strh	r3, [r7, #6]
 80004d4:	460b      	mov	r3, r1
 80004d6:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004dc:	2200      	movs	r2, #0
 80004de:	6839      	ldr	r1, [r7, #0]
 80004e0:	481c      	ldr	r0, [pc, #112]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004e2:	f000 f8f9 	bl	80006d8 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <AUDIO_OUT_Init+0x90>)
 80004ea:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004ec:	4819      	ldr	r0, [pc, #100]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f006 fcad 	bl	8006e4c <HAL_I2S_GetState>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4816      	ldr	r0, [pc, #88]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004fc:	f000 f94a 	bl	8000794 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000500:	6838      	ldr	r0, [r7, #0]
 8000502:	f000 fa0f 	bl	8000924 <I2S3_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 800050c:	2301      	movs	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10e      	bne.n	8000534 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000516:	4b11      	ldr	r3, [pc, #68]	@ (800055c <AUDIO_OUT_Init+0x94>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2094      	movs	r0, #148	@ 0x94
 800051c:	4798      	blx	r3
 800051e:	4603      	mov	r3, r0
 8000520:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000524:	2be0      	cmp	r3, #224	@ 0xe0
 8000526:	d103      	bne.n	8000530 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000528:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <AUDIO_OUT_Init+0x98>)
 800052a:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <AUDIO_OUT_Init+0x94>)
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	e001      	b.n	8000534 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d107      	bne.n	800054a <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <AUDIO_OUT_Init+0x98>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681c      	ldr	r4, [r3, #0]
 8000540:	797a      	ldrb	r2, [r7, #5]
 8000542:	88f9      	ldrh	r1, [r7, #6]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	2094      	movs	r0, #148	@ 0x94
 8000548:	47a0      	blx	r4
  }
  
  return ret;
 800054a:	7bfb      	ldrb	r3, [r7, #15]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	200000d8 	.word	0x200000d8
 8000558:	40003c00 	.word	0x40003c00
 800055c:	20000004 	.word	0x20000004
 8000560:	200000d4 	.word	0x200000d4

08000564 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <AUDIO_OUT_Play+0x4c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	b292      	uxth	r2, r2
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	2094      	movs	r0, #148	@ 0x94
 800057c:	4798      	blx	r3
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000584:	2301      	movs	r3, #1
 8000586:	e00f      	b.n	80005a8 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800058e:	d203      	bcs.n	8000598 <AUDIO_OUT_Play+0x34>
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	085b      	lsrs	r3, r3, #1
 8000594:	b29b      	uxth	r3, r3
 8000596:	e001      	b.n	800059c <AUDIO_OUT_Play+0x38>
 8000598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059c:	461a      	mov	r2, r3
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <AUDIO_OUT_Play+0x50>)
 80005a2:	f006 f8d1 	bl	8006748 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005a6:	2300      	movs	r3, #0
  }
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000d4 	.word	0x200000d4
 80005b4:	200000d8 	.word	0x200000d8

080005b8 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <AUDIO_OUT_Pause+0x24>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	691b      	ldr	r3, [r3, #16]
 80005c2:	2094      	movs	r0, #148	@ 0x94
 80005c4:	4798      	blx	r3
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e003      	b.n	80005d8 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <AUDIO_OUT_Pause+0x28>)
 80005d2:	f006 f961 	bl	8006898 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005d6:	2300      	movs	r3, #0
  }
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000d4 	.word	0x200000d4
 80005e0:	200000d8 	.word	0x200000d8

080005e4 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <AUDIO_OUT_Resume+0x24>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	2094      	movs	r0, #148	@ 0x94
 80005f0:	4798      	blx	r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e003      	b.n	8000604 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <AUDIO_OUT_Resume+0x28>)
 80005fe:	f006 f9ad 	bl	800695c <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000602:	2300      	movs	r3, #0
  }
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000d4 	.word	0x200000d4
 800060c:	200000d8 	.word	0x200000d8

08000610 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000618:	480e      	ldr	r0, [pc, #56]	@ (8000654 <AUDIO_OUT_Stop+0x44>)
 800061a:	f006 fa33 	bl	8006a84 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <AUDIO_OUT_Stop+0x48>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	2094      	movs	r0, #148	@ 0x94
 8000628:	4798      	blx	r3
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e00b      	b.n	800064c <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d107      	bne.n	800064a <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f001 fdb6 	bl	80021ac <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4805      	ldr	r0, [pc, #20]	@ (800065c <AUDIO_OUT_Stop+0x4c>)
 8000646:	f003 fa1b 	bl	8003a80 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800064a:	2300      	movs	r3, #0
  }
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000d8 	.word	0x200000d8
 8000658:	200000d4 	.word	0x200000d4
 800065c:	40020c00 	.word	0x40020c00

08000660 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <AUDIO_OUT_SetVolume+0x2c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	4611      	mov	r1, r2
 8000674:	2094      	movs	r0, #148	@ 0x94
 8000676:	4798      	blx	r3
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000682:	2300      	movs	r3, #0
  }
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000d4 	.word	0x200000d4

08000690 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <HAL_I2S_TxCpltCallback+0x20>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006a2:	f001 fcbf 	bl	8002024 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40003c00 	.word	0x40003c00

080006b4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006c6:	f001 fcc1 	bl	800204c <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40003c00 	.word	0x40003c00

080006d8 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006ea:	23ff      	movs	r3, #255	@ 0xff
 80006ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  
  for(index = 0; index < 8; index++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006f6:	e010      	b.n	800071a <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006fc:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <AUDIO_OUT_ClockConfig+0xb0>)
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	429a      	cmp	r2, r3
 8000706:	d103      	bne.n	8000710 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800070c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(index = 0; index < 8; index++)
 8000710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000714:	3301      	adds	r3, #1
 8000716:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800071a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800071e:	2b07      	cmp	r3, #7
 8000720:	d9ea      	bls.n	80006f8 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f007 fcd8 	bl	80080dc <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800072c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	2b00      	cmp	r3, #0
 8000736:	d115      	bne.n	8000764 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000738:	2301      	movs	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000740:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000744:	4a11      	ldr	r2, [pc, #68]	@ (800078c <AUDIO_OUT_ClockConfig+0xb4>)
 8000746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074a:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000750:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <AUDIO_OUT_ClockConfig+0xb8>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4618      	mov	r0, r3
 800075e:	f007 fbcd 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000762:	e00d      	b.n	8000780 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800076c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000770:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f007 fbbe 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
}
 8000780:	bf00      	nop
 8000782:	3730      	adds	r7, #48	@ 0x30
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	08010080 	.word	0x08010080
 800078c:	080100a0 	.word	0x080100a0
 8000790:	080100c0 	.word	0x080100c0

08000794 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4b56      	ldr	r3, [pc, #344]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	4a55      	ldr	r2, [pc, #340]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ae:	4b53      	ldr	r3, [pc, #332]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b4f      	ldr	r3, [pc, #316]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a4e      	ldr	r2, [pc, #312]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b4c      	ldr	r3, [pc, #304]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b48      	ldr	r3, [pc, #288]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a47      	ldr	r2, [pc, #284]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b45      	ldr	r3, [pc, #276]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8000800:	2302      	movs	r3, #2
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000804:	2306      	movs	r3, #6
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	483c      	ldr	r0, [pc, #240]	@ (8000900 <AUDIO_OUT_MspInit+0x16c>)
 8000810:	f002 fece 	bl	80035b0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000814:	2310      	movs	r3, #16
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4839      	ldr	r0, [pc, #228]	@ (8000904 <AUDIO_OUT_MspInit+0x170>)
 8000820:	f002 fec6 	bl	80035b0 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b34      	ldr	r3, [pc, #208]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	4a33      	ldr	r2, [pc, #204]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6313      	str	r3, [r2, #48]	@ 0x30
 8000834:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	482d      	ldr	r0, [pc, #180]	@ (8000900 <AUDIO_OUT_MspInit+0x16c>)
 800084c:	f002 feb0 	bl	80035b0 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000858:	4a28      	ldr	r2, [pc, #160]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800085e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000860:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a25      	ldr	r2, [pc, #148]	@ (8000908 <AUDIO_OUT_MspInit+0x174>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d136      	bne.n	80008e4 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800087c:	4b23      	ldr	r3, [pc, #140]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 800087e:	2240      	movs	r2, #64	@ 0x40
 8000880:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000882:	4b22      	ldr	r3, [pc, #136]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 800088a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800088e:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 8000892:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000896:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 800089a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800089e:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008ac:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008c8:	4a11      	ldr	r2, [pc, #68]	@ (8000910 <AUDIO_OUT_MspInit+0x17c>)
 80008ca:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008da:	f002 fad9 	bl	8002e90 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008e0:	f002 fa28 	bl	8002d34 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	210e      	movs	r1, #14
 80008e8:	202f      	movs	r0, #47	@ 0x2f
 80008ea:	f002 f9ec 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008ee:	202f      	movs	r0, #47	@ 0x2f
 80008f0:	f002 fa05 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 80008f4:	bf00      	nop
 80008f6:	3730      	adds	r7, #48	@ 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020800 	.word	0x40020800
 8000904:	40020000 	.word	0x40020000
 8000908:	40003c00 	.word	0x40003c00
 800090c:	20000120 	.word	0x20000120
 8000910:	400260b8 	.word	0x400260b8

08000914 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <I2S3_Init+0x68>)
 800092e:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <I2S3_Init+0x6c>)
 8000930:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <I2S3_Init+0x68>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <I2S3_Init+0x68>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000940:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <I2S3_Init+0x68>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000948:	4b10      	ldr	r3, [pc, #64]	@ (800098c <I2S3_Init+0x68>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <I2S3_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000954:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <I2S3_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <I2S3_Init+0x68>)
 800095c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000960:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <I2S3_Init+0x68>)
 8000964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000968:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <I2S3_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000970:	4806      	ldr	r0, [pc, #24]	@ (800098c <I2S3_Init+0x68>)
 8000972:	f005 fda9 	bl	80064c8 <HAL_I2S_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000980:	2300      	movs	r3, #0
  }
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000d8 	.word	0x200000d8
 8000990:	40003c00 	.word	0x40003c00

08000994 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_I2S_ErrorCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009a6:	f7ff ffb5 	bl	8000914 <AUDIO_OUT_Error_CallBack>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40003c00 	.word	0x40003c00

080009b8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009bc:	4814      	ldr	r0, [pc, #80]	@ (8000a10 <I2Cx_Init+0x58>)
 80009be:	f005 fa19 	bl	8005df4 <HAL_I2C_GetState>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d121      	bne.n	8000a0c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <I2Cx_Init+0x58>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <I2Cx_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <I2Cx_Init+0x58>)
 80009d0:	2243      	movs	r2, #67	@ 0x43
 80009d2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <I2Cx_Init+0x58>)
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <I2Cx_Init+0x60>)
 80009d8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <I2Cx_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <I2Cx_Init+0x58>)
 80009e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009e6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <I2Cx_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <I2Cx_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <I2Cx_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <I2Cx_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <I2Cx_Init+0x58>)
 8000a02:	f000 f86b 	bl	8000adc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a06:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <I2Cx_Init+0x58>)
 8000a08:	f004 fd60 	bl	80054cc <HAL_I2C_Init>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000180 	.word	0x20000180
 8000a14:	40005400 	.word	0x40005400
 8000a18:	000186a0 	.word	0x000186a0

08000a1c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af04      	add	r7, sp, #16
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	717b      	strb	r3, [r7, #5]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <I2Cx_WriteData+0x48>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	88f9      	ldrh	r1, [r7, #6]
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <I2Cx_WriteData+0x4c>)
 8000a4a:	f004 feb3 	bl	80057b4 <HAL_I2C_Mem_Write>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a58:	f000 f834 	bl	8000ac4 <I2Cx_Error>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000180 	.word	0x20000180

08000a6c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a84:	797b      	ldrb	r3, [r7, #5]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <I2Cx_ReadData+0x50>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	88f9      	ldrh	r1, [r7, #6]
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2301      	movs	r3, #1
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	f107 030e 	add.w	r3, r7, #14
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <I2Cx_ReadData+0x54>)
 8000a9e:	f004 ff83 	bl	80059a8 <HAL_I2C_Mem_Read>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000aac:	f000 f80a 	bl	8000ac4 <I2Cx_Error>
  }
  return value;
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000180 	.word	0x20000180

08000ac4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <I2Cx_Error+0x14>)
 8000aca:	f004 fe43 	bl	8005754 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ace:	f7ff ff73 	bl	80009b8 <I2Cx_Init>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000180 	.word	0x20000180

08000adc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	4a24      	ldr	r2, [pc, #144]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b08:	4a1d      	ldr	r2, [pc, #116]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b1c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <I2Cx_MspInit+0xa8>)
 8000b3a:	f002 fd39 	bl	80035b0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b48:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b54:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	201f      	movs	r0, #31
 8000b5c:	f002 f8b3 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b60:	201f      	movs	r0, #31
 8000b62:	f002 f8cc 	bl	8002cfe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	2020      	movs	r0, #32
 8000b6c:	f002 f8ab 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b70:	2020      	movs	r0, #32
 8000b72:	f002 f8c4 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400

08000b88 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <AUDIO_IO_Init+0x68>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a16      	ldr	r2, [pc, #88]	@ (8000bf0 <AUDIO_IO_Init+0x68>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <AUDIO_IO_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000baa:	2310      	movs	r3, #16
 8000bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <AUDIO_IO_Init+0x6c>)
 8000bc0:	f002 fcf6 	bl	80035b0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bc4:	f7ff fef8 	bl	80009b8 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <AUDIO_IO_Init+0x6c>)
 8000bce:	f002 ff57 	bl	8003a80 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	f001 faea 	bl	80021ac <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <AUDIO_IO_Init+0x6c>)
 8000bde:	f002 ff4f 	bl	8003a80 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000be2:	2005      	movs	r0, #5
 8000be4:	f001 fae2 	bl	80021ac <HAL_Delay>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	460b      	mov	r3, r1
 8000c12:	71bb      	strb	r3, [r7, #6]
 8000c14:	4613      	mov	r3, r2
 8000c16:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	797a      	ldrb	r2, [r7, #5]
 8000c1e:	79b9      	ldrb	r1, [r7, #6]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fefb 	bl	8000a1c <I2Cx_WriteData>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	460a      	mov	r2, r1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	79ba      	ldrb	r2, [r7, #6]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff10 	bl	8000a6c <I2Cx_ReadData>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0d6      	sub	sp, #344	@ 0x158
 8000c5c:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4946      	ldr	r1, [pc, #280]	@ (8000d80 <AUDIO_StorageParse+0x128>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00e fb19 	bl	800f2a0 <f_opendir>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FileList.ptr = 0;
 8000c74:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000c7c:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d16c      	bne.n	8000d5e <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8000c84:	e067      	b.n	8000d56 <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 8000c86:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f00e fb9f 	bl	800f3d2 <f_readdir>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c9a:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d15d      	bne.n	8000d5e <AUDIO_StorageParse+0x106>
 8000ca2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ca6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000caa:	7d9b      	ldrb	r3, [r3, #22]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d056      	beq.n	8000d5e <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cb0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cb4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cb8:	7d9b      	ldrb	r3, [r3, #22]
 8000cba:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cbc:	d04a      	beq.n	8000d54 <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 8000cbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cc2:	3316      	adds	r3, #22
 8000cc4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000cca:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000cce:	2b17      	cmp	r3, #23
 8000cd0:	d841      	bhi.n	8000d56 <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cd2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cda:	7a1b      	ldrb	r3, [r3, #8]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d138      	bne.n	8000d56 <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000ce4:	4928      	ldr	r1, [pc, #160]	@ (8000d88 <AUDIO_StorageParse+0x130>)
 8000ce6:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cea:	f00f f8e8 	bl	800febe <strstr>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d107      	bne.n	8000d04 <AUDIO_StorageParse+0xac>
 8000cf4:	4925      	ldr	r1, [pc, #148]	@ (8000d8c <AUDIO_StorageParse+0x134>)
 8000cf6:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cfa:	f00f f8e0 	bl	800febe <strstr>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d028      	beq.n	8000d56 <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d04:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d06:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	2228      	movs	r2, #40	@ 0x28
 8000d1e:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00f f8b8 	bl	800fe98 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d2a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4914      	ldr	r1, [pc, #80]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d44:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d4e:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000d52:	e000      	b.n	8000d56 <AUDIO_StorageParse+0xfe>
        continue;
 8000d54:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <AUDIO_StorageParse+0x138>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d093      	beq.n	8000c86 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d60:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000d64:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <AUDIO_StorageParse+0x13c>)
 8000d66:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00e fb0b 	bl	800f386 <f_closedir>
  return res;
 8000d70:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000197c 	.word	0x2000197c
 8000d84:	20001338 	.word	0x20001338
 8000d88:	0801002c 	.word	0x0801002c
 8000d8c:	08010030 	.word	0x08010030
 8000d90:	200021c0 	.word	0x200021c0
 8000d94:	200001d6 	.word	0x200001d6

08000d98 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000d9c:	f7ff ff5c 	bl	8000c58 <AUDIO_StorageParse>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <AUDIO_GetWavObjectNumber+0x14>
 8000da6:	4b02      	ldr	r3, [pc, #8]	@ (8000db0 <AUDIO_GetWavObjectNumber+0x18>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	e7ff      	b.n	8000dac <AUDIO_GetWavObjectNumber+0x14>
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200001d6 	.word	0x200001d6

08000db4 <Mount_USB>:

void Mount_USB (void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	4905      	ldr	r1, [pc, #20]	@ (8000dd0 <Mount_USB+0x1c>)
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <Mount_USB+0x20>)
 8000dbe:	f00d fc7f 	bl	800e6c0 <f_mount>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <Mount_USB+0x24>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000197c 	.word	0x2000197c
 8000dd4:	20001980 	.word	0x20001980
 8000dd8:	200001d4 	.word	0x200001d4

08000ddc <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	4603      	mov	r3, r0
 8000de6:	81fb      	strh	r3, [r7, #14]
 8000de8:	460b      	mov	r3, r1
 8000dea:	81bb      	strh	r3, [r7, #12]
 8000dec:	4613      	mov	r3, r2
 8000dee:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000df4:	f7ff fec8 	bl	8000b88 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000df8:	89fb      	ldrh	r3, [r7, #14]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fb01 	bl	8001408 <CODEC_IO_Write>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e10:	89bb      	ldrh	r3, [r7, #12]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d81b      	bhi.n	8000e50 <cs43l22_Init+0x74>
 8000e18:	a201      	add	r2, pc, #4	@ (adr r2, 8000e20 <cs43l22_Init+0x44>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e39 	.word	0x08000e39
 8000e28:	08000e41 	.word	0x08000e41
 8000e2c:	08000e49 	.word	0x08000e49
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e30:	4b5b      	ldr	r3, [pc, #364]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e32:	22fa      	movs	r2, #250	@ 0xfa
 8000e34:	701a      	strb	r2, [r3, #0]
    break;
 8000e36:	e00f      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e38:	4b59      	ldr	r3, [pc, #356]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e3a:	22af      	movs	r2, #175	@ 0xaf
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e00b      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e40:	4b57      	ldr	r3, [pc, #348]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e42:	22aa      	movs	r2, #170	@ 0xaa
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e007      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e48:	4b55      	ldr	r3, [pc, #340]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e4e:	e003      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e50:	4b53      	ldr	r3, [pc, #332]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    break;    
 8000e56:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4a50      	ldr	r2, [pc, #320]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e5e:	7812      	ldrb	r2, [r2, #0]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	2104      	movs	r1, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 facf 	bl	8001408 <CODEC_IO_Write>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2281      	movs	r2, #129	@ 0x81
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fac3 	bl	8001408 <CODEC_IO_Write>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2204      	movs	r2, #4
 8000e92:	2106      	movs	r1, #6
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 fab7 	bl	8001408 <CODEC_IO_Write>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000ea4:	7afa      	ldrb	r2, [r7, #11]
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f964 	bl	8001178 <cs43l22_SetVolume>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000eb8:	89bb      	ldrh	r3, [r7, #12]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d023      	beq.n	8000f06 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fa9e 	bl	8001408 <CODEC_IO_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	2124      	movs	r1, #36	@ 0x24
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fa92 	bl	8001408 <CODEC_IO_Write>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2125      	movs	r1, #37	@ 0x25
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fa86 	bl	8001408 <CODEC_IO_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	4413      	add	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	210a      	movs	r1, #10
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fa7a 	bl	8001408 <CODEC_IO_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2204      	movs	r2, #4
 8000f24:	210e      	movs	r1, #14
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa6e 	bl	8001408 <CODEC_IO_Write>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4413      	add	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2127      	movs	r1, #39	@ 0x27
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fa62 	bl	8001408 <CODEC_IO_Write>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	220f      	movs	r2, #15
 8000f54:	211f      	movs	r1, #31
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa56 	bl	8001408 <CODEC_IO_Write>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	211a      	movs	r1, #26
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fa4a 	bl	8001408 <CODEC_IO_Write>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	220a      	movs	r2, #10
 8000f84:	211b      	movs	r1, #27
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fa3e 	bl	8001408 <CODEC_IO_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f96:	697b      	ldr	r3, [r7, #20]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001d8 	.word	0x200001d8

08000fa4 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fa8:	f7ff fe26 	bl	8000bf8 <AUDIO_IO_DeInit>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fba:	f7ff fde5 	bl	8000b88 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe32 	bl	8000c2e <AUDIO_IO_Read>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f023 0307 	bic.w	r3, r3, #7
 8000fd4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <cs43l22_Play+0x70>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d123      	bne.n	8001044 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2206      	movs	r2, #6
 8001002:	210e      	movs	r1, #14
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f9ff 	bl	8001408 <CODEC_IO_Write>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f919 	bl	8001250 <cs43l22_SetMute>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	229e      	movs	r2, #158	@ 0x9e
 800102c:	2102      	movs	r1, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f9ea 	bl	8001408 <CODEC_IO_Write>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <cs43l22_Play+0x70>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001044:	68fb      	ldr	r3, [r7, #12]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000034 	.word	0x20000034

08001054 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f8f2 	bl	8001250 <cs43l22_SetMute>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f9c3 	bl	8001408 <CODEC_IO_Write>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f8ce 	bl	8001250 <cs43l22_SetMute>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	e002      	b.n	80010c8 <cs43l22_Resume+0x30>
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80010cc:	d9f9      	bls.n	80010c2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <cs43l22_Resume+0x74>)
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	2104      	movs	r1, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f994 	bl	8001408 <CODEC_IO_Write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	229e      	movs	r2, #158	@ 0x9e
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f988 	bl	8001408 <CODEC_IO_Write>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001d8 	.word	0x200001d8

08001110 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f893 	bl	8001250 <cs43l22_SetMute>
 800112a:	4602      	mov	r2, r0
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2204      	movs	r2, #4
 8001138:	210e      	movs	r1, #14
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f964 	bl	8001408 <CODEC_IO_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	229f      	movs	r2, #159	@ 0x9f
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f958 	bl	8001408 <CODEC_IO_Write>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <cs43l22_Stop+0x64>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001168:	68fb      	ldr	r3, [r7, #12]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000034 	.word	0x20000034

08001178 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	80fb      	strh	r3, [r7, #6]
 8001184:	4613      	mov	r3, r2
 8001186:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d80b      	bhi.n	80011aa <cs43l22_SetVolume+0x32>
 8001192:	797a      	ldrb	r2, [r7, #5]
 8001194:	4613      	mov	r3, r2
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	4a25      	ldr	r2, [pc, #148]	@ (8001230 <cs43l22_SetVolume+0xb8>)
 800119c:	fb82 1203 	smull	r1, r2, r2, r3
 80011a0:	1152      	asrs	r2, r2, #5
 80011a2:	17db      	asrs	r3, r3, #31
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	e000      	b.n	80011ac <cs43l22_SetVolume+0x34>
 80011aa:	23ff      	movs	r3, #255	@ 0xff
 80011ac:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	2be6      	cmp	r3, #230	@ 0xe6
 80011b2:	d91c      	bls.n	80011ee <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	b2d8      	uxtb	r0, r3
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	3319      	adds	r3, #25
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	2120      	movs	r1, #32
 80011c2:	f000 f921 	bl	8001408 <CODEC_IO_Write>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	b2d8      	uxtb	r0, r3
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	3319      	adds	r3, #25
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	2121      	movs	r1, #33	@ 0x21
 80011de:	f000 f913 	bl	8001408 <CODEC_IO_Write>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e01b      	b.n	8001226 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	b2d8      	uxtb	r0, r3
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	3319      	adds	r3, #25
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	2120      	movs	r1, #32
 80011fc:	f000 f904 	bl	8001408 <CODEC_IO_Write>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	b2d8      	uxtb	r0, r3
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	3319      	adds	r3, #25
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	2121      	movs	r1, #33	@ 0x21
 8001218:	f000 f8f6 	bl	8001408 <CODEC_IO_Write>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	51eb851f 	.word	0x51eb851f

08001234 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d124      	bne.n	80012b0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	22ff      	movs	r2, #255	@ 0xff
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f8ca 	bl	8001408 <CODEC_IO_Write>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2201      	movs	r2, #1
 8001284:	2122      	movs	r1, #34	@ 0x22
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f8be 	bl	8001408 <CODEC_IO_Write>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2201      	movs	r2, #1
 800129c:	2123      	movs	r1, #35	@ 0x23
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f8b2 	bl	8001408 <CODEC_IO_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e025      	b.n	80012fc <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	2122      	movs	r1, #34	@ 0x22
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f8a5 	bl	8001408 <CODEC_IO_Write>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	2123      	movs	r1, #35	@ 0x23
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f899 	bl	8001408 <CODEC_IO_Write>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <cs43l22_SetMute+0xb8>)
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	2104      	movs	r1, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f88b 	bl	8001408 <CODEC_IO_Write>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001d8 	.word	0x200001d8

0800130c <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	80fb      	strh	r3, [r7, #6]
 8001318:	4613      	mov	r3, r2
 800131a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	3b01      	subs	r3, #1
 8001324:	2b03      	cmp	r3, #3
 8001326:	d84b      	bhi.n	80013c0 <cs43l22_SetOutputMode+0xb4>
 8001328:	a201      	add	r2, pc, #4	@ (adr r2, 8001330 <cs43l22_SetOutputMode+0x24>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001341 	.word	0x08001341
 8001334:	08001361 	.word	0x08001361
 8001338:	08001381 	.word	0x08001381
 800133c:	080013a1 	.word	0x080013a1
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	22fa      	movs	r2, #250	@ 0xfa
 8001346:	2104      	movs	r1, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f85d 	bl	8001408 <CODEC_IO_Write>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 800135a:	22fa      	movs	r2, #250	@ 0xfa
 800135c:	701a      	strb	r2, [r3, #0]
      break;
 800135e:	e03f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	22af      	movs	r2, #175	@ 0xaf
 8001366:	2104      	movs	r1, #4
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f84d 	bl	8001408 <CODEC_IO_Write>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 800137a:	22af      	movs	r2, #175	@ 0xaf
 800137c:	701a      	strb	r2, [r3, #0]
      break;
 800137e:	e02f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	22aa      	movs	r2, #170	@ 0xaa
 8001386:	2104      	movs	r1, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f83d 	bl	8001408 <CODEC_IO_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 800139a:	22aa      	movs	r2, #170	@ 0xaa
 800139c:	701a      	strb	r2, [r3, #0]
      break;
 800139e:	e01f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2205      	movs	r2, #5
 80013a6:	2104      	movs	r1, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f82d 	bl	8001408 <CODEC_IO_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 80013ba:	2205      	movs	r2, #5
 80013bc:	701a      	strb	r2, [r3, #0]
      break;    
 80013be:	e00f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2205      	movs	r2, #5
 80013c6:	2104      	movs	r1, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f81d 	bl	8001408 <CODEC_IO_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 80013da:	2205      	movs	r2, #5
 80013dc:	701a      	strb	r2, [r3, #0]
      break;
 80013de:	bf00      	nop
  }  
  return counter;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001d8 	.word	0x200001d8

080013f0 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	460b      	mov	r3, r1
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	4613      	mov	r3, r2
 8001418:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800141e:	797a      	ldrb	r2, [r7, #5]
 8001420:	79b9      	ldrb	r1, [r7, #6]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fbee 	bl	8000c06 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_EXTI_Callback>:
extern AUDIO_PLAYBACK_StateTypeDef AudioState;

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d10d      	bne.n	8001464 <HAL_GPIO_EXTI_Callback+0x2c>
	{
//		AudioState = AUDIO_STATE_NEXT;
		if (AudioState == AUDIO_STATE_PLAY)
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d102      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x1e>
		{
			AudioState = AUDIO_STATE_PAUSE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 8001452:	220a      	movs	r2, #10
 8001454:	701a      	strb	r2, [r3, #0]
		}

		if (AudioState == AUDIO_STATE_WAIT)
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			AudioState = AUDIO_STATE_RESUME;
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 8001460:	220b      	movs	r2, #11
 8001462:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	20001334 	.word	0x20001334

08001474 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_ADC_ConvCpltCallback+0x28>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d106      	bne.n	8001494 <HAL_ADC_ConvCpltCallback+0x20>
		adc1_raw = HAL_ADC_GetValue(&hadc1);
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001488:	f001 f8e9 	bl	800265e <HAL_ADC_GetValue>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <HAL_ADC_ConvCpltCallback+0x30>)
 8001492:	801a      	strh	r2, [r3, #0]
	}
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40012000 	.word	0x40012000
 80014a0:	200001dc 	.word	0x200001dc
 80014a4:	20000320 	.word	0x20000320

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f000 fe0c 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f834 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 f984 	bl	80017c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b8:	f000 f962 	bl	8001780 <MX_DMA_Init>
  MX_I2C1_Init();
 80014bc:	f000 f904 	bl	80016c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80014c0:	f000 f930 	bl	8001724 <MX_I2S3_Init>
  MX_FATFS_Init();
 80014c4:	f007 fdf8 	bl	80090b8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80014c8:	f00e f8e2 	bl	800f690 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80014cc:	f000 f8aa 	bl	8001624 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80014d0:	480e      	ldr	r0, [pc, #56]	@ (800150c <main+0x64>)
 80014d2:	f000 fed3 	bl	800227c <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014d6:	f00e f901 	bl	800f6dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (Appli_state == APPLICATION_READY)
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <main+0x68>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d1f9      	bne.n	80014d6 <main+0x2e>
    {
    	Mount_USB();
 80014e2:	f7ff fc67 	bl	8000db4 <Mount_USB>
    	AUDIO_PLAYER_Start(0);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 fc22 	bl	8001d30 <AUDIO_PLAYER_Start>

    	while (!IsFinished)
 80014ec:	e009      	b.n	8001502 <main+0x5a>
    	{
    		AUDIO_PLAYER_Process(TRUE);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fc7e 	bl	8001df0 <AUDIO_PLAYER_Process>

    		if (AudioState == AUDIO_STATE_STOP)
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <main+0x6c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	d102      	bne.n	8001502 <main+0x5a>
    		{
    			IsFinished = 1;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <main+0x70>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
    	while (!IsFinished)
 8001502:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <main+0x70>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f1      	beq.n	80014ee <main+0x46>
    MX_USB_HOST_Process();
 800150a:	e7e4      	b.n	80014d6 <main+0x2e>
 800150c:	200001dc 	.word	0x200001dc
 8001510:	200021c0 	.word	0x200021c0
 8001514:	20001334 	.word	0x20001334
 8001518:	20000324 	.word	0x20000324

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b09a      	sub	sp, #104	@ 0x68
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001526:	2230      	movs	r2, #48	@ 0x30
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f00e fcac 	bl	800fe88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <SystemClock_Config+0x100>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a30      	ldr	r2, [pc, #192]	@ (800161c <SystemClock_Config+0x100>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <SystemClock_Config+0x100>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <SystemClock_Config+0x104>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2a      	ldr	r2, [pc, #168]	@ (8001620 <SystemClock_Config+0x104>)
 8001578:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <SystemClock_Config+0x104>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158a:	2301      	movs	r3, #1
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001598:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800159c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800159e:	2304      	movs	r3, #4
 80015a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015a2:	23c0      	movs	r3, #192	@ 0xc0
 80015a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015a6:	2304      	movs	r3, #4
 80015a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015aa:	2308      	movs	r3, #8
 80015ac:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 f828 	bl	8007608 <HAL_RCC_OscConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015be:	f000 f975 	bl	80018ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c2:	230f      	movs	r3, #15
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	2103      	movs	r1, #3
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 fa80 	bl	8007ae4 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80015ea:	f000 f95f 	bl	80018ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015ee:	2301      	movs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80015f2:	23c8      	movs	r3, #200	@ 0xc8
 80015f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80015f6:	2305      	movs	r3, #5
 80015f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4618      	mov	r0, r3
 8001604:	f006 fc7a 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800160e:	f000 f94d 	bl	80018ac <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3768      	adds	r7, #104	@ 0x68
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800162a:	463b      	mov	r3, r7
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001638:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <MX_ADC1_Init+0x9c>)
 800163a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <MX_ADC1_Init+0x98>)
 800163e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_ADC1_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001664:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001666:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <MX_ADC1_Init+0xa0>)
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_ADC1_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001672:	2201      	movs	r2, #1
 8001674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001680:	2201      	movs	r2, #1
 8001682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001684:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_ADC1_Init+0x98>)
 8001686:	f000 fdb5 	bl	80021f4 <HAL_ADC_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001690:	f000 f90c 	bl	80018ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001694:	2301      	movs	r3, #1
 8001696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001698:	2301      	movs	r3, #1
 800169a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_ADC1_Init+0x98>)
 80016a6:	f000 fffb 	bl	80026a0 <HAL_ADC_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016b0:	f000 f8fc 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001dc 	.word	0x200001dc
 80016c0:	40012000 	.word	0x40012000
 80016c4:	0f000001 	.word	0x0f000001

080016c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016ce:	4a13      	ldr	r2, [pc, #76]	@ (800171c <MX_I2C1_Init+0x54>)
 80016d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016d4:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <MX_I2C1_Init+0x58>)
 80016d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_I2C1_Init+0x50>)
 8001706:	f003 fee1 	bl	80054cc <HAL_I2C_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001710:	f000 f8cc 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000224 	.word	0x20000224
 800171c:	40005400 	.word	0x40005400
 8001720:	000186a0 	.word	0x000186a0

08001724 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001728:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <MX_I2S3_Init+0x54>)
 800172a:	4a14      	ldr	r2, [pc, #80]	@ (800177c <MX_I2S3_Init+0x58>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <MX_I2S3_Init+0x54>)
 8001730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001734:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <MX_I2S3_Init+0x54>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_I2S3_Init+0x54>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <MX_I2S3_Init+0x54>)
 8001744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001748:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <MX_I2S3_Init+0x54>)
 800174c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001750:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_I2S3_Init+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <MX_I2S3_Init+0x54>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_I2S3_Init+0x54>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	@ (8001778 <MX_I2S3_Init+0x54>)
 8001766:	f004 feaf 	bl	80064c8 <HAL_I2S_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001770:	f000 f89c 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000278 	.word	0x20000278
 800177c:	40003c00 	.word	0x40003c00

08001780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <MX_DMA_Init+0x3c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <MX_DMA_Init+0x3c>)
 8001790:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <MX_DMA_Init+0x3c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2010      	movs	r0, #16
 80017a8:	f001 fa8d 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017ac:	2010      	movs	r0, #16
 80017ae:	f001 faa6 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b30      	ldr	r3, [pc, #192]	@ (800189c <MX_GPIO_Init+0xdc>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a2f      	ldr	r2, [pc, #188]	@ (800189c <MX_GPIO_Init+0xdc>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <MX_GPIO_Init+0xdc>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <MX_GPIO_Init+0xdc>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a28      	ldr	r2, [pc, #160]	@ (800189c <MX_GPIO_Init+0xdc>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <MX_GPIO_Init+0xdc>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <MX_GPIO_Init+0xdc>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a21      	ldr	r2, [pc, #132]	@ (800189c <MX_GPIO_Init+0xdc>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <MX_GPIO_Init+0xdc>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <MX_GPIO_Init+0xdc>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a1a      	ldr	r2, [pc, #104]	@ (800189c <MX_GPIO_Init+0xdc>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <MX_GPIO_Init+0xdc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2101      	movs	r1, #1
 800184a:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 800184c:	f002 f918 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001868:	f001 fea2 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800186c:	2301      	movs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_GPIO_Init+0xe4>)
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001874:	2302      	movs	r3, #2
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	480a      	ldr	r0, [pc, #40]	@ (80018a8 <MX_GPIO_Init+0xe8>)
 8001880:	f001 fe96 	bl	80035b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2006      	movs	r0, #6
 800188a:	f001 fa1c 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800188e:	2006      	movs	r0, #6
 8001890:	f001 fa35 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	@ 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020800 	.word	0x40020800
 80018a4:	10110000 	.word	0x10110000
 80018a8:	40020000 	.word	0x40020000

080018ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b0:	b672      	cpsid	i
}
 80018b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <Error_Handler+0x8>

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018f6:	2007      	movs	r0, #7
 80018f8:	f001 f9da 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <HAL_ADC_MspInit+0x8c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12f      	bne.n	800198a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <HAL_ADC_MspInit+0x90>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a19      	ldr	r2, [pc, #100]	@ (8001998 <HAL_ADC_MspInit+0x90>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <HAL_ADC_MspInit+0x90>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_ADC_MspInit+0x90>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <HAL_ADC_MspInit+0x90>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_ADC_MspInit+0x90>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001966:	2303      	movs	r3, #3
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4809      	ldr	r0, [pc, #36]	@ (800199c <HAL_ADC_MspInit+0x94>)
 8001976:	f001 fe1b 	bl	80035b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2012      	movs	r0, #18
 8001980:	f001 f9a1 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001984:	2012      	movs	r0, #18
 8001986:	f001 f9ba 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	@ 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40012000 	.word	0x40012000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <HAL_I2C_MspInit+0x84>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12c      	bne.n	8001a1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <HAL_I2C_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a17      	ldr	r2, [pc, #92]	@ (8001a28 <HAL_I2C_MspInit+0x88>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80019de:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e4:	2312      	movs	r3, #18
 80019e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f0:	2304      	movs	r3, #4
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <HAL_I2C_MspInit+0x8c>)
 80019fc:	f001 fdd8 	bl	80035b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_I2C_MspInit+0x88>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	@ 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <HAL_I2C_MspDeInit+0x38>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10e      	bne.n	8001a60 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_I2C_MspDeInit+0x3c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_I2C_MspDeInit+0x3c>)
 8001a48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001a4e:	2140      	movs	r1, #64	@ 0x40
 8001a50:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <HAL_I2C_MspDeInit+0x40>)
 8001a52:	f001 ff31 	bl	80038b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_I2C_MspDeInit+0x40>)
 8001a5c:	f001 ff2c 	bl	80038b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a45      	ldr	r2, [pc, #276]	@ (8001ba8 <HAL_I2S_MspInit+0x134>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	f040 8084 	bne.w	8001ba0 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	4b43      	ldr	r3, [pc, #268]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	4a42      	ldr	r2, [pc, #264]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa8:	4b40      	ldr	r3, [pc, #256]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac4:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	4b35      	ldr	r3, [pc, #212]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	4a34      	ldr	r2, [pc, #208]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae0:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <HAL_I2S_MspInit+0x138>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aec:	2310      	movs	r3, #16
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001afc:	2306      	movs	r3, #6
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	482a      	ldr	r0, [pc, #168]	@ (8001bb0 <HAL_I2S_MspInit+0x13c>)
 8001b08:	f001 fd52 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001b0c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b1e:	2306      	movs	r3, #6
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4822      	ldr	r0, [pc, #136]	@ (8001bb4 <HAL_I2S_MspInit+0x140>)
 8001b2a:	f001 fd41 	bl	80035b0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001b2e:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b30:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_I2S_MspInit+0x148>)
 8001b32:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001b34:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b3c:	2240      	movs	r2, #64	@ 0x40
 8001b3e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b54:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b56:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b5c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b64:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b6e:	2204      	movs	r2, #4
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b74:	2203      	movs	r2, #3
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b86:	f001 f8d5 	bl	8002d34 <HAL_DMA_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001b90:	f7ff fe8c 	bl	80018ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b98:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b9a:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <HAL_I2S_MspInit+0x144>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40003c00 	.word	0x40003c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	200002c0 	.word	0x200002c0
 8001bbc:	40026088 	.word	0x40026088

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c16:	f000 faa9 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f001 ff46 	bl	8003ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA1_Stream5_IRQHandler+0x10>)
 8001c32:	f001 fa53 	bl	80030dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002c0 	.word	0x200002c0

08001c40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <ADC_IRQHandler+0x10>)
 8001c46:	f000 fbc9 	bl	80023dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200001dc 	.word	0x200001dc

08001c54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <OTG_FS_IRQHandler+0x10>)
 8001c5a:	f002 f9d3 	bl	8004004 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200021c4 	.word	0x200021c4

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f00e f938 	bl	800ff0c <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20020000 	.word	0x20020000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	20000328 	.word	0x20000328
 8001cd0:	200025d0 	.word	0x200025d0

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <SystemInit+0x28>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cde:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <SystemInit+0x28>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <SystemInit+0x28>)
 8001cea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cee:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <PlayerInit+0x2c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	2003      	movs	r0, #3
 8001d14:	f7fe fbd8 	bl	80004c8 <AUDIO_OUT_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <PlayerInit+0x22>
	{
		return 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001d22:	2300      	movs	r3, #0
	}
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	2000003c 	.word	0x2000003c

08001d30 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  int bytesread;

  f_close(&WavFile);
 8001d3a:	4828      	ldr	r0, [pc, #160]	@ (8001ddc <AUDIO_PLAYER_Start+0xac>)
 8001d3c:	f00d f87d 	bl	800ee3a <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001d40:	f7ff f82a 	bl	8000d98 <AUDIO_GetWavObjectNumber>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d940      	bls.n	8001dd2 <AUDIO_PLAYER_Start+0xa2>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001d50:	79fa      	ldrb	r2, [r7, #7]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a20      	ldr	r2, [pc, #128]	@ (8001de0 <AUDIO_PLAYER_Start+0xb0>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	3301      	adds	r3, #1
 8001d62:	2201      	movs	r2, #1
 8001d64:	4619      	mov	r1, r3
 8001d66:	481d      	ldr	r0, [pc, #116]	@ (8001ddc <AUDIO_PLAYER_Start+0xac>)
 8001d68:	f00c fcf0 	bl	800e74c <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	222c      	movs	r2, #44	@ 0x2c
 8001d72:	491c      	ldr	r1, [pc, #112]	@ (8001de4 <AUDIO_PLAYER_Start+0xb4>)
 8001d74:	4819      	ldr	r0, [pc, #100]	@ (8001ddc <AUDIO_PLAYER_Start+0xac>)
 8001d76:	f00c fea3 	bl	800eac0 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <AUDIO_PLAYER_Start+0xb4>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ffbe 	bl	8001d00 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <AUDIO_PLAYER_Start+0xb8>)
 8001d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4812      	ldr	r0, [pc, #72]	@ (8001ddc <AUDIO_PLAYER_Start+0xac>)
 8001d92:	f00d f87c 	bl	800ee8e <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d9e:	4912      	ldr	r1, [pc, #72]	@ (8001de8 <AUDIO_PLAYER_Start+0xb8>)
 8001da0:	480e      	ldr	r0, [pc, #56]	@ (8001ddc <AUDIO_PLAYER_Start+0xac>)
 8001da2:	f00c fe8d 	bl	800eac0 <f_read>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d112      	bne.n	8001dd2 <AUDIO_PLAYER_Start+0xa2>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <AUDIO_PLAYER_Start+0xbc>)
 8001dae:	2203      	movs	r2, #3
 8001db0:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <AUDIO_PLAYER_Start+0xa2>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001db8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dbc:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <AUDIO_PLAYER_Start+0xb8>)
 8001dbe:	f7fe fbd1 	bl	8000564 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <AUDIO_PLAYER_Start+0xb8>)
 8001dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dcc:	605a      	str	r2, [r3, #4]
          return AUDIO_ERROR_NONE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <AUDIO_PLAYER_Start+0xa4>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20001740 	.word	0x20001740
 8001de0:	20001338 	.word	0x20001338
 8001de4:	20001714 	.word	0x20001714
 8001de8:	2000032c 	.word	0x2000032c
 8001dec:	20001334 	.word	0x20001334

08001df0 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001dfe:	4b82      	ldr	r3, [pc, #520]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3b03      	subs	r3, #3
 8001e04:	2b0a      	cmp	r3, #10
 8001e06:	f200 80f6 	bhi.w	8001ff6 <AUDIO_PLAYER_Process+0x206>
 8001e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e10 <AUDIO_PLAYER_Process+0x20>)
 8001e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e10:	08001e3d 	.word	0x08001e3d
 8001e14:	08001ff7 	.word	0x08001ff7
 8001e18:	08001f03 	.word	0x08001f03
 8001e1c:	08001f51 	.word	0x08001f51
 8001e20:	08001ff7 	.word	0x08001ff7
 8001e24:	08001ff7 	.word	0x08001ff7
 8001e28:	08001ef1 	.word	0x08001ef1
 8001e2c:	08001f93 	.word	0x08001f93
 8001e30:	08001f9f 	.word	0x08001f9f
 8001e34:	08001fab 	.word	0x08001fab
 8001e38:	08001fd1 	.word	0x08001fd1
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001e3c:	4b73      	ldr	r3, [pc, #460]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4b72      	ldr	r3, [pc, #456]	@ (8002010 <AUDIO_PLAYER_Process+0x220>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d305      	bcc.n	8001e58 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f7fe fbdf 	bl	8000610 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001e54:	2205      	movs	r2, #5
 8001e56:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001e58:	4b6c      	ldr	r3, [pc, #432]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d11e      	bne.n	8001ea2 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e6c:	4967      	ldr	r1, [pc, #412]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001e6e:	4869      	ldr	r0, [pc, #420]	@ (8002014 <AUDIO_PLAYER_Process+0x224>)
 8001e70:	f00c fe26 	bl	800eac0 <f_read>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f7fe fbc8 	bl	8000610 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0bc      	b.n	8001ffe <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001e84:	4b61      	ldr	r3, [pc, #388]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001e9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ea0:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	f040 80a5 	bne.w	8001ffa <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eb8:	4957      	ldr	r1, [pc, #348]	@ (8002018 <AUDIO_PLAYER_Process+0x228>)
 8001eba:	4856      	ldr	r0, [pc, #344]	@ (8002014 <AUDIO_PLAYER_Process+0x224>)
 8001ebc:	f00c fe00 	bl	800eac0 <f_read>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f7fe fba2 	bl	8000610 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e096      	b.n	8001ffe <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001eda:	4b4c      	ldr	r3, [pc, #304]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a49      	ldr	r2, [pc, #292]	@ (800200c <AUDIO_PLAYER_Process+0x21c>)
 8001ee8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eec:	6053      	str	r3, [r2, #4]
    }
    break;
 8001eee:	e084      	b.n	8001ffa <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f7fe fb8d 	bl	8000610 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001ef6:	4b44      	ldr	r3, [pc, #272]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
    break;
 8001f00:	e07c      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001f02:	4b46      	ldr	r3, [pc, #280]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b42      	ldr	r3, [pc, #264]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f12:	801a      	strh	r2, [r3, #0]
 8001f14:	4b41      	ldr	r3, [pc, #260]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	461c      	mov	r4, r3
 8001f1c:	f7fe ff3c 	bl	8000d98 <AUDIO_GetWavObjectNumber>
 8001f20:	4603      	mov	r3, r0
 8001f22:	429c      	cmp	r4, r3
 8001f24:	db09      	blt.n	8001f3a <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	e002      	b.n	8001f3a <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001f34:	4b34      	ldr	r3, [pc, #208]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001f36:	2209      	movs	r2, #9
 8001f38:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7fe fb68 	bl	8000610 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fef1 	bl	8001d30 <AUDIO_PLAYER_Start>
    break;    
 8001f4e:	e055      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001f50:	4b32      	ldr	r3, [pc, #200]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f60:	801a      	strh	r2, [r3, #0]
 8001f62:	4b2e      	ldr	r3, [pc, #184]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da07      	bge.n	8001f7c <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001f6c:	f7fe ff14 	bl	8000d98 <AUDIO_GetWavObjectNumber>
 8001f70:	4603      	mov	r3, r0
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	4b28      	ldr	r3, [pc, #160]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f7a:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7fe fb47 	bl	8000610 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <AUDIO_PLAYER_Process+0x22c>)
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fed0 	bl	8001d30 <AUDIO_PLAYER_Start>
    break;   
 8001f90:	e034      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8001f92:	f7fe fb11 	bl	80005b8 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
    break;
 8001f9c:	e02e      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8001f9e:	f7fe fb21 	bl	80005e4 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	701a      	strb	r2, [r3, #0]
    break;
 8001fa8:	e028      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b5a      	cmp	r3, #90	@ 0x5a
 8001fb0:	d804      	bhi.n	8001fbc <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	330a      	adds	r3, #10
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fba:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fb4c 	bl	8000660 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001fca:	2203      	movs	r2, #3
 8001fcc:	701a      	strb	r2, [r3, #0]
    break;
 8001fce:	e015      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d904      	bls.n	8001fe2 <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3b0a      	subs	r3, #10
 8001fde:	4a10      	ldr	r2, [pc, #64]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fe0:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <AUDIO_PLAYER_Process+0x230>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fb39 	bl	8000660 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <AUDIO_PLAYER_Process+0x218>)
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	701a      	strb	r2, [r3, #0]
    break;
 8001ff4:	e002      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8001ff6:	bf00      	nop
 8001ff8:	e000      	b.n	8001ffc <AUDIO_PLAYER_Process+0x20c>
    break;
 8001ffa:	bf00      	nop
  }
  return audio_error;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	20001334 	.word	0x20001334
 800200c:	2000032c 	.word	0x2000032c
 8002010:	20001714 	.word	0x20001714
 8002014:	20001740 	.word	0x20001740
 8002018:	20000b2c 	.word	0x20000b2c
 800201c:	20001336 	.word	0x20001336
 8002020:	2000003c 	.word	0x2000003c

08002024 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d104      	bne.n	800203a <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
  }
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20001334 	.word	0x20001334
 8002048:	2000032c 	.word	0x2000032c

0800204c <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d104      	bne.n	8002062 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800205a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
  }
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	20001334 	.word	0x20001334
 8002070:	2000032c 	.word	0x2000032c

08002074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800207a:	e003      	b.n	8002084 <LoopCopyDataInit>

0800207c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800207e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002082:	3104      	adds	r1, #4

08002084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002084:	480b      	ldr	r0, [pc, #44]	@ (80020b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800208a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800208c:	d3f6      	bcc.n	800207c <CopyDataInit>
  ldr  r2, =_sbss
 800208e:	4a0b      	ldr	r2, [pc, #44]	@ (80020bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002090:	e002      	b.n	8002098 <LoopFillZerobss>

08002092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002094:	f842 3b04 	str.w	r3, [r2], #4

08002098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800209a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800209c:	d3f9      	bcc.n	8002092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800209e:	f7ff fe19 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a2:	f00d ff39 	bl	800ff18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a6:	f7ff f9ff 	bl	80014a8 <main>
  bx  lr    
 80020aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020b0:	08010564 	.word	0x08010564
  ldr  r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020b8:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 80020bc:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 80020c0:	200025d0 	.word	0x200025d0

080020c4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <DMA1_Stream0_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <HAL_Init+0x40>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <HAL_Init+0x40>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	@ (8002108 <HAL_Init+0x40>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 fddd 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fbdc 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fdf5 	bl	8002d1a <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f000 fdbd 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	@ (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000038 	.word	0x20000038
 8002164:	20000044 	.word	0x20000044
 8002168:	20000040 	.word	0x20000040

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_IncTick+0x20>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_IncTick+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <HAL_IncTick+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000044 	.word	0x20000044
 8002190:	20001970 	.word	0x20001970

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	@ (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20001970 	.word	0x20001970

080021ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff ffee 	bl	8002194 <HAL_GetTick>
 80021b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d005      	beq.n	80021d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_Delay+0x44>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021d2:	bf00      	nop
 80021d4:	f7ff ffde 	bl	8002194 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f7      	bhi.n	80021d4 <HAL_Delay+0x28>
  {
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000044 	.word	0x20000044

080021f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e033      	b.n	8002272 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fb78 	bl	8001908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800223a:	f023 0302 	bic.w	r3, r3, #2
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fb5c 	bl	8002904 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	@ 0x40
 8002262:	e001      	b.n	8002268 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Start_IT+0x1a>
 8002292:	2302      	movs	r3, #2
 8002294:	e094      	b.n	80023c0 <HAL_ADC_Start_IT+0x144>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d018      	beq.n	80022de <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_ADC_Start_IT+0x150>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a43      	ldr	r2, [pc, #268]	@ (80023d0 <HAL_ADC_Start_IT+0x154>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0c9a      	lsrs	r2, r3, #18
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f9      	bne.n	80022d2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d168      	bne.n	80023be <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002316:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800232a:	d106      	bne.n	800233a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	f023 0206 	bic.w	r2, r3, #6
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	645a      	str	r2, [r3, #68]	@ 0x44
 8002338:	e002      	b.n	8002340 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002348:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <HAL_ADC_Start_IT+0x158>)
 800234a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002354:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002364:	f043 0320 	orr.w	r3, r3, #32
 8002368:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11c      	bne.n	80023be <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	e013      	b.n	80023be <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a0f      	ldr	r2, [pc, #60]	@ (80023d8 <HAL_ADC_Start_IT+0x15c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d10e      	bne.n	80023be <HAL_ADC_Start_IT+0x142>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	20000038 	.word	0x20000038
 80023d0:	431bde83 	.word	0x431bde83
 80023d4:	40012300 	.word	0x40012300
 80023d8:	40012000 	.word	0x40012000

080023dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d049      	beq.n	80024b2 <HAL_ADC_IRQHandler+0xd6>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d046      	beq.n	80024b2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d12b      	bne.n	80024a2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244e:	2b00      	cmp	r3, #0
 8002450:	d127      	bne.n	80024a2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800246a:	2b00      	cmp	r3, #0
 800246c:	d119      	bne.n	80024a2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0220 	bic.w	r2, r2, #32
 800247c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe ffe6 	bl	8001474 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0212 	mvn.w	r2, #18
 80024b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b80      	cmp	r3, #128	@ 0x80
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d057      	beq.n	8002594 <HAL_ADC_IRQHandler+0x1b8>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d054      	beq.n	8002594 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d105      	bne.n	8002502 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d139      	bne.n	8002584 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002516:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12b      	bne.n	8002584 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002536:	2b00      	cmp	r3, #0
 8002538:	d124      	bne.n	8002584 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d11d      	bne.n	8002584 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d119      	bne.n	8002584 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800255e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fab9 	bl	8002afc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f06f 020c 	mvn.w	r2, #12
 8002592:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b4:	2b40      	cmp	r3, #64	@ 0x40
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d017      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x21a>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d014      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10d      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f846 	bl	8002678 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0201 	mvn.w	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b20      	cmp	r3, #32
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002616:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_ADC_IRQHandler+0x27a>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	f043 0202 	orr.w	r2, r3, #2
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0220 	mvn.w	r2, #32
 8002644:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f820 	bl	800268c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0220 	mvn.w	r2, #32
 8002654:	601a      	str	r2, [r3, #0]
  }
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x1c>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e113      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x244>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	d925      	bls.n	8002718 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	3b1e      	subs	r3, #30
 80026e2:	2207      	movs	r2, #7
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43da      	mvns	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	400a      	ands	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68d9      	ldr	r1, [r3, #12]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	4603      	mov	r3, r0
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4403      	add	r3, r0
 800270a:	3b1e      	subs	r3, #30
 800270c:	409a      	lsls	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	e022      	b.n	800275e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	2207      	movs	r2, #7
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	400a      	ands	r2, r1
 800273a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	4603      	mov	r3, r0
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4403      	add	r3, r0
 8002754:	409a      	lsls	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b06      	cmp	r3, #6
 8002764:	d824      	bhi.n	80027b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b05      	subs	r3, #5
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b05      	subs	r3, #5
 80027a2:	fa00 f203 	lsl.w	r2, r0, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ae:	e04c      	b.n	800284a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d824      	bhi.n	8002802 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b23      	subs	r3, #35	@ 0x23
 80027ca:	221f      	movs	r2, #31
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43da      	mvns	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	400a      	ands	r2, r1
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b23      	subs	r3, #35	@ 0x23
 80027f4:	fa00 f203 	lsl.w	r2, r0, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002800:	e023      	b.n	800284a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b41      	subs	r3, #65	@ 0x41
 8002814:	221f      	movs	r2, #31
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	400a      	ands	r2, r1
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b41      	subs	r3, #65	@ 0x41
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800284a:	4b29      	ldr	r3, [pc, #164]	@ (80028f0 <HAL_ADC_ConfigChannel+0x250>)
 800284c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a28      	ldr	r2, [pc, #160]	@ (80028f4 <HAL_ADC_ConfigChannel+0x254>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d10f      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d8>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b12      	cmp	r3, #18
 800285e:	d10b      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_ADC_ConfigChannel+0x254>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12b      	bne.n	80028da <HAL_ADC_ConfigChannel+0x23a>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1c      	ldr	r2, [pc, #112]	@ (80028f8 <HAL_ADC_ConfigChannel+0x258>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x1f4>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b11      	cmp	r3, #17
 8002892:	d122      	bne.n	80028da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a11      	ldr	r2, [pc, #68]	@ (80028f8 <HAL_ADC_ConfigChannel+0x258>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d111      	bne.n	80028da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_ADC_ConfigChannel+0x25c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a11      	ldr	r2, [pc, #68]	@ (8002900 <HAL_ADC_ConfigChannel+0x260>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	0c9a      	lsrs	r2, r3, #18
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40012300 	.word	0x40012300
 80028f4:	40012000 	.word	0x40012000
 80028f8:	10000012 	.word	0x10000012
 80028fc:	20000038 	.word	0x20000038
 8002900:	431bde83 	.word	0x431bde83

08002904 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290c:	4b79      	ldr	r3, [pc, #484]	@ (8002af4 <ADC_Init+0x1f0>)
 800290e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800295c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800297e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	4a58      	ldr	r2, [pc, #352]	@ (8002af8 <ADC_Init+0x1f4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e00f      	b.n	8002a02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0202 	bic.w	r2, r2, #2
 8002a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
 8002a1c:	005a      	lsls	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	035a      	lsls	r2, r3, #13
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	e007      	b.n	8002a78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	051a      	lsls	r2, r3, #20
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aba:	025a      	lsls	r2, r3, #9
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	029a      	lsls	r2, r3, #10
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40012300 	.word	0x40012300
 8002af8:	0f000001 	.word	0x0f000001

08002afc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	@ (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	@ (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	@ (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	@ 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff fa28 	bl	8002194 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e099      	b.n	8002e84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d70:	e00f      	b.n	8002d92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d72:	f7ff fa0f 	bl	8002194 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d908      	bls.n	8002d92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e078      	b.n	8002e84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e8      	bne.n	8002d72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4b38      	ldr	r3, [pc, #224]	@ (8002e8c <HAL_DMA_Init+0x158>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d107      	bne.n	8002dfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	4313      	orrs	r3, r2
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 0307 	bic.w	r3, r3, #7
 8002e12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d117      	bne.n	8002e56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00e      	beq.n	8002e56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb3d 	bl	80034b8 <DMA_CheckFifoParam>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2240      	movs	r2, #64	@ 0x40
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e52:	2301      	movs	r3, #1
 8002e54:	e016      	b.n	8002e84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 faf4 	bl	800344c <DMA_CalcBaseAndBitshift>
 8002e64:	4603      	mov	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	223f      	movs	r2, #63	@ 0x3f
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	f010803f 	.word	0xf010803f

08002e90 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e050      	b.n	8002f44 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d101      	bne.n	8002eb2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e048      	b.n	8002f44 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2221      	movs	r2, #33	@ 0x21
 8002ef0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 faaa 	bl	800344c <DMA_CalcBaseAndBitshift>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	223f      	movs	r2, #63	@ 0x3f
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_DMA_Start_IT+0x26>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e040      	b.n	8002ff4 <HAL_DMA_Start_IT+0xa8>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d12f      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa28 	bl	80033f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	223f      	movs	r2, #63	@ 0x3f
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0216 	orr.w	r2, r2, #22
 8002fba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0208 	orr.w	r2, r2, #8
 8002fd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e005      	b.n	8002ff2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800300a:	f7ff f8c3 	bl	8002194 <HAL_GetTick>
 800300e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d008      	beq.n	800302e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2280      	movs	r2, #128	@ 0x80
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e052      	b.n	80030d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0216 	bic.w	r2, r2, #22
 800303c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800304c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <HAL_DMA_Abort+0x62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0208 	bic.w	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307e:	e013      	b.n	80030a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003080:	f7ff f888 	bl	8002194 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b05      	cmp	r3, #5
 800308c:	d90c      	bls.n	80030a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2203      	movs	r2, #3
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e015      	b.n	80030d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e4      	bne.n	8003080 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	223f      	movs	r2, #63	@ 0x3f
 80030bc:	409a      	lsls	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003324 <HAL_DMA_IRQHandler+0x248>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003328 <HAL_DMA_IRQHandler+0x24c>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	2208      	movs	r2, #8
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01a      	beq.n	8003148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0204 	bic.w	r2, r2, #4
 800312e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	2208      	movs	r2, #8
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	2201      	movs	r2, #1
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	f043 0202 	orr.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003182:	2204      	movs	r2, #4
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	2204      	movs	r2, #4
 80031a2:	409a      	lsls	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	2210      	movs	r2, #16
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d043      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03c      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d6:	2210      	movs	r2, #16
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d018      	beq.n	800321e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d024      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
 800320a:	e01f      	b.n	800324c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
 800321c:	e016      	b.n	800324c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0208 	bic.w	r2, r2, #8
 800323a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003250:	2220      	movs	r2, #32
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 808f 	beq.w	800337c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8087 	beq.w	800337c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2220      	movs	r2, #32
 8003274:	409a      	lsls	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b05      	cmp	r3, #5
 8003284:	d136      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0216 	bic.w	r2, r2, #22
 8003294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_DMA_IRQHandler+0x1da>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0208 	bic.w	r2, r2, #8
 80032c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	223f      	movs	r2, #63	@ 0x3f
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d07e      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
        }
        return;
 80032f2:	e079      	b.n	80033e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01d      	beq.n	800333e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	2b00      	cmp	r3, #0
 8003316:	d031      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
 8003320:	e02c      	b.n	800337c <HAL_DMA_IRQHandler+0x2a0>
 8003322:	bf00      	nop
 8003324:	20000038 	.word	0x20000038
 8003328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d023      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e01e      	b.n	800337c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10f      	bne.n	800336c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0210 	bic.w	r2, r2, #16
 800335a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	2b00      	cmp	r3, #0
 8003382:	d032      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2205      	movs	r2, #5
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d307      	bcc.n	80033c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f2      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x2cc>
 80033c2:	e000      	b.n	80033c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033c4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
 80033e6:	e000      	b.n	80033ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80033e8:	bf00      	nop
    }
  }
}
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800340c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b40      	cmp	r3, #64	@ 0x40
 800341c:	d108      	bne.n	8003430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800342e:	e007      	b.n	8003440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3b10      	subs	r3, #16
 800345c:	4a14      	ldr	r2, [pc, #80]	@ (80034b0 <DMA_CalcBaseAndBitshift+0x64>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003466:	4a13      	ldr	r2, [pc, #76]	@ (80034b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d909      	bls.n	800348e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	659a      	str	r2, [r3, #88]	@ 0x58
 800348c:	e007      	b.n	800349e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	aaaaaaab 	.word	0xaaaaaaab
 80034b4:	080100f8 	.word	0x080100f8

080034b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11f      	bne.n	8003512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d856      	bhi.n	8003586 <DMA_CheckFifoParam+0xce>
 80034d8:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <DMA_CheckFifoParam+0x28>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003503 	.word	0x08003503
 80034e8:	080034f1 	.word	0x080034f1
 80034ec:	08003587 	.word	0x08003587
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d046      	beq.n	800358a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e043      	b.n	800358a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800350a:	d140      	bne.n	800358e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e03d      	b.n	800358e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800351a:	d121      	bne.n	8003560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d837      	bhi.n	8003592 <DMA_CheckFifoParam+0xda>
 8003522:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <DMA_CheckFifoParam+0x70>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	08003539 	.word	0x08003539
 800352c:	0800353f 	.word	0x0800353f
 8003530:	08003539 	.word	0x08003539
 8003534:	08003551 	.word	0x08003551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e030      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d025      	beq.n	8003596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354e:	e022      	b.n	8003596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003558:	d11f      	bne.n	800359a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800355e:	e01c      	b.n	800359a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d903      	bls.n	800356e <DMA_CheckFifoParam+0xb6>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d003      	beq.n	8003574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800356c:	e018      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      break;
 8003572:	e015      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e00b      	b.n	800359e <DMA_CheckFifoParam+0xe6>
      break;
 8003586:	bf00      	nop
 8003588:	e00a      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e008      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e006      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
 8003594:	e004      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
    }
  } 
  
  return status; 
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	@ 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e159      	b.n	8003880 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8148 	bne.w	800387a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d00b      	beq.n	800360a <HAL_GPIO_Init+0x5a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d007      	beq.n	800360a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035fe:	2b11      	cmp	r3, #17
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b12      	cmp	r3, #18
 8003608:	d130      	bne.n	800366c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	2203      	movs	r2, #3
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 0201 	and.w	r2, r3, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0xfc>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b12      	cmp	r3, #18
 80036aa:	d123      	bne.n	80036f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a2 	beq.w	800387a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b57      	ldr	r3, [pc, #348]	@ (8003898 <HAL_GPIO_Init+0x2e8>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	4a56      	ldr	r2, [pc, #344]	@ (8003898 <HAL_GPIO_Init+0x2e8>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003744:	6453      	str	r3, [r2, #68]	@ 0x44
 8003746:	4b54      	ldr	r3, [pc, #336]	@ (8003898 <HAL_GPIO_Init+0x2e8>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003752:	4a52      	ldr	r2, [pc, #328]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a49      	ldr	r2, [pc, #292]	@ (80038a0 <HAL_GPIO_Init+0x2f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d019      	beq.n	80037b2 <HAL_GPIO_Init+0x202>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a48      	ldr	r2, [pc, #288]	@ (80038a4 <HAL_GPIO_Init+0x2f4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_GPIO_Init+0x1fe>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a47      	ldr	r2, [pc, #284]	@ (80038a8 <HAL_GPIO_Init+0x2f8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00d      	beq.n	80037aa <HAL_GPIO_Init+0x1fa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a46      	ldr	r2, [pc, #280]	@ (80038ac <HAL_GPIO_Init+0x2fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <HAL_GPIO_Init+0x1f6>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a45      	ldr	r2, [pc, #276]	@ (80038b0 <HAL_GPIO_Init+0x300>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_GPIO_Init+0x1f2>
 800379e:	2304      	movs	r3, #4
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037a2:	2307      	movs	r3, #7
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c4:	4935      	ldr	r1, [pc, #212]	@ (800389c <HAL_GPIO_Init+0x2ec>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d2:	4b38      	ldr	r3, [pc, #224]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f6:	4a2f      	ldr	r2, [pc, #188]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037fc:	4b2d      	ldr	r3, [pc, #180]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003820:	4a24      	ldr	r2, [pc, #144]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b23      	ldr	r3, [pc, #140]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a1a      	ldr	r2, [pc, #104]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b18      	ldr	r3, [pc, #96]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a0f      	ldr	r2, [pc, #60]	@ (80038b4 <HAL_GPIO_Init+0x304>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f aea2 	bls.w	80035cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	@ 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40013800 	.word	0x40013800
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40013c00 	.word	0x40013c00

080038b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e0bb      	b.n	8003a4c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d4:	2201      	movs	r2, #1
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	f040 80ab 	bne.w	8003a46 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003a64 <HAL_GPIO_DeInit+0x1ac>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a54      	ldr	r2, [pc, #336]	@ (8003a68 <HAL_GPIO_DeInit+0x1b0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d019      	beq.n	800394e <HAL_GPIO_DeInit+0x96>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a53      	ldr	r2, [pc, #332]	@ (8003a6c <HAL_GPIO_DeInit+0x1b4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_DeInit+0x92>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a52      	ldr	r2, [pc, #328]	@ (8003a70 <HAL_GPIO_DeInit+0x1b8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00d      	beq.n	8003946 <HAL_GPIO_DeInit+0x8e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a51      	ldr	r2, [pc, #324]	@ (8003a74 <HAL_GPIO_DeInit+0x1bc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_DeInit+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a50      	ldr	r2, [pc, #320]	@ (8003a78 <HAL_GPIO_DeInit+0x1c0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_GPIO_DeInit+0x86>
 800393a:	2304      	movs	r3, #4
 800393c:	e008      	b.n	8003950 <HAL_GPIO_DeInit+0x98>
 800393e:	2307      	movs	r3, #7
 8003940:	e006      	b.n	8003950 <HAL_GPIO_DeInit+0x98>
 8003942:	2303      	movs	r3, #3
 8003944:	e004      	b.n	8003950 <HAL_GPIO_DeInit+0x98>
 8003946:	2302      	movs	r3, #2
 8003948:	e002      	b.n	8003950 <HAL_GPIO_DeInit+0x98>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_GPIO_DeInit+0x98>
 800394e:	2300      	movs	r3, #0
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	f002 0203 	and.w	r2, r2, #3
 8003956:	0092      	lsls	r2, r2, #2
 8003958:	4093      	lsls	r3, r2
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d132      	bne.n	80039c6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003960:	4b46      	ldr	r3, [pc, #280]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43db      	mvns	r3, r3
 8003968:	4944      	ldr	r1, [pc, #272]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 800396a:	4013      	ands	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800396e:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	43db      	mvns	r3, r3
 8003976:	4941      	ldr	r1, [pc, #260]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 8003978:	4013      	ands	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800397c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43db      	mvns	r3, r3
 8003984:	493d      	ldr	r1, [pc, #244]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 8003986:	4013      	ands	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800398a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43db      	mvns	r3, r3
 8003992:	493a      	ldr	r1, [pc, #232]	@ (8003a7c <HAL_GPIO_DeInit+0x1c4>)
 8003994:	4013      	ands	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80039a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <HAL_GPIO_DeInit+0x1ac>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	43da      	mvns	r2, r3
 80039b8:	482a      	ldr	r0, [pc, #168]	@ (8003a64 <HAL_GPIO_DeInit+0x1ac>)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	400a      	ands	r2, r1
 80039c0:	3302      	adds	r3, #2
 80039c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2103      	movs	r1, #3
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	220f      	movs	r2, #15
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	08d2      	lsrs	r2, r2, #3
 80039fc:	4019      	ands	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3208      	adds	r2, #8
 8003a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2103      	movs	r1, #3
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	2101      	movs	r1, #1
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	2103      	movs	r1, #3
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	f67f af40 	bls.w	80038d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	40020400 	.word	0x40020400
 8003a70:	40020800 	.word	0x40020800
 8003a74:	40020c00 	.word	0x40020c00
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40013c00 	.word	0x40013c00

08003a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a90:	787b      	ldrb	r3, [r7, #1]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a9c:	e003      	b.n	8003aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a9e:	887b      	ldrh	r3, [r7, #2]
 8003aa0:	041a      	lsls	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	619a      	str	r2, [r3, #24]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aca:	4a05      	ldr	r2, [pc, #20]	@ (8003ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fcb0 	bl	8001438 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40013c00 	.word	0x40013c00

08003ae4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae6:	b08f      	sub	sp, #60	@ 0x3c
 8003ae8:	af0a      	add	r7, sp, #40	@ 0x28
 8003aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e054      	b.n	8003ba0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 32b9 	ldrb.w	r3, [r3, #697]	@ 0x2b9
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f00b fe1b 	bl	800f74c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f004 fbe5 	bl	8008304 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	687e      	ldr	r6, [r7, #4]
 8003b42:	466d      	mov	r5, sp
 8003b44:	f106 0410 	add.w	r4, r6, #16
 8003b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b54:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b58:	1d33      	adds	r3, r6, #4
 8003b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b5c:	6838      	ldr	r0, [r7, #0]
 8003b5e:	f004 fb5f 	bl	8008220 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f004 fbdc 	bl	8008326 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	687e      	ldr	r6, [r7, #4]
 8003b76:	466d      	mov	r5, sp
 8003b78:	f106 0410 	add.w	r4, r6, #16
 8003b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b88:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b8c:	1d33      	adds	r3, r6, #4
 8003b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	f004 fcef 	bl	8008574 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ba8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b089      	sub	sp, #36	@ 0x24
 8003bac:	af04      	add	r7, sp, #16
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	70fb      	strb	r3, [r7, #3]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70bb      	strb	r3, [r7, #2]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_HCD_HC_Init+0x28>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e07f      	b.n	8003cd0 <HAL_HCD_HC_Init+0x128>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	440b      	add	r3, r1
 8003be6:	333d      	adds	r3, #61	@ 0x3d
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3338      	adds	r3, #56	@ 0x38
 8003bfc:	787a      	ldrb	r2, [r7, #1]
 8003bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3340      	adds	r3, #64	@ 0x40
 8003c10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003c12:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	3339      	adds	r3, #57	@ 0x39
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	333f      	adds	r3, #63	@ 0x3f
 8003c38:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003c3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	78bb      	ldrb	r3, [r7, #2]
 8003c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c46:	b2d8      	uxtb	r0, r3
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	440b      	add	r3, r1
 8003c54:	333a      	adds	r3, #58	@ 0x3a
 8003c56:	4602      	mov	r2, r0
 8003c58:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003c5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da0a      	bge.n	8003c78 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	440b      	add	r3, r1
 8003c70:	333b      	adds	r3, #59	@ 0x3b
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e009      	b.n	8003c8c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	440b      	add	r3, r1
 8003c86:	333b      	adds	r3, #59	@ 0x3b
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	333c      	adds	r3, #60	@ 0x3c
 8003c9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003ca0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	787c      	ldrb	r4, [r7, #1]
 8003ca8:	78ba      	ldrb	r2, [r7, #2]
 8003caa:	78f9      	ldrb	r1, [r7, #3]
 8003cac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003cae:	9302      	str	r3, [sp, #8]
 8003cb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	f004 fddb 	bl	8008878 <USB_HC_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return status;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd90      	pop	{r4, r7, pc}

08003cd8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_HCD_HC_Halt+0x1e>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e00f      	b.n	8003d16 <HAL_HCD_HC_Halt+0x3e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f005 f815 	bl	8008d36 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return status;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	70fb      	strb	r3, [r7, #3]
 8003d32:	460b      	mov	r3, r1
 8003d34:	70bb      	strb	r3, [r7, #2]
 8003d36:	4613      	mov	r3, r2
 8003d38:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	440b      	add	r3, r1
 8003d48:	333b      	adds	r3, #59	@ 0x3b
 8003d4a:	78ba      	ldrb	r2, [r7, #2]
 8003d4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	333f      	adds	r3, #63	@ 0x3f
 8003d5e:	787a      	ldrb	r2, [r7, #1]
 8003d60:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003d62:	7c3b      	ldrb	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d114      	bne.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	440b      	add	r3, r1
 8003d76:	3342      	adds	r3, #66	@ 0x42
 8003d78:	2203      	movs	r2, #3
 8003d7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	333d      	adds	r3, #61	@ 0x3d
 8003d8c:	7f3a      	ldrb	r2, [r7, #28]
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e009      	b.n	8003da6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	3342      	adds	r3, #66	@ 0x42
 8003da2:	2202      	movs	r2, #2
 8003da4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003da6:	787b      	ldrb	r3, [r7, #1]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	f200 80d6 	bhi.w	8003f5a <HAL_HCD_HC_SubmitRequest+0x23a>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003f45 	.word	0x08003f45
 8003dbc:	08003e31 	.word	0x08003e31
 8003dc0:	08003ebb 	.word	0x08003ebb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003dc4:	7c3b      	ldrb	r3, [r7, #16]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	f040 80c9 	bne.w	8003f5e <HAL_HCD_HC_SubmitRequest+0x23e>
 8003dcc:	78bb      	ldrb	r3, [r7, #2]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 80c5 	bne.w	8003f5e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003dd4:	8b3b      	ldrh	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	3351      	adds	r3, #81	@ 0x51
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3351      	adds	r3, #81	@ 0x51
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	440b      	add	r3, r1
 8003e12:	3342      	adds	r3, #66	@ 0x42
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e18:	e0a1      	b.n	8003f5e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	3342      	adds	r3, #66	@ 0x42
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	701a      	strb	r2, [r3, #0]
      break;
 8003e2e:	e096      	b.n	8003f5e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003e30:	78bb      	ldrb	r3, [r7, #2]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d120      	bne.n	8003e78 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	3351      	adds	r3, #81	@ 0x51
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	3342      	adds	r3, #66	@ 0x42
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003e60:	e07e      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	440b      	add	r3, r1
 8003e70:	3342      	adds	r3, #66	@ 0x42
 8003e72:	2202      	movs	r2, #2
 8003e74:	701a      	strb	r2, [r3, #0]
      break;
 8003e76:	e073      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	3350      	adds	r3, #80	@ 0x50
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3342      	adds	r3, #66	@ 0x42
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
      break;
 8003ea2:	e05d      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3342      	adds	r3, #66	@ 0x42
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	701a      	strb	r2, [r3, #0]
      break;
 8003eb8:	e052      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003eba:	78bb      	ldrb	r3, [r7, #2]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d120      	bne.n	8003f02 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	440b      	add	r3, r1
 8003ece:	3351      	adds	r3, #81	@ 0x51
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	440b      	add	r3, r1
 8003ee4:	3342      	adds	r3, #66	@ 0x42
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003eea:	e039      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	440b      	add	r3, r1
 8003efa:	3342      	adds	r3, #66	@ 0x42
 8003efc:	2202      	movs	r2, #2
 8003efe:	701a      	strb	r2, [r3, #0]
      break;
 8003f00:	e02e      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	3350      	adds	r3, #80	@ 0x50
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	440b      	add	r3, r1
 8003f26:	3342      	adds	r3, #66	@ 0x42
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
      break;
 8003f2c:	e018      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3342      	adds	r3, #66	@ 0x42
 8003f3e:	2202      	movs	r2, #2
 8003f40:	701a      	strb	r2, [r3, #0]
      break;
 8003f42:	e00d      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	3342      	adds	r3, #66	@ 0x42
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
      break;
 8003f58:	e002      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003f5e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3344      	adds	r3, #68	@ 0x44
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	8b39      	ldrh	r1, [r7, #24]
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4403      	add	r3, r0
 8003f84:	3348      	adds	r3, #72	@ 0x48
 8003f86:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	440b      	add	r3, r1
 8003f96:	335c      	adds	r3, #92	@ 0x5c
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	334c      	adds	r3, #76	@ 0x4c
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3339      	adds	r3, #57	@ 0x39
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	335d      	adds	r3, #93	@ 0x5d
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	3338      	adds	r3, #56	@ 0x38
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	18d1      	adds	r1, r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f004 fd4a 	bl	8008a8c <USB_HC_StartXfer>
 8003ff8:	4603      	mov	r3, r0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop

08004004 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f004 fa67 	bl	80084ee <USB_GetMode>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	f040 80ef 	bne.w	8004206 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f004 fa4b 	bl	80084c8 <USB_ReadInterrupts>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80e5 	beq.w	8004204 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f004 fa42 	bl	80084c8 <USB_ReadInterrupts>
 8004044:	4603      	mov	r3, r0
 8004046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800404a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800404e:	d104      	bne.n	800405a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004058:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f004 fa32 	bl	80084c8 <USB_ReadInterrupts>
 8004064:	4603      	mov	r3, r0
 8004066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800406e:	d104      	bne.n	800407a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004078:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f004 fa22 	bl	80084c8 <USB_ReadInterrupts>
 8004084:	4603      	mov	r3, r0
 8004086:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800408a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800408e:	d104      	bne.n	800409a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004098:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f004 fa12 	bl	80084c8 <USB_ReadInterrupts>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d103      	bne.n	80040b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2202      	movs	r2, #2
 80040b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f004 fa04 	bl	80084c8 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ca:	d115      	bne.n	80040f8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80040d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d108      	bne.n	80040f8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f00b fbae 	bl	800f848 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 fafa 	bl	80086ec <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f004 f9e3 	bl	80084c8 <USB_ReadInterrupts>
 8004102:	4603      	mov	r3, r0
 8004104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800410c:	d102      	bne.n	8004114 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f001 f968 	bl	80053e4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f004 f9d5 	bl	80084c8 <USB_ReadInterrupts>
 800411e:	4603      	mov	r3, r0
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d106      	bne.n	8004136 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f00b fb71 	bl	800f810 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2208      	movs	r2, #8
 8004134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f004 f9c4 	bl	80084c8 <USB_ReadInterrupts>
 8004140:	4603      	mov	r3, r0
 8004142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004146:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800414a:	d138      	bne.n	80041be <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f004 fddf 	bl	8008d14 <USB_HC_ReadInterrupt>
 8004156:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e025      	b.n	80041aa <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	fa22 f303 	lsr.w	r3, r2, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004188:	d106      	bne.n	8004198 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f8cf 	bl	8004334 <HCD_HC_IN_IRQHandler>
 8004196:	e005      	b.n	80041a4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fcfd 	bl	8004b9e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3301      	adds	r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3d4      	bcc.n	800415e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 f980 	bl	80084c8 <USB_ReadInterrupts>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d101      	bne.n	80041d6 <HAL_HCD_IRQHandler+0x1d2>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_HCD_IRQHandler+0x1d4>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d014      	beq.n	8004206 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0210 	bic.w	r2, r2, #16
 80041ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f001 f84b 	bl	8005288 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0210 	orr.w	r2, r2, #16
 8004200:	619a      	str	r2, [r3, #24]
 8004202:	e000      	b.n	8004206 <HAL_HCD_IRQHandler+0x202>
      return;
 8004204:	bf00      	nop
    }
  }
}
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_HCD_Start+0x16>
 800421e:	2302      	movs	r3, #2
 8004220:	e013      	b.n	800424a <HAL_HCD_Start+0x3e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f004 f857 	bl	80082e2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f004 faba 	bl	80087b4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_HCD_Stop+0x16>
 8004264:	2302      	movs	r3, #2
 8004266:	e00d      	b.n	8004284 <HAL_HCD_Stop+0x32>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f004 fe99 	bl	8008fac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f004 fa61 	bl	8008760 <USB_ResetPort>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	335c      	adds	r3, #92	@ 0x5c
 80042c4:	781b      	ldrb	r3, [r3, #0]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	334c      	adds	r3, #76	@ 0x4c
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f004 faa3 	bl	8008854 <USB_GetCurrentFrame>
 800430e:	4603      	mov	r3, r0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fa7e 	bl	8008826 <USB_GetHostSpeed>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b04      	cmp	r3, #4
 8004362:	d119      	bne.n	8004398 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004370:	461a      	mov	r2, r3
 8004372:	2304      	movs	r3, #4
 8004374:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	440a      	add	r2, r1
 800438c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	60d3      	str	r3, [r2, #12]
 8004396:	e0ce      	b.n	8004536 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ae:	d12c      	bne.n	800440a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043bc:	461a      	mov	r2, r3
 80043be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	440b      	add	r3, r1
 80043d2:	335d      	adds	r3, #93	@ 0x5d
 80043d4:	2207      	movs	r2, #7
 80043d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043f2:	f043 0302 	orr.w	r3, r3, #2
 80043f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f004 fc97 	bl	8008d36 <USB_HC_Halt>
 8004408:	e095      	b.n	8004536 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4413      	add	r3, r2
 8004412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d109      	bne.n	8004434 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442c:	461a      	mov	r2, r3
 800442e:	2320      	movs	r3, #32
 8004430:	6093      	str	r3, [r2, #8]
 8004432:	e080      	b.n	8004536 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d134      	bne.n	80044b4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	440a      	add	r2, r1
 8004460:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	440b      	add	r3, r1
 8004478:	335d      	adds	r3, #93	@ 0x5d
 800447a:	2205      	movs	r2, #5
 800447c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448a:	461a      	mov	r2, r3
 800448c:	2310      	movs	r3, #16
 800448e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800449c:	461a      	mov	r2, r3
 800449e:	2308      	movs	r3, #8
 80044a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f004 fc42 	bl	8008d36 <USB_HC_Halt>
 80044b2:	e040      	b.n	8004536 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ca:	d134      	bne.n	8004536 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044e6:	f043 0302 	orr.w	r3, r3, #2
 80044ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f004 fc1d 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004508:	461a      	mov	r2, r3
 800450a:	2310      	movs	r3, #16
 800450c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	335d      	adds	r3, #93	@ 0x5d
 800451e:	2208      	movs	r2, #8
 8004520:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452e:	461a      	mov	r2, r3
 8004530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004534:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800454c:	d122      	bne.n	8004594 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	440a      	add	r2, r1
 8004564:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f004 fbdc 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458a:	461a      	mov	r2, r3
 800458c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004590:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004592:	e300      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	f040 80fd 	bne.w	80047a6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	440b      	add	r3, r1
 80045c2:	3348      	adds	r3, #72	@ 0x48
 80045c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	0159      	lsls	r1, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80045d8:	1ad1      	subs	r1, r2, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4403      	add	r3, r0
 80045e8:	334c      	adds	r3, #76	@ 0x4c
 80045ea:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	335d      	adds	r3, #93	@ 0x5d
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	3358      	adds	r3, #88	@ 0x58
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004620:	461a      	mov	r2, r3
 8004622:	2301      	movs	r3, #1
 8004624:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	440b      	add	r3, r1
 8004634:	333f      	adds	r3, #63	@ 0x3f
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	440b      	add	r3, r1
 800464a:	333f      	adds	r3, #63	@ 0x3f
 800464c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800464e:	2b02      	cmp	r3, #2
 8004650:	d121      	bne.n	8004696 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	440a      	add	r2, r1
 8004668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f004 fb5a 	bl	8008d36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800468e:	461a      	mov	r2, r3
 8004690:	2310      	movs	r3, #16
 8004692:	6093      	str	r3, [r2, #8]
 8004694:	e070      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	440b      	add	r3, r1
 80046a4:	333f      	adds	r3, #63	@ 0x3f
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d12a      	bne.n	8004702 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046ca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	440b      	add	r3, r1
 80046da:	335c      	adds	r3, #92	@ 0x5c
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	b2d8      	uxtb	r0, r3
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	335c      	adds	r3, #92	@ 0x5c
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	4601      	mov	r1, r0
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f00b f8b2 	bl	800f864 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004700:	e03a      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	333f      	adds	r3, #63	@ 0x3f
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d12f      	bne.n	8004778 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	335c      	adds	r3, #92	@ 0x5c
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3350      	adds	r3, #80	@ 0x50
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f083 0301 	eor.w	r3, r3, #1
 8004742:	b2d8      	uxtb	r0, r3
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3350      	adds	r3, #80	@ 0x50
 8004754:	4602      	mov	r2, r0
 8004756:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	b2d8      	uxtb	r0, r3
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	440b      	add	r3, r1
 800476a:	335c      	adds	r3, #92	@ 0x5c
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	4601      	mov	r1, r0
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f00b f876 	bl	800f864 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	3350      	adds	r3, #80	@ 0x50
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f083 0301 	eor.w	r3, r3, #1
 800478e:	b2d8      	uxtb	r0, r3
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	440b      	add	r3, r1
 800479e:	3350      	adds	r3, #80	@ 0x50
 80047a0:	4602      	mov	r2, r0
 80047a2:	701a      	strb	r2, [r3, #0]
}
 80047a4:	e1f7      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	f040 811a 	bne.w	80049f2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047d8:	f023 0302 	bic.w	r3, r3, #2
 80047dc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	440b      	add	r3, r1
 80047ec:	335d      	adds	r3, #93	@ 0x5d
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10a      	bne.n	800480a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	440b      	add	r3, r1
 8004802:	335c      	adds	r3, #92	@ 0x5c
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e0d9      	b.n	80049be <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	440b      	add	r3, r1
 8004818:	335d      	adds	r3, #93	@ 0x5d
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b05      	cmp	r3, #5
 800481e:	d10a      	bne.n	8004836 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	440b      	add	r3, r1
 800482e:	335c      	adds	r3, #92	@ 0x5c
 8004830:	2205      	movs	r2, #5
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e0c3      	b.n	80049be <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	440b      	add	r3, r1
 8004844:	335d      	adds	r3, #93	@ 0x5d
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b06      	cmp	r3, #6
 800484a:	d00a      	beq.n	8004862 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	335d      	adds	r3, #93	@ 0x5d
 800485c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800485e:	2b08      	cmp	r3, #8
 8004860:	d156      	bne.n	8004910 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	440b      	add	r3, r1
 8004870:	3358      	adds	r3, #88	@ 0x58
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c59      	adds	r1, r3, #1
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4403      	add	r3, r0
 8004884:	3358      	adds	r3, #88	@ 0x58
 8004886:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	440b      	add	r3, r1
 8004896:	3358      	adds	r3, #88	@ 0x58
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d914      	bls.n	80048c8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	440b      	add	r3, r1
 80048ac:	3358      	adds	r3, #88	@ 0x58
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	440b      	add	r3, r1
 80048c0:	335c      	adds	r3, #92	@ 0x5c
 80048c2:	2204      	movs	r2, #4
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e009      	b.n	80048dc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	440b      	add	r3, r1
 80048d6:	335c      	adds	r3, #92	@ 0x5c
 80048d8:	2202      	movs	r2, #2
 80048da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e056      	b.n	80049be <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	440b      	add	r3, r1
 800491e:	335d      	adds	r3, #93	@ 0x5d
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d123      	bne.n	800496e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	335c      	adds	r3, #92	@ 0x5c
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004950:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004958:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e027      	b.n	80049be <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	440b      	add	r3, r1
 800497c:	335d      	adds	r3, #93	@ 0x5d
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b07      	cmp	r3, #7
 8004982:	d11c      	bne.n	80049be <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	3358      	adds	r3, #88	@ 0x58
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4403      	add	r3, r0
 80049a6:	3358      	adds	r3, #88	@ 0x58
 80049a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	335c      	adds	r3, #92	@ 0x5c
 80049ba:	2204      	movs	r2, #4
 80049bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ca:	461a      	mov	r2, r3
 80049cc:	2302      	movs	r3, #2
 80049ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	b2d8      	uxtb	r0, r3
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	335c      	adds	r3, #92	@ 0x5c
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	4601      	mov	r1, r0
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f00a ff3a 	bl	800f864 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049f0:	e0d1      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d13e      	bne.n	8004a86 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a22:	f043 0302 	orr.w	r3, r3, #2
 8004a26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	440b      	add	r3, r1
 8004a36:	3358      	adds	r3, #88	@ 0x58
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4403      	add	r3, r0
 8004a4a:	3358      	adds	r3, #88	@ 0x58
 8004a4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	440b      	add	r3, r1
 8004a5c:	335d      	adds	r3, #93	@ 0x5d
 8004a5e:	2206      	movs	r2, #6
 8004a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f004 f962 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	6093      	str	r3, [r2, #8]
}
 8004a84:	e087      	b.n	8004b96 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d17c      	bne.n	8004b96 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	440b      	add	r3, r1
 8004aaa:	333f      	adds	r3, #63	@ 0x3f
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d122      	bne.n	8004af8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	440b      	add	r3, r1
 8004ac0:	3358      	adds	r3, #88	@ 0x58
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ae0:	f043 0302 	orr.w	r3, r3, #2
 8004ae4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f004 f920 	bl	8008d36 <USB_HC_Halt>
 8004af6:	e045      	b.n	8004b84 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	440b      	add	r3, r1
 8004b06:	333f      	adds	r3, #63	@ 0x3f
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	333f      	adds	r3, #63	@ 0x3f
 8004b1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d12f      	bne.n	8004b84 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	440b      	add	r3, r1
 8004b32:	3358      	adds	r3, #88	@ 0x58
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d121      	bne.n	8004b84 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	335d      	adds	r3, #93	@ 0x5d
 8004b50:	2203      	movs	r2, #3
 8004b52:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f004 f8d9 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b90:	461a      	mov	r2, r3
 8004b92:	2310      	movs	r3, #16
 8004b94:	6093      	str	r3, [r2, #8]
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d119      	bne.n	8004c02 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2304      	movs	r3, #4
 8004bde:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004c00:	e33e      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d141      	bne.n	8004c9c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c24:	461a      	mov	r2, r3
 8004c26:	2320      	movs	r3, #32
 8004c28:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	440b      	add	r3, r1
 8004c38:	333d      	adds	r3, #61	@ 0x3d
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 831f 	bne.w	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	440b      	add	r3, r1
 8004c50:	333d      	adds	r3, #61	@ 0x3d
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	335c      	adds	r3, #92	@ 0x5c
 8004c66:	2202      	movs	r2, #2
 8004c68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f004 f84e 	bl	8008d36 <USB_HC_Halt>
}
 8004c9a:	e2f1      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d13f      	bne.n	8004d32 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	335d      	adds	r3, #93	@ 0x5d
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	333d      	adds	r3, #61	@ 0x3d
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3358      	adds	r3, #88	@ 0x58
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f004 f80c 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2340      	movs	r3, #64	@ 0x40
 8004d2e:	6093      	str	r3, [r2, #8]
}
 8004d30:	e2a6      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d48:	d122      	bne.n	8004d90 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f003 ffde 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d86:	461a      	mov	r2, r3
 8004d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d8c:	6093      	str	r3, [r2, #8]
}
 8004d8e:	e277      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d135      	bne.n	8004e12 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	440b      	add	r3, r1
 8004db4:	3358      	adds	r3, #88	@ 0x58
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f003 ffa6 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df6:	461a      	mov	r2, r3
 8004df8:	2301      	movs	r3, #1
 8004dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	335d      	adds	r3, #93	@ 0x5d
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
}
 8004e10:	e236      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d12b      	bne.n	8004e80 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e34:	461a      	mov	r2, r3
 8004e36:	2308      	movs	r3, #8
 8004e38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f003 ff66 	bl	8008d36 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	440b      	add	r3, r1
 8004e78:	335d      	adds	r3, #93	@ 0x5d
 8004e7a:	2205      	movs	r2, #5
 8004e7c:	701a      	strb	r2, [r3, #0]
}
 8004e7e:	e1ff      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d155      	bne.n	8004f42 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	440b      	add	r3, r1
 8004ea4:	3358      	adds	r3, #88	@ 0x58
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	335d      	adds	r3, #93	@ 0x5d
 8004eba:	2203      	movs	r2, #3
 8004ebc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	440b      	add	r3, r1
 8004ecc:	333d      	adds	r3, #61	@ 0x3d
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d114      	bne.n	8004efe <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	333c      	adds	r3, #60	@ 0x3c
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	440b      	add	r3, r1
 8004ef8:	333d      	adds	r3, #61	@ 0x3d
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f003 ff04 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	6093      	str	r3, [r2, #8]
}
 8004f40:	e19e      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f54:	2b80      	cmp	r3, #128	@ 0x80
 8004f56:	d12b      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f72:	f043 0302 	orr.w	r3, r3, #2
 8004f76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f003 fed7 	bl	8008d36 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	440b      	add	r3, r1
 8004f96:	335d      	adds	r3, #93	@ 0x5d
 8004f98:	2206      	movs	r2, #6
 8004f9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	6093      	str	r3, [r2, #8]
}
 8004fae:	e167      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc6:	d135      	bne.n	8005034 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fe2:	f043 0302 	orr.w	r3, r3, #2
 8004fe6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 fe9f 	bl	8008d36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005004:	461a      	mov	r2, r3
 8005006:	2310      	movs	r3, #16
 8005008:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005016:	461a      	mov	r2, r3
 8005018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800501c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	440b      	add	r3, r1
 800502c:	335d      	adds	r3, #93	@ 0x5d
 800502e:	2208      	movs	r2, #8
 8005030:	701a      	strb	r2, [r3, #0]
}
 8005032:	e125      	b.n	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	f040 811a 	bne.w	8005280 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	440a      	add	r2, r1
 8005062:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005066:	f023 0302 	bic.w	r3, r3, #2
 800506a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	335d      	adds	r3, #93	@ 0x5d
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d137      	bne.n	80050f2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	440b      	add	r3, r1
 8005090:	335c      	adds	r3, #92	@ 0x5c
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	440b      	add	r3, r1
 80050a4:	333f      	adds	r3, #63	@ 0x3f
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d00b      	beq.n	80050c4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	440b      	add	r3, r1
 80050ba:	333f      	adds	r3, #63	@ 0x3f
 80050bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80050be:	2b03      	cmp	r3, #3
 80050c0:	f040 80c5 	bne.w	800524e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	3351      	adds	r3, #81	@ 0x51
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f083 0301 	eor.w	r3, r3, #1
 80050da:	b2d8      	uxtb	r0, r3
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	440b      	add	r3, r1
 80050ea:	3351      	adds	r3, #81	@ 0x51
 80050ec:	4602      	mov	r2, r0
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e0ad      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	335d      	adds	r3, #93	@ 0x5d
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d10a      	bne.n	800511e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	440b      	add	r3, r1
 8005116:	335c      	adds	r3, #92	@ 0x5c
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e097      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	440b      	add	r3, r1
 800512c:	335d      	adds	r3, #93	@ 0x5d
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b04      	cmp	r3, #4
 8005132:	d10a      	bne.n	800514a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	440b      	add	r3, r1
 8005142:	335c      	adds	r3, #92	@ 0x5c
 8005144:	2202      	movs	r2, #2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	e081      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	440b      	add	r3, r1
 8005158:	335d      	adds	r3, #93	@ 0x5d
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b05      	cmp	r3, #5
 800515e:	d10a      	bne.n	8005176 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	440b      	add	r3, r1
 800516e:	335c      	adds	r3, #92	@ 0x5c
 8005170:	2205      	movs	r2, #5
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e06b      	b.n	800524e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	335d      	adds	r3, #93	@ 0x5d
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b06      	cmp	r3, #6
 800518a:	d00a      	beq.n	80051a2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	440b      	add	r3, r1
 800519a:	335d      	adds	r3, #93	@ 0x5d
 800519c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d155      	bne.n	800524e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	3358      	adds	r3, #88	@ 0x58
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4403      	add	r3, r0
 80051c4:	3358      	adds	r3, #88	@ 0x58
 80051c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	3358      	adds	r3, #88	@ 0x58
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d914      	bls.n	8005208 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	3358      	adds	r3, #88	@ 0x58
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	440b      	add	r3, r1
 8005200:	335c      	adds	r3, #92	@ 0x5c
 8005202:	2204      	movs	r2, #4
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e009      	b.n	800521c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	440b      	add	r3, r1
 8005216:	335c      	adds	r3, #92	@ 0x5c
 8005218:	2202      	movs	r2, #2
 800521a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005232:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800523a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005248:	461a      	mov	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800525a:	461a      	mov	r2, r3
 800525c:	2302      	movs	r3, #2
 800525e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	b2d8      	uxtb	r0, r3
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	440b      	add	r3, r1
 8005272:	335c      	adds	r3, #92	@ 0x5c
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4601      	mov	r1, r0
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f00a faf2 	bl	800f864 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	@ 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	0c5b      	lsrs	r3, r3, #17
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d004      	beq.n	80052ce <HCD_RXQLVL_IRQHandler+0x46>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	f000 8082 	beq.w	80053d0 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80052cc:	e083      	b.n	80053d6 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d07f      	beq.n	80053d4 <HCD_RXQLVL_IRQHandler+0x14c>
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3344      	adds	r3, #68	@ 0x44
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d074      	beq.n	80053d4 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	3344      	adds	r3, #68	@ 0x44
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	b292      	uxth	r2, r2
 8005304:	4619      	mov	r1, r3
 8005306:	f003 f8b6 	bl	8008476 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	3344      	adds	r3, #68	@ 0x44
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	18d1      	adds	r1, r2, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4403      	add	r3, r0
 800532e:	3344      	adds	r3, #68	@ 0x44
 8005330:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	440b      	add	r3, r1
 8005340:	334c      	adds	r3, #76	@ 0x4c
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	18d1      	adds	r1, r2, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4403      	add	r3, r0
 8005356:	334c      	adds	r3, #76	@ 0x4c
 8005358:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <HCD_RXQLVL_IRQHandler+0x158>)
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d031      	beq.n	80053d4 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005386:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800538e:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800539c:	461a      	mov	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	440b      	add	r3, r1
 80053b0:	3350      	adds	r3, #80	@ 0x50
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f083 0301 	eor.w	r3, r3, #1
 80053b8:	b2d8      	uxtb	r0, r3
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	440b      	add	r3, r1
 80053c8:	3350      	adds	r3, #80	@ 0x50
 80053ca:	4602      	mov	r2, r0
 80053cc:	701a      	strb	r2, [r3, #0]
      break;
 80053ce:	e001      	b.n	80053d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80053d4:	bf00      	nop
  }
}
 80053d6:	bf00      	nop
 80053d8:	3728      	adds	r7, #40	@ 0x28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	1ff80000 	.word	0x1ff80000

080053e4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005410:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b02      	cmp	r3, #2
 800541a:	d10b      	bne.n	8005434 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b01      	cmp	r3, #1
 8005424:	d102      	bne.n	800542c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f00a fa00 	bl	800f82c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f043 0302 	orr.w	r3, r3, #2
 8005432:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b08      	cmp	r3, #8
 800543c:	d132      	bne.n	80054a4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f043 0308 	orr.w	r3, r3, #8
 8005444:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d126      	bne.n	800549e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d113      	bne.n	8005480 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800545e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005462:	d106      	bne.n	8005472 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2102      	movs	r1, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f003 f93e 	bl	80086ec <USB_InitFSLSPClkSel>
 8005470:	e011      	b.n	8005496 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2101      	movs	r1, #1
 8005478:	4618      	mov	r0, r3
 800547a:	f003 f937 	bl	80086ec <USB_InitFSLSPClkSel>
 800547e:	e00a      	b.n	8005496 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d106      	bne.n	8005496 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800548e:	461a      	mov	r2, r3
 8005490:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005494:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f00a f9f2 	bl	800f880 <HAL_HCD_PortEnabled_Callback>
 800549c:	e002      	b.n	80054a4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f00a f9fc 	bl	800f89c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d103      	bne.n	80054b6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f043 0320 	orr.w	r3, r3, #32
 80054b4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054bc:	461a      	mov	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6013      	str	r3, [r2, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e12b      	b.n	8005736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc fa54 	bl	80019a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	@ 0x24
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800551e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800552e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005530:	f002 fcd0 	bl	8007ed4 <HAL_RCC_GetPCLK1Freq>
 8005534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4a81      	ldr	r2, [pc, #516]	@ (8005740 <HAL_I2C_Init+0x274>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d807      	bhi.n	8005550 <HAL_I2C_Init+0x84>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a80      	ldr	r2, [pc, #512]	@ (8005744 <HAL_I2C_Init+0x278>)
 8005544:	4293      	cmp	r3, r2
 8005546:	bf94      	ite	ls
 8005548:	2301      	movls	r3, #1
 800554a:	2300      	movhi	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e006      	b.n	800555e <HAL_I2C_Init+0x92>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a7d      	ldr	r2, [pc, #500]	@ (8005748 <HAL_I2C_Init+0x27c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	bf94      	ite	ls
 8005558:	2301      	movls	r3, #1
 800555a:	2300      	movhi	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0e7      	b.n	8005736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a78      	ldr	r2, [pc, #480]	@ (800574c <HAL_I2C_Init+0x280>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	0c9b      	lsrs	r3, r3, #18
 8005570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a6a      	ldr	r2, [pc, #424]	@ (8005740 <HAL_I2C_Init+0x274>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d802      	bhi.n	80055a0 <HAL_I2C_Init+0xd4>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	3301      	adds	r3, #1
 800559e:	e009      	b.n	80055b4 <HAL_I2C_Init+0xe8>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055a6:	fb02 f303 	mul.w	r3, r2, r3
 80055aa:	4a69      	ldr	r2, [pc, #420]	@ (8005750 <HAL_I2C_Init+0x284>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	099b      	lsrs	r3, r3, #6
 80055b2:	3301      	adds	r3, #1
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	430b      	orrs	r3, r1
 80055ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	495c      	ldr	r1, [pc, #368]	@ (8005740 <HAL_I2C_Init+0x274>)
 80055d0:	428b      	cmp	r3, r1
 80055d2:	d819      	bhi.n	8005608 <HAL_I2C_Init+0x13c>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1e59      	subs	r1, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fbb1 f3f3 	udiv	r3, r1, r3
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055e8:	400b      	ands	r3, r1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_I2C_Init+0x138>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1e59      	subs	r1, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055fc:	3301      	adds	r3, #1
 80055fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005602:	e051      	b.n	80056a8 <HAL_I2C_Init+0x1dc>
 8005604:	2304      	movs	r3, #4
 8005606:	e04f      	b.n	80056a8 <HAL_I2C_Init+0x1dc>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d111      	bne.n	8005634 <HAL_I2C_Init+0x168>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1e58      	subs	r0, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	440b      	add	r3, r1
 800561e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005622:	3301      	adds	r3, #1
 8005624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005628:	2b00      	cmp	r3, #0
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e012      	b.n	800565a <HAL_I2C_Init+0x18e>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e58      	subs	r0, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	0099      	lsls	r1, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	fbb0 f3f3 	udiv	r3, r0, r3
 800564a:	3301      	adds	r3, #1
 800564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_I2C_Init+0x196>
 800565e:	2301      	movs	r3, #1
 8005660:	e022      	b.n	80056a8 <HAL_I2C_Init+0x1dc>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10e      	bne.n	8005688 <HAL_I2C_Init+0x1bc>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1e58      	subs	r0, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	440b      	add	r3, r1
 8005678:	fbb0 f3f3 	udiv	r3, r0, r3
 800567c:	3301      	adds	r3, #1
 800567e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005686:	e00f      	b.n	80056a8 <HAL_I2C_Init+0x1dc>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	1e58      	subs	r0, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	0099      	lsls	r1, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	fbb0 f3f3 	udiv	r3, r0, r3
 800569e:	3301      	adds	r3, #1
 80056a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	6809      	ldr	r1, [r1, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6911      	ldr	r1, [r2, #16]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68d2      	ldr	r2, [r2, #12]
 80056e2:	4311      	orrs	r1, r2
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	000186a0 	.word	0x000186a0
 8005744:	001e847f 	.word	0x001e847f
 8005748:	003d08ff 	.word	0x003d08ff
 800574c:	431bde83 	.word	0x431bde83
 8005750:	10624dd3 	.word	0x10624dd3

08005754 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e021      	b.n	80057aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2224      	movs	r2, #36	@ 0x24
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc f956 	bl	8001a30 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	461a      	mov	r2, r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	817b      	strh	r3, [r7, #10]
 80057c6:	460b      	mov	r3, r1
 80057c8:	813b      	strh	r3, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057ce:	f7fc fce1 	bl	8002194 <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b20      	cmp	r3, #32
 80057de:	f040 80d9 	bne.w	8005994 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2319      	movs	r3, #25
 80057e8:	2201      	movs	r2, #1
 80057ea:	496d      	ldr	r1, [pc, #436]	@ (80059a0 <HAL_I2C_Mem_Write+0x1ec>)
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fc8d 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0cc      	b.n	8005996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_I2C_Mem_Write+0x56>
 8005806:	2302      	movs	r3, #2
 8005808:	e0c5      	b.n	8005996 <HAL_I2C_Mem_Write+0x1e2>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b01      	cmp	r3, #1
 800581e:	d007      	beq.n	8005830 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800583e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2221      	movs	r2, #33	@ 0x21
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2240      	movs	r2, #64	@ 0x40
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a3a      	ldr	r2, [r7, #32]
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005860:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a4d      	ldr	r2, [pc, #308]	@ (80059a4 <HAL_I2C_Mem_Write+0x1f0>)
 8005870:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005872:	88f8      	ldrh	r0, [r7, #6]
 8005874:	893a      	ldrh	r2, [r7, #8]
 8005876:	8979      	ldrh	r1, [r7, #10]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	4603      	mov	r3, r0
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 fac4 	bl	8005e10 <I2C_RequestMemoryWrite>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d052      	beq.n	8005934 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e081      	b.n	8005996 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fd0e 	bl	80062b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d107      	bne.n	80058ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e06b      	b.n	8005996 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	781a      	ldrb	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d11b      	bne.n	8005934 <HAL_I2C_Mem_Write+0x180>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d017      	beq.n	8005934 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1aa      	bne.n	8005892 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fcfa 	bl	800633a <I2C_WaitOnBTFFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00d      	beq.n	8005968 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	2b04      	cmp	r3, #4
 8005952:	d107      	bne.n	8005964 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005962:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e016      	b.n	8005996 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	00100002 	.word	0x00100002
 80059a4:	ffff0000 	.word	0xffff0000

080059a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08c      	sub	sp, #48	@ 0x30
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	4608      	mov	r0, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	817b      	strh	r3, [r7, #10]
 80059ba:	460b      	mov	r3, r1
 80059bc:	813b      	strh	r3, [r7, #8]
 80059be:	4613      	mov	r3, r2
 80059c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059c2:	f7fc fbe7 	bl	8002194 <HAL_GetTick>
 80059c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	f040 8208 	bne.w	8005de6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	2319      	movs	r3, #25
 80059dc:	2201      	movs	r2, #1
 80059de:	497b      	ldr	r1, [pc, #492]	@ (8005bcc <HAL_I2C_Mem_Read+0x224>)
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fb93 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
 80059ee:	e1fb      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_I2C_Mem_Read+0x56>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e1f4      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d007      	beq.n	8005a24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2222      	movs	r2, #34	@ 0x22
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2240      	movs	r2, #64	@ 0x40
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a5b      	ldr	r2, [pc, #364]	@ (8005bd0 <HAL_I2C_Mem_Read+0x228>)
 8005a64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a66:	88f8      	ldrh	r0, [r7, #6]
 8005a68:	893a      	ldrh	r2, [r7, #8]
 8005a6a:	8979      	ldrh	r1, [r7, #10]
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4603      	mov	r3, r0
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fa60 	bl	8005f3c <I2C_RequestMemoryRead>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e1b0      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d113      	bne.n	8005ab6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e184      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d11b      	bne.n	8005af6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	61fb      	str	r3, [r7, #28]
 8005ae2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	e164      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d11b      	bne.n	8005b36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	e144      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b4c:	e138      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	f200 80f1 	bhi.w	8005d3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d123      	bne.n	8005ba8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fc29 	bl	80063bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e139      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ba6:	e10b      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d14e      	bne.n	8005c4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4906      	ldr	r1, [pc, #24]	@ (8005bd4 <HAL_I2C_Mem_Read+0x22c>)
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 faa6 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d008      	beq.n	8005bd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e10e      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
 8005bca:	bf00      	nop
 8005bcc:	00100002 	.word	0x00100002
 8005bd0:	ffff0000 	.word	0xffff0000
 8005bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c4c:	e0b8      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	2200      	movs	r2, #0
 8005c56:	4966      	ldr	r1, [pc, #408]	@ (8005df0 <HAL_I2C_Mem_Read+0x448>)
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fa57 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0bf      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	494f      	ldr	r1, [pc, #316]	@ (8005df0 <HAL_I2C_Mem_Read+0x448>)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fa29 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e091      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d38:	e042      	b.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fb3c 	bl	80063bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e04c      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d118      	bne.n	8005dc0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f aec2 	bne.w	8005b4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e000      	b.n	8005de8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005de6:	2302      	movs	r3, #2
  }
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3728      	adds	r7, #40	@ 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	00010004 	.word	0x00010004

08005df4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e02:	b2db      	uxtb	r3, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	817b      	strh	r3, [r7, #10]
 8005e22:	460b      	mov	r3, r1
 8005e24:	813b      	strh	r3, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f960 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e60:	d103      	bne.n	8005e6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e05f      	b.n	8005f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e6e:	897b      	ldrh	r3, [r7, #10]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	492d      	ldr	r1, [pc, #180]	@ (8005f38 <I2C_RequestMemoryWrite+0x128>)
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f998 	bl	80061ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e04c      	b.n	8005f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eac:	6a39      	ldr	r1, [r7, #32]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fa02 	bl	80062b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00d      	beq.n	8005ed6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d107      	bne.n	8005ed2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e02b      	b.n	8005f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d105      	bne.n	8005ee8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005edc:	893b      	ldrh	r3, [r7, #8]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	611a      	str	r2, [r3, #16]
 8005ee6:	e021      	b.n	8005f2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ee8:	893b      	ldrh	r3, [r7, #8]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef8:	6a39      	ldr	r1, [r7, #32]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f9dc 	bl	80062b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00d      	beq.n	8005f22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d107      	bne.n	8005f1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e005      	b.n	8005f2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f22:	893b      	ldrh	r3, [r7, #8]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	00010002 	.word	0x00010002

08005f3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	817b      	strh	r3, [r7, #10]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	813b      	strh	r3, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f8c2 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9c:	d103      	bne.n	8005fa6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e0aa      	b.n	8006100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005faa:	897b      	ldrh	r3, [r7, #10]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	6a3a      	ldr	r2, [r7, #32]
 8005fbe:	4952      	ldr	r1, [pc, #328]	@ (8006108 <I2C_RequestMemoryRead+0x1cc>)
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f8fa 	bl	80061ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e097      	b.n	8006100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe8:	6a39      	ldr	r1, [r7, #32]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f964 	bl	80062b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d107      	bne.n	800600e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e076      	b.n	8006100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d105      	bne.n	8006024 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006018:	893b      	ldrh	r3, [r7, #8]
 800601a:	b2da      	uxtb	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	611a      	str	r2, [r3, #16]
 8006022:	e021      	b.n	8006068 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006024:	893b      	ldrh	r3, [r7, #8]
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	b29b      	uxth	r3, r3
 800602a:	b2da      	uxtb	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006034:	6a39      	ldr	r1, [r7, #32]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f93e 	bl	80062b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00d      	beq.n	800605e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	2b04      	cmp	r3, #4
 8006048:	d107      	bne.n	800605a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e050      	b.n	8006100 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800605e:	893b      	ldrh	r3, [r7, #8]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800606a:	6a39      	ldr	r1, [r7, #32]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f923 	bl	80062b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00d      	beq.n	8006094 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	2b04      	cmp	r3, #4
 800607e:	d107      	bne.n	8006090 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e035      	b.n	8006100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f82b 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ca:	d103      	bne.n	80060d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e013      	b.n	8006100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060d8:	897b      	ldrh	r3, [r7, #10]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	4906      	ldr	r1, [pc, #24]	@ (8006108 <I2C_RequestMemoryRead+0x1cc>)
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f863 	bl	80061ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	00010002 	.word	0x00010002

0800610c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800611c:	e025      	b.n	800616a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d021      	beq.n	800616a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006126:	f7fc f835 	bl	8002194 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d116      	bne.n	800616a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f043 0220 	orr.w	r2, r3, #32
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e023      	b.n	80061b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d10d      	bne.n	8006190 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	43da      	mvns	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	e00c      	b.n	80061aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	43da      	mvns	r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4013      	ands	r3, r2
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bf0c      	ite	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	2300      	movne	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d0b6      	beq.n	800611e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061c8:	e051      	b.n	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d8:	d123      	bne.n	8006222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	f043 0204 	orr.w	r2, r3, #4
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e046      	b.n	80062b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d021      	beq.n	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622a:	f7fb ffb3 	bl	8002194 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d302      	bcc.n	8006240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d116      	bne.n	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	f043 0220 	orr.w	r2, r3, #32
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e020      	b.n	80062b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d10c      	bne.n	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	43da      	mvns	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e00b      	b.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	43da      	mvns	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4013      	ands	r3, r2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d18d      	bne.n	80061ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062c4:	e02d      	b.n	8006322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f8ce 	bl	8006468 <I2C_IsAcknowledgeFailed>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e02d      	b.n	8006332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d021      	beq.n	8006322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fb ff59 	bl	8002194 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d302      	bcc.n	80062f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d116      	bne.n	8006322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e007      	b.n	8006332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632c:	2b80      	cmp	r3, #128	@ 0x80
 800632e:	d1ca      	bne.n	80062c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006346:	e02d      	b.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f88d 	bl	8006468 <I2C_IsAcknowledgeFailed>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e02d      	b.n	80063b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d021      	beq.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006360:	f7fb ff18 	bl	8002194 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	429a      	cmp	r2, r3
 800636e:	d302      	bcc.n	8006376 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d116      	bne.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006390:	f043 0220 	orr.w	r2, r3, #32
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e007      	b.n	80063b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d1ca      	bne.n	8006348 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063c8:	e042      	b.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d119      	bne.n	800640c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0210 	mvn.w	r2, #16
 80063e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e029      	b.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640c:	f7fb fec2 	bl	8002194 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d116      	bne.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e007      	b.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645a:	2b40      	cmp	r3, #64	@ 0x40
 800645c:	d1b5      	bne.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647e:	d11b      	bne.n	80064b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a4:	f043 0204 	orr.w	r2, r3, #4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e128      	b.n	800672c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a90      	ldr	r2, [pc, #576]	@ (8006734 <HAL_I2S_Init+0x26c>)
 80064f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fb fabd 	bl	8001a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2202      	movs	r2, #2
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006510:	f023 030f 	bic.w	r3, r3, #15
 8006514:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2202      	movs	r2, #2
 800651c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d060      	beq.n	80065e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800652e:	2310      	movs	r3, #16
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e001      	b.n	8006538 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006534:	2320      	movs	r3, #32
 8006536:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b20      	cmp	r3, #32
 800653e:	d802      	bhi.n	8006546 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006546:	2001      	movs	r0, #1
 8006548:	f001 fe0a 	bl	8008160 <HAL_RCCEx_GetPeriphCLKFreq>
 800654c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006556:	d125      	bne.n	80065a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d010      	beq.n	8006582 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	fbb2 f2f3 	udiv	r2, r2, r3
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	fbb2 f3f3 	udiv	r3, r2, r3
 800657c:	3305      	adds	r3, #5
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	e01f      	b.n	80065c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	fbb2 f2f3 	udiv	r2, r2, r3
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	3305      	adds	r3, #5
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e00e      	b.n	80065c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	461a      	mov	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80065be:	3305      	adds	r3, #5
 80065c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4a5c      	ldr	r2, [pc, #368]	@ (8006738 <HAL_I2S_Init+0x270>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	08db      	lsrs	r3, r3, #3
 80065cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	085b      	lsrs	r3, r3, #1
 80065de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	e003      	b.n	80065f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80065e8:	2302      	movs	r3, #2
 80065ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d902      	bls.n	80065fc <HAL_I2S_Init+0x134>
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2bff      	cmp	r3, #255	@ 0xff
 80065fa:	d907      	bls.n	800660c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006600:	f043 0210 	orr.w	r2, r3, #16
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e08f      	b.n	800672c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	ea42 0103 	orr.w	r1, r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	430a      	orrs	r2, r1
 800661e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800662a:	f023 030f 	bic.w	r3, r3, #15
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6851      	ldr	r1, [r2, #4]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6892      	ldr	r2, [r2, #8]
 8006636:	4311      	orrs	r1, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	68d2      	ldr	r2, [r2, #12]
 800663c:	4311      	orrs	r1, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6992      	ldr	r2, [r2, #24]
 8006642:	430a      	orrs	r2, r1
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800664e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d161      	bne.n	800671c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a38      	ldr	r2, [pc, #224]	@ (800673c <HAL_I2S_Init+0x274>)
 800665c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a37      	ldr	r2, [pc, #220]	@ (8006740 <HAL_I2S_Init+0x278>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_I2S_Init+0x1a4>
 8006668:	4b36      	ldr	r3, [pc, #216]	@ (8006744 <HAL_I2S_Init+0x27c>)
 800666a:	e001      	b.n	8006670 <HAL_I2S_Init+0x1a8>
 800666c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	4932      	ldr	r1, [pc, #200]	@ (8006740 <HAL_I2S_Init+0x278>)
 8006678:	428a      	cmp	r2, r1
 800667a:	d101      	bne.n	8006680 <HAL_I2S_Init+0x1b8>
 800667c:	4a31      	ldr	r2, [pc, #196]	@ (8006744 <HAL_I2S_Init+0x27c>)
 800667e:	e001      	b.n	8006684 <HAL_I2S_Init+0x1bc>
 8006680:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006684:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006688:	f023 030f 	bic.w	r3, r3, #15
 800668c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2b      	ldr	r2, [pc, #172]	@ (8006740 <HAL_I2S_Init+0x278>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d101      	bne.n	800669c <HAL_I2S_Init+0x1d4>
 8006698:	4b2a      	ldr	r3, [pc, #168]	@ (8006744 <HAL_I2S_Init+0x27c>)
 800669a:	e001      	b.n	80066a0 <HAL_I2S_Init+0x1d8>
 800669c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066a0:	2202      	movs	r2, #2
 80066a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a25      	ldr	r2, [pc, #148]	@ (8006740 <HAL_I2S_Init+0x278>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d101      	bne.n	80066b2 <HAL_I2S_Init+0x1ea>
 80066ae:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <HAL_I2S_Init+0x27c>)
 80066b0:	e001      	b.n	80066b6 <HAL_I2S_Init+0x1ee>
 80066b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c2:	d003      	beq.n	80066cc <HAL_I2S_Init+0x204>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80066cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	e001      	b.n	80066d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	b299      	uxth	r1, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80066ee:	4303      	orrs	r3, r0
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	430b      	orrs	r3, r1
 80066f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80066f6:	4313      	orrs	r3, r2
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	897b      	ldrh	r3, [r7, #10]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006704:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a0d      	ldr	r2, [pc, #52]	@ (8006740 <HAL_I2S_Init+0x278>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d101      	bne.n	8006714 <HAL_I2S_Init+0x24c>
 8006710:	4b0c      	ldr	r3, [pc, #48]	@ (8006744 <HAL_I2S_Init+0x27c>)
 8006712:	e001      	b.n	8006718 <HAL_I2S_Init+0x250>
 8006714:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006718:	897a      	ldrh	r2, [r7, #10]
 800671a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	08006fcd 	.word	0x08006fcd
 8006738:	cccccccd 	.word	0xcccccccd
 800673c:	08007155 	.word	0x08007155
 8006740:	40003800 	.word	0x40003800
 8006744:	40003400 	.word	0x40003400

08006748 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_I2S_Transmit_DMA+0x1a>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e08e      	b.n	8006884 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_I2S_Transmit_DMA+0x2e>
 8006772:	2302      	movs	r3, #2
 8006774:	e086      	b.n	8006884 <HAL_I2S_Transmit_DMA+0x13c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	d005      	beq.n	8006796 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
 8006794:	e076      	b.n	8006884 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2203      	movs	r2, #3
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d002      	beq.n	80067c2 <HAL_I2S_Transmit_DMA+0x7a>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d10a      	bne.n	80067d8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067d6:	e005      	b.n	80067e4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	88fa      	ldrh	r2, [r7, #6]
 80067dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	88fa      	ldrh	r2, [r7, #6]
 80067e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e8:	4a28      	ldr	r2, [pc, #160]	@ (800688c <HAL_I2S_Transmit_DMA+0x144>)
 80067ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	4a27      	ldr	r2, [pc, #156]	@ (8006890 <HAL_I2S_Transmit_DMA+0x148>)
 80067f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f8:	4a26      	ldr	r2, [pc, #152]	@ (8006894 <HAL_I2S_Transmit_DMA+0x14c>)
 80067fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006804:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800680c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006812:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006814:	f7fc fb9a 	bl	8002f4c <HAL_DMA_Start_IT>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00f      	beq.n	800683e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f043 0208 	orr.w	r2, r3, #8
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e022      	b.n	8006884 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006848:	2b00      	cmp	r3, #0
 800684a:	d107      	bne.n	800685c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69da      	ldr	r2, [r3, #28]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800685a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0202 	orr.w	r2, r2, #2
 8006878:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	08006eab 	.word	0x08006eab
 8006890:	08006e69 	.word	0x08006e69
 8006894:	08006ec7 	.word	0x08006ec7

08006898 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_I2S_DMAPause+0x18>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e04a      	b.n	8006946 <HAL_I2S_DMAPause+0xae>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d108      	bne.n	80068d6 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0202 	bic.w	r2, r2, #2
 80068d2:	605a      	str	r2, [r3, #4]
 80068d4:	e032      	b.n	800693c <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d108      	bne.n	80068f4 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	e023      	b.n	800693c <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b05      	cmp	r3, #5
 80068fe:	d11d      	bne.n	800693c <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0203 	bic.w	r2, r2, #3
 800690e:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a0f      	ldr	r2, [pc, #60]	@ (8006954 <HAL_I2S_DMAPause+0xbc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d101      	bne.n	800691e <HAL_I2S_DMAPause+0x86>
 800691a:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <HAL_I2S_DMAPause+0xc0>)
 800691c:	e001      	b.n	8006922 <HAL_I2S_DMAPause+0x8a>
 800691e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	490a      	ldr	r1, [pc, #40]	@ (8006954 <HAL_I2S_DMAPause+0xbc>)
 800692a:	428b      	cmp	r3, r1
 800692c:	d101      	bne.n	8006932 <HAL_I2S_DMAPause+0x9a>
 800692e:	4b0a      	ldr	r3, [pc, #40]	@ (8006958 <HAL_I2S_DMAPause+0xc0>)
 8006930:	e001      	b.n	8006936 <HAL_I2S_DMAPause+0x9e>
 8006932:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006936:	f022 0203 	bic.w	r2, r2, #3
 800693a:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40003800 	.word	0x40003800
 8006958:	40003400 	.word	0x40003400

0800695c <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_I2S_DMAResume+0x18>
 8006970:	2302      	movs	r3, #2
 8006972:	e07d      	b.n	8006a70 <HAL_I2S_DMAResume+0x114>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b03      	cmp	r3, #3
 8006986:	d108      	bne.n	800699a <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0202 	orr.w	r2, r2, #2
 8006996:	605a      	str	r2, [r3, #4]
 8006998:	e056      	b.n	8006a48 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d108      	bne.n	80069b8 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0201 	orr.w	r2, r2, #1
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	e047      	b.n	8006a48 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b05      	cmp	r3, #5
 80069c2:	d141      	bne.n	8006a48 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0203 	orr.w	r2, r2, #3
 80069d2:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a28      	ldr	r2, [pc, #160]	@ (8006a7c <HAL_I2S_DMAResume+0x120>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d101      	bne.n	80069e2 <HAL_I2S_DMAResume+0x86>
 80069de:	4b28      	ldr	r3, [pc, #160]	@ (8006a80 <HAL_I2S_DMAResume+0x124>)
 80069e0:	e001      	b.n	80069e6 <HAL_I2S_DMAResume+0x8a>
 80069e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4923      	ldr	r1, [pc, #140]	@ (8006a7c <HAL_I2S_DMAResume+0x120>)
 80069ee:	428b      	cmp	r3, r1
 80069f0:	d101      	bne.n	80069f6 <HAL_I2S_DMAResume+0x9a>
 80069f2:	4b23      	ldr	r3, [pc, #140]	@ (8006a80 <HAL_I2S_DMAResume+0x124>)
 80069f4:	e001      	b.n	80069fa <HAL_I2S_DMAResume+0x9e>
 80069f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069fa:	f042 0203 	orr.w	r2, r2, #3
 80069fe:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	@ (8006a7c <HAL_I2S_DMAResume+0x120>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d101      	bne.n	8006a0e <HAL_I2S_DMAResume+0xb2>
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006a80 <HAL_I2S_DMAResume+0x124>)
 8006a0c:	e001      	b.n	8006a12 <HAL_I2S_DMAResume+0xb6>
 8006a0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d115      	bne.n	8006a48 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <HAL_I2S_DMAResume+0x120>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <HAL_I2S_DMAResume+0xce>
 8006a26:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <HAL_I2S_DMAResume+0x124>)
 8006a28:	e001      	b.n	8006a2e <HAL_I2S_DMAResume+0xd2>
 8006a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4911      	ldr	r1, [pc, #68]	@ (8006a7c <HAL_I2S_DMAResume+0x120>)
 8006a36:	428b      	cmp	r3, r1
 8006a38:	d101      	bne.n	8006a3e <HAL_I2S_DMAResume+0xe2>
 8006a3a:	4b11      	ldr	r3, [pc, #68]	@ (8006a80 <HAL_I2S_DMAResume+0x124>)
 8006a3c:	e001      	b.n	8006a42 <HAL_I2S_DMAResume+0xe6>
 8006a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a46:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d107      	bne.n	8006a66 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a64:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40003800 	.word	0x40003800
 8006a80:	40003400 	.word	0x40003400

08006a84 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a98:	d004      	beq.n	8006aa4 <HAL_I2S_DMAStop+0x20>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 80d1 	bne.w	8006c46 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00f      	beq.n	8006acc <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fc faa3 	bl	8002ffc <HAL_DMA_Abort>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac0:	f043 0208 	orr.w	r2, r3, #8
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006acc:	2364      	movs	r3, #100	@ 0x64
 8006ace:	2201      	movs	r2, #1
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fb04 	bl	80070e0 <I2S_WaitFlagStateUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006af6:	2364      	movs	r3, #100	@ 0x64
 8006af8:	2200      	movs	r2, #0
 8006afa:	2180      	movs	r1, #128	@ 0x80
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 faef 	bl	80070e0 <I2S_WaitFlagStateUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0c:	f043 0201 	orr.w	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69da      	ldr	r2, [r3, #28]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b2e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0202 	bic.w	r2, r2, #2
 8006b4c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b05      	cmp	r3, #5
 8006b58:	f040 8165 	bne.w	8006e26 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00f      	beq.n	8006b84 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fc fa47 	bl	8002ffc <HAL_DMA_Abort>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b78:	f043 0208 	orr.w	r2, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a8a      	ldr	r2, [pc, #552]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d101      	bne.n	8006b92 <HAL_I2S_DMAStop+0x10e>
 8006b8e:	4b8a      	ldr	r3, [pc, #552]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006b90:	e001      	b.n	8006b96 <HAL_I2S_DMAStop+0x112>
 8006b92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4985      	ldr	r1, [pc, #532]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006b9e:	428b      	cmp	r3, r1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_I2S_DMAStop+0x122>
 8006ba2:	4b85      	ldr	r3, [pc, #532]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006ba4:	e001      	b.n	8006baa <HAL_I2S_DMAStop+0x126>
 8006ba6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bae:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a7e      	ldr	r2, [pc, #504]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <HAL_I2S_DMAStop+0x13e>
 8006bbe:	4b7e      	ldr	r3, [pc, #504]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006bc0:	e001      	b.n	8006bc6 <HAL_I2S_DMAStop+0x142>
 8006bc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a79      	ldr	r2, [pc, #484]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d101      	bne.n	8006bd8 <HAL_I2S_DMAStop+0x154>
 8006bd4:	4b78      	ldr	r3, [pc, #480]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006bd6:	e001      	b.n	8006bdc <HAL_I2S_DMAStop+0x158>
 8006bd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a73      	ldr	r2, [pc, #460]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d101      	bne.n	8006bf0 <HAL_I2S_DMAStop+0x16c>
 8006bec:	4b72      	ldr	r3, [pc, #456]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006bee:	e001      	b.n	8006bf4 <HAL_I2S_DMAStop+0x170>
 8006bf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	496e      	ldr	r1, [pc, #440]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006bfc:	428b      	cmp	r3, r1
 8006bfe:	d101      	bne.n	8006c04 <HAL_I2S_DMAStop+0x180>
 8006c00:	4b6d      	ldr	r3, [pc, #436]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006c02:	e001      	b.n	8006c08 <HAL_I2S_DMAStop+0x184>
 8006c04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c08:	f022 0201 	bic.w	r2, r2, #1
 8006c0c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10c      	bne.n	8006c30 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006c2e:	e0fa      	b.n	8006e26 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a5f      	ldr	r2, [pc, #380]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d101      	bne.n	8006c3e <HAL_I2S_DMAStop+0x1ba>
 8006c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006c3c:	e001      	b.n	8006c42 <HAL_I2S_DMAStop+0x1be>
 8006c3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c42:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006c44:	e0ef      	b.n	8006e26 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c4e:	d005      	beq.n	8006c5c <HAL_I2S_DMAStop+0x1d8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c58:	f040 80e5 	bne.w	8006e26 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00f      	beq.n	8006c84 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fc f9c7 	bl	8002ffc <HAL_DMA_Abort>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c78:	f043 0208 	orr.w	r2, r3, #8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b05      	cmp	r3, #5
 8006c8e:	f040 809a 	bne.w	8006dc6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00f      	beq.n	8006cba <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fc f9ac 	bl	8002ffc <HAL_DMA_Abort>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006cba:	f7fb fa6b 	bl	8002194 <HAL_GetTick>
 8006cbe:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006cc0:	e012      	b.n	8006ce8 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006cc2:	f7fb fa67 	bl	8002194 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b64      	cmp	r3, #100	@ 0x64
 8006cce:	d90b      	bls.n	8006ce8 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd4:	f043 0201 	orr.w	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a31      	ldr	r2, [pc, #196]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <HAL_I2S_DMAStop+0x272>
 8006cf2:	4b31      	ldr	r3, [pc, #196]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006cf4:	e001      	b.n	8006cfa <HAL_I2S_DMAStop+0x276>
 8006cf6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d1de      	bne.n	8006cc2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006d04:	e012      	b.n	8006d2c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006d06:	f7fb fa45 	bl	8002194 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b64      	cmp	r3, #100	@ 0x64
 8006d12:	d90b      	bls.n	8006d2c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d18:	f043 0201 	orr.w	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <HAL_I2S_DMAStop+0x2b6>
 8006d36:	4b20      	ldr	r3, [pc, #128]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006d38:	e001      	b.n	8006d3e <HAL_I2S_DMAStop+0x2ba>
 8006d3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d44:	2b80      	cmp	r3, #128	@ 0x80
 8006d46:	d0de      	beq.n	8006d06 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a19      	ldr	r2, [pc, #100]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d101      	bne.n	8006d56 <HAL_I2S_DMAStop+0x2d2>
 8006d52:	4b19      	ldr	r3, [pc, #100]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006d54:	e001      	b.n	8006d5a <HAL_I2S_DMAStop+0x2d6>
 8006d56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4914      	ldr	r1, [pc, #80]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006d62:	428b      	cmp	r3, r1
 8006d64:	d101      	bne.n	8006d6a <HAL_I2S_DMAStop+0x2e6>
 8006d66:	4b14      	ldr	r3, [pc, #80]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006d68:	e001      	b.n	8006d6e <HAL_I2S_DMAStop+0x2ea>
 8006d6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d72:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d101      	bne.n	8006d86 <HAL_I2S_DMAStop+0x302>
 8006d82:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006d84:	e001      	b.n	8006d8a <HAL_I2S_DMAStop+0x306>
 8006d86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a07      	ldr	r2, [pc, #28]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d101      	bne.n	8006d9e <HAL_I2S_DMAStop+0x31a>
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006d9c:	e001      	b.n	8006da2 <HAL_I2S_DMAStop+0x31e>
 8006d9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4902      	ldr	r1, [pc, #8]	@ (8006db4 <HAL_I2S_DMAStop+0x330>)
 8006daa:	428b      	cmp	r3, r1
 8006dac:	d106      	bne.n	8006dbc <HAL_I2S_DMAStop+0x338>
 8006dae:	4b02      	ldr	r3, [pc, #8]	@ (8006db8 <HAL_I2S_DMAStop+0x334>)
 8006db0:	e006      	b.n	8006dc0 <HAL_I2S_DMAStop+0x33c>
 8006db2:	bf00      	nop
 8006db4:	40003800 	.word	0x40003800
 8006db8:	40003400 	.word	0x40003400
 8006dbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dc0:	f022 0202 	bic.w	r2, r2, #2
 8006dc4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dd4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e04:	d10c      	bne.n	8006e20 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e002      	b.n	8006e26 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8006e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e5a:	b2db      	uxtb	r3, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e74:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10e      	bne.n	8006e9c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0202 	bic.w	r2, r2, #2
 8006e8c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7f9 fbf7 	bl	8000690 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7f9 fbfb 	bl	80006b4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0203 	bic.w	r2, r2, #3
 8006ee2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efc:	f043 0208 	orr.w	r2, r3, #8
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7f9 fd45 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	881a      	ldrh	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10e      	bne.n	8006f66 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7f9 fb95 	bl	8000690 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	b292      	uxth	r2, r2
 8006f82:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	1c9a      	adds	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10e      	bne.n	8006fc4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006fb4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ff3a 	bl	8006e38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d13a      	bne.n	800705e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d109      	bne.n	8007006 <I2S_IRQHandler+0x3a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	d102      	bne.n	8007006 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ffb4 	bl	8006f6e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700c:	2b40      	cmp	r3, #64	@ 0x40
 800700e:	d126      	bne.n	800705e <I2S_IRQHandler+0x92>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b20      	cmp	r3, #32
 800701c:	d11f      	bne.n	800705e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800702c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800702e:	2300      	movs	r3, #0
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007050:	f043 0202 	orr.w	r2, r3, #2
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7f9 fc9b 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b03      	cmp	r3, #3
 8007068:	d136      	bne.n	80070d8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d109      	bne.n	8007088 <I2S_IRQHandler+0xbc>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707e:	2b80      	cmp	r3, #128	@ 0x80
 8007080:	d102      	bne.n	8007088 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff45 	bl	8006f12 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b08      	cmp	r3, #8
 8007090:	d122      	bne.n	80070d8 <I2S_IRQHandler+0x10c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b20      	cmp	r3, #32
 800709e:	d11b      	bne.n	80070d8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80070ae:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ca:	f043 0204 	orr.w	r2, r3, #4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7f9 fc5e 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070d8:	bf00      	nop
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80070f0:	f7fb f850 	bl	8002194 <HAL_GetTick>
 80070f4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80070f6:	e018      	b.n	800712a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d014      	beq.n	800712a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007100:	f7fb f848 	bl	8002194 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d902      	bls.n	8007116 <I2S_WaitFlagStateUntilTimeout+0x36>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e00f      	b.n	800714a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4013      	ands	r3, r2
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	429a      	cmp	r2, r3
 8007138:	bf0c      	ite	eq
 800713a:	2301      	moveq	r3, #1
 800713c:	2300      	movne	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	429a      	cmp	r2, r3
 8007146:	d1d7      	bne.n	80070f8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a92      	ldr	r2, [pc, #584]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d101      	bne.n	8007172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800716e:	4b92      	ldr	r3, [pc, #584]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007170:	e001      	b.n	8007176 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a8b      	ldr	r2, [pc, #556]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d101      	bne.n	8007190 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800718c:	4b8a      	ldr	r3, [pc, #552]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800718e:	e001      	b.n	8007194 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a0:	d004      	beq.n	80071ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 8099 	bne.w	80072de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d107      	bne.n	80071c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f925 	bl	8007410 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d107      	bne.n	80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9c8 	bl	8007570 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e6:	2b40      	cmp	r3, #64	@ 0x40
 80071e8:	d13a      	bne.n	8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d035      	beq.n	8007260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a6e      	ldr	r2, [pc, #440]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80071fe:	4b6e      	ldr	r3, [pc, #440]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007200:	e001      	b.n	8007206 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007202:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4969      	ldr	r1, [pc, #420]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800720e:	428b      	cmp	r3, r1
 8007210:	d101      	bne.n	8007216 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007212:	4b69      	ldr	r3, [pc, #420]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007214:	e001      	b.n	800721a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007216:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800721a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800721e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800722e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007252:	f043 0202 	orr.w	r2, r3, #2
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7f9 fb9a 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b08      	cmp	r3, #8
 8007268:	f040 80c3 	bne.w	80073f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80bd 	beq.w	80073f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007286:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a49      	ldr	r2, [pc, #292]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d101      	bne.n	8007296 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007292:	4b49      	ldr	r3, [pc, #292]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007294:	e001      	b.n	800729a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4944      	ldr	r1, [pc, #272]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072a2:	428b      	cmp	r3, r1
 80072a4:	d101      	bne.n	80072aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80072a6:	4b44      	ldr	r3, [pc, #272]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072a8:	e001      	b.n	80072ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80072aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80072b4:	2300      	movs	r3, #0
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]
 80072c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ce:	f043 0204 	orr.w	r2, r3, #4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7f9 fb5c 	bl	8000994 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072dc:	e089      	b.n	80073f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d107      	bne.n	80072f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f8be 	bl	8007474 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d107      	bne.n	8007312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f8fd 	bl	800750c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d12f      	bne.n	800737c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d02a      	beq.n	800737c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007334:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1e      	ldr	r2, [pc, #120]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d101      	bne.n	8007344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007340:	4b1d      	ldr	r3, [pc, #116]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007342:	e001      	b.n	8007348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4919      	ldr	r1, [pc, #100]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007350:	428b      	cmp	r3, r1
 8007352:	d101      	bne.n	8007358 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007354:	4b18      	ldr	r3, [pc, #96]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007356:	e001      	b.n	800735c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800735c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007360:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736e:	f043 0202 	orr.w	r2, r3, #2
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7f9 fb0c 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b08      	cmp	r3, #8
 8007384:	d136      	bne.n	80073f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d031      	beq.n	80073f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a07      	ldr	r2, [pc, #28]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d101      	bne.n	800739e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800739a:	4b07      	ldr	r3, [pc, #28]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800739c:	e001      	b.n	80073a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800739e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4902      	ldr	r1, [pc, #8]	@ (80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073aa:	428b      	cmp	r3, r1
 80073ac:	d106      	bne.n	80073bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80073ae:	4b02      	ldr	r3, [pc, #8]	@ (80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073b0:	e006      	b.n	80073c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80073b2:	bf00      	nop
 80073b4:	40003800 	.word	0x40003800
 80073b8:	40003400 	.word	0x40003400
 80073bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80073c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e2:	f043 0204 	orr.w	r2, r3, #4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7f9 fad2 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073f0:	e000      	b.n	80073f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80073f2:	bf00      	nop
}
 80073f4:	bf00      	nop
 80073f6:	3720      	adds	r7, #32
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741c:	1c99      	adds	r1, r3, #2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6251      	str	r1, [r2, #36]	@ 0x24
 8007422:	881a      	ldrh	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d113      	bne.n	800746a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007450:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff ffc9 	bl	80073fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	1c99      	adds	r1, r3, #2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6251      	str	r1, [r2, #36]	@ 0x24
 8007486:	8819      	ldrh	r1, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1d      	ldr	r2, [pc, #116]	@ (8007504 <I2SEx_TxISR_I2SExt+0x90>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d101      	bne.n	8007496 <I2SEx_TxISR_I2SExt+0x22>
 8007492:	4b1d      	ldr	r3, [pc, #116]	@ (8007508 <I2SEx_TxISR_I2SExt+0x94>)
 8007494:	e001      	b.n	800749a <I2SEx_TxISR_I2SExt+0x26>
 8007496:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800749a:	460a      	mov	r2, r1
 800749c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d121      	bne.n	80074fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a12      	ldr	r2, [pc, #72]	@ (8007504 <I2SEx_TxISR_I2SExt+0x90>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d101      	bne.n	80074c4 <I2SEx_TxISR_I2SExt+0x50>
 80074c0:	4b11      	ldr	r3, [pc, #68]	@ (8007508 <I2SEx_TxISR_I2SExt+0x94>)
 80074c2:	e001      	b.n	80074c8 <I2SEx_TxISR_I2SExt+0x54>
 80074c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	490d      	ldr	r1, [pc, #52]	@ (8007504 <I2SEx_TxISR_I2SExt+0x90>)
 80074d0:	428b      	cmp	r3, r1
 80074d2:	d101      	bne.n	80074d8 <I2SEx_TxISR_I2SExt+0x64>
 80074d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007508 <I2SEx_TxISR_I2SExt+0x94>)
 80074d6:	e001      	b.n	80074dc <I2SEx_TxISR_I2SExt+0x68>
 80074d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80074e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ff81 	bl	80073fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40003800 	.word	0x40003800
 8007508:	40003400 	.word	0x40003400

0800750c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68d8      	ldr	r0, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751e:	1c99      	adds	r1, r3, #2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007524:	b282      	uxth	r2, r0
 8007526:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d113      	bne.n	8007568 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800754e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff ff4a 	bl	80073fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a20      	ldr	r2, [pc, #128]	@ (8007600 <I2SEx_RxISR_I2SExt+0x90>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d101      	bne.n	8007586 <I2SEx_RxISR_I2SExt+0x16>
 8007582:	4b20      	ldr	r3, [pc, #128]	@ (8007604 <I2SEx_RxISR_I2SExt+0x94>)
 8007584:	e001      	b.n	800758a <I2SEx_RxISR_I2SExt+0x1a>
 8007586:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800758a:	68d8      	ldr	r0, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	1c99      	adds	r1, r3, #2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007596:	b282      	uxth	r2, r0
 8007598:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d121      	bne.n	80075f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a12      	ldr	r2, [pc, #72]	@ (8007600 <I2SEx_RxISR_I2SExt+0x90>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d101      	bne.n	80075c0 <I2SEx_RxISR_I2SExt+0x50>
 80075bc:	4b11      	ldr	r3, [pc, #68]	@ (8007604 <I2SEx_RxISR_I2SExt+0x94>)
 80075be:	e001      	b.n	80075c4 <I2SEx_RxISR_I2SExt+0x54>
 80075c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	490d      	ldr	r1, [pc, #52]	@ (8007600 <I2SEx_RxISR_I2SExt+0x90>)
 80075cc:	428b      	cmp	r3, r1
 80075ce:	d101      	bne.n	80075d4 <I2SEx_RxISR_I2SExt+0x64>
 80075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <I2SEx_RxISR_I2SExt+0x94>)
 80075d2:	e001      	b.n	80075d8 <I2SEx_RxISR_I2SExt+0x68>
 80075d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80075dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff ff03 	bl	80073fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40003800 	.word	0x40003800
 8007604:	40003400 	.word	0x40003400

08007608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e25e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d075      	beq.n	8007712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007626:	4b88      	ldr	r3, [pc, #544]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 030c 	and.w	r3, r3, #12
 800762e:	2b04      	cmp	r3, #4
 8007630:	d00c      	beq.n	800764c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007632:	4b85      	ldr	r3, [pc, #532]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800763a:	2b08      	cmp	r3, #8
 800763c:	d112      	bne.n	8007664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800763e:	4b82      	ldr	r3, [pc, #520]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800764a:	d10b      	bne.n	8007664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764c:	4b7e      	ldr	r3, [pc, #504]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d05b      	beq.n	8007710 <HAL_RCC_OscConfig+0x108>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d157      	bne.n	8007710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e239      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800766c:	d106      	bne.n	800767c <HAL_RCC_OscConfig+0x74>
 800766e:	4b76      	ldr	r3, [pc, #472]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a75      	ldr	r2, [pc, #468]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e01d      	b.n	80076b8 <HAL_RCC_OscConfig+0xb0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007684:	d10c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x98>
 8007686:	4b70      	ldr	r3, [pc, #448]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a6f      	ldr	r2, [pc, #444]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800768c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	4b6d      	ldr	r3, [pc, #436]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a6c      	ldr	r2, [pc, #432]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e00b      	b.n	80076b8 <HAL_RCC_OscConfig+0xb0>
 80076a0:	4b69      	ldr	r3, [pc, #420]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a68      	ldr	r2, [pc, #416]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	4b66      	ldr	r3, [pc, #408]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a65      	ldr	r2, [pc, #404]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c0:	f7fa fd68 	bl	8002194 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076c8:	f7fa fd64 	bl	8002194 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b64      	cmp	r3, #100	@ 0x64
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e1fe      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076da:	4b5b      	ldr	r3, [pc, #364]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f0      	beq.n	80076c8 <HAL_RCC_OscConfig+0xc0>
 80076e6:	e014      	b.n	8007712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fa fd54 	bl	8002194 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076f0:	f7fa fd50 	bl	8002194 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b64      	cmp	r3, #100	@ 0x64
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e1ea      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007702:	4b51      	ldr	r3, [pc, #324]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0xe8>
 800770e:	e000      	b.n	8007712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d063      	beq.n	80077e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800771e:	4b4a      	ldr	r3, [pc, #296]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 030c 	and.w	r3, r3, #12
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800772a:	4b47      	ldr	r3, [pc, #284]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007732:	2b08      	cmp	r3, #8
 8007734:	d11c      	bne.n	8007770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007736:	4b44      	ldr	r3, [pc, #272]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d116      	bne.n	8007770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007742:	4b41      	ldr	r3, [pc, #260]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_RCC_OscConfig+0x152>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d001      	beq.n	800775a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e1be      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775a:	4b3b      	ldr	r3, [pc, #236]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4937      	ldr	r1, [pc, #220]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800776a:	4313      	orrs	r3, r2
 800776c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800776e:	e03a      	b.n	80077e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d020      	beq.n	80077ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007778:	4b34      	ldr	r3, [pc, #208]	@ (800784c <HAL_RCC_OscConfig+0x244>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777e:	f7fa fd09 	bl	8002194 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007786:	f7fa fd05 	bl	8002194 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e19f      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007798:	4b2b      	ldr	r3, [pc, #172]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a4:	4b28      	ldr	r3, [pc, #160]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4925      	ldr	r1, [pc, #148]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	e015      	b.n	80077e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ba:	4b24      	ldr	r3, [pc, #144]	@ (800784c <HAL_RCC_OscConfig+0x244>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c0:	f7fa fce8 	bl	8002194 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c8:	f7fa fce4 	bl	8002194 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e17e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077da:	4b1b      	ldr	r3, [pc, #108]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1f0      	bne.n	80077c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d036      	beq.n	8007860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d016      	beq.n	8007828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077fa:	4b15      	ldr	r3, [pc, #84]	@ (8007850 <HAL_RCC_OscConfig+0x248>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007800:	f7fa fcc8 	bl	8002194 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007808:	f7fa fcc4 	bl	8002194 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e15e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800781a:	4b0b      	ldr	r3, [pc, #44]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800781c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCC_OscConfig+0x200>
 8007826:	e01b      	b.n	8007860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <HAL_RCC_OscConfig+0x248>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800782e:	f7fa fcb1 	bl	8002194 <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007834:	e00e      	b.n	8007854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007836:	f7fa fcad 	bl	8002194 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d907      	bls.n	8007854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e147      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
 8007848:	40023800 	.word	0x40023800
 800784c:	42470000 	.word	0x42470000
 8007850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007854:	4b88      	ldr	r3, [pc, #544]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1ea      	bne.n	8007836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8097 	beq.w	800799c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007872:	4b81      	ldr	r3, [pc, #516]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10f      	bne.n	800789e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	4b7d      	ldr	r3, [pc, #500]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	4a7c      	ldr	r2, [pc, #496]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800788c:	6413      	str	r3, [r2, #64]	@ 0x40
 800788e:	4b7a      	ldr	r3, [pc, #488]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007896:	60bb      	str	r3, [r7, #8]
 8007898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789e:	4b77      	ldr	r3, [pc, #476]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d118      	bne.n	80078dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078aa:	4b74      	ldr	r3, [pc, #464]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a73      	ldr	r2, [pc, #460]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078b6:	f7fa fc6d 	bl	8002194 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078bc:	e008      	b.n	80078d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078be:	f7fa fc69 	bl	8002194 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e103      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d0:	4b6a      	ldr	r3, [pc, #424]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0f0      	beq.n	80078be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d106      	bne.n	80078f2 <HAL_RCC_OscConfig+0x2ea>
 80078e4:	4b64      	ldr	r3, [pc, #400]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80078e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e8:	4a63      	ldr	r2, [pc, #396]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80078f0:	e01c      	b.n	800792c <HAL_RCC_OscConfig+0x324>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d10c      	bne.n	8007914 <HAL_RCC_OscConfig+0x30c>
 80078fa:	4b5f      	ldr	r3, [pc, #380]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80078fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fe:	4a5e      	ldr	r2, [pc, #376]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007900:	f043 0304 	orr.w	r3, r3, #4
 8007904:	6713      	str	r3, [r2, #112]	@ 0x70
 8007906:	4b5c      	ldr	r3, [pc, #368]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790a:	4a5b      	ldr	r2, [pc, #364]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 800790c:	f043 0301 	orr.w	r3, r3, #1
 8007910:	6713      	str	r3, [r2, #112]	@ 0x70
 8007912:	e00b      	b.n	800792c <HAL_RCC_OscConfig+0x324>
 8007914:	4b58      	ldr	r3, [pc, #352]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007918:	4a57      	ldr	r2, [pc, #348]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007920:	4b55      	ldr	r3, [pc, #340]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007924:	4a54      	ldr	r2, [pc, #336]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007926:	f023 0304 	bic.w	r3, r3, #4
 800792a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d015      	beq.n	8007960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007934:	f7fa fc2e 	bl	8002194 <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800793a:	e00a      	b.n	8007952 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800793c:	f7fa fc2a 	bl	8002194 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800794a:	4293      	cmp	r3, r2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e0c2      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007952:	4b49      	ldr	r3, [pc, #292]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ee      	beq.n	800793c <HAL_RCC_OscConfig+0x334>
 800795e:	e014      	b.n	800798a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007960:	f7fa fc18 	bl	8002194 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007966:	e00a      	b.n	800797e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007968:	f7fa fc14 	bl	8002194 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e0ac      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800797e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1ee      	bne.n	8007968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d105      	bne.n	800799c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007990:	4b39      	ldr	r3, [pc, #228]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	4a38      	ldr	r2, [pc, #224]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800799a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8098 	beq.w	8007ad6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079a6:	4b34      	ldr	r3, [pc, #208]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d05c      	beq.n	8007a6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d141      	bne.n	8007a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ba:	4b31      	ldr	r3, [pc, #196]	@ (8007a80 <HAL_RCC_OscConfig+0x478>)
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c0:	f7fa fbe8 	bl	8002194 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c8:	f7fa fbe4 	bl	8002194 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e07e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079da:	4b27      	ldr	r3, [pc, #156]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f0      	bne.n	80079c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69da      	ldr	r2, [r3, #28]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	019b      	lsls	r3, r3, #6
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	3b01      	subs	r3, #1
 8007a00:	041b      	lsls	r3, r3, #16
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	061b      	lsls	r3, r3, #24
 8007a0a:	491b      	ldr	r1, [pc, #108]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a10:	4b1b      	ldr	r3, [pc, #108]	@ (8007a80 <HAL_RCC_OscConfig+0x478>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a16:	f7fa fbbd 	bl	8002194 <HAL_GetTick>
 8007a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a1c:	e008      	b.n	8007a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a1e:	f7fa fbb9 	bl	8002194 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e053      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a30:	4b11      	ldr	r3, [pc, #68]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0f0      	beq.n	8007a1e <HAL_RCC_OscConfig+0x416>
 8007a3c:	e04b      	b.n	8007ad6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a3e:	4b10      	ldr	r3, [pc, #64]	@ (8007a80 <HAL_RCC_OscConfig+0x478>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a44:	f7fa fba6 	bl	8002194 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a4c:	f7fa fba2 	bl	8002194 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e03c      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x444>
 8007a6a:	e034      	b.n	8007ad6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d107      	bne.n	8007a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e02f      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	40007000 	.word	0x40007000
 8007a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a84:	4b16      	ldr	r3, [pc, #88]	@ (8007ae0 <HAL_RCC_OscConfig+0x4d8>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d11c      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d115      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007aac:	4013      	ands	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d10d      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d106      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d001      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40023800 	.word	0x40023800

08007ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0cc      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007af8:	4b68      	ldr	r3, [pc, #416]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d90c      	bls.n	8007b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b06:	4b65      	ldr	r3, [pc, #404]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0e:	4b63      	ldr	r3, [pc, #396]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d001      	beq.n	8007b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0b8      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d020      	beq.n	8007b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b38:	4b59      	ldr	r3, [pc, #356]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	4a58      	ldr	r2, [pc, #352]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b50:	4b53      	ldr	r3, [pc, #332]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	4a52      	ldr	r2, [pc, #328]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b5c:	4b50      	ldr	r3, [pc, #320]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	494d      	ldr	r1, [pc, #308]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d044      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d107      	bne.n	8007b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b82:	4b47      	ldr	r3, [pc, #284]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d119      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e07f      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d003      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d107      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e06f      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e067      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bc2:	4b37      	ldr	r3, [pc, #220]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f023 0203 	bic.w	r2, r3, #3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	4934      	ldr	r1, [pc, #208]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bd4:	f7fa fade 	bl	8002194 <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bda:	e00a      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bdc:	f7fa fada 	bl	8002194 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e04f      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 020c 	and.w	r2, r3, #12
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d1eb      	bne.n	8007bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c04:	4b25      	ldr	r3, [pc, #148]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 030f 	and.w	r3, r3, #15
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d20c      	bcs.n	8007c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c12:	4b22      	ldr	r3, [pc, #136]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c1a:	4b20      	ldr	r3, [pc, #128]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d001      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e032      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c38:	4b19      	ldr	r3, [pc, #100]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	4916      	ldr	r1, [pc, #88]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c56:	4b12      	ldr	r3, [pc, #72]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	490e      	ldr	r1, [pc, #56]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c6a:	f000 f821 	bl	8007cb0 <HAL_RCC_GetSysClockFreq>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	091b      	lsrs	r3, r3, #4
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	490a      	ldr	r1, [pc, #40]	@ (8007ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8007c7c:	5ccb      	ldrb	r3, [r1, r3]
 8007c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c82:	4a09      	ldr	r2, [pc, #36]	@ (8007ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c86:	4b09      	ldr	r3, [pc, #36]	@ (8007cac <HAL_RCC_ClockConfig+0x1c8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fa fa3e 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40023c00 	.word	0x40023c00
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	080100e0 	.word	0x080100e0
 8007ca8:	20000038 	.word	0x20000038
 8007cac:	20000040 	.word	0x20000040

08007cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b094      	sub	sp, #80	@ 0x50
 8007cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cc8:	4b79      	ldr	r3, [pc, #484]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 030c 	and.w	r3, r3, #12
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d00d      	beq.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	f200 80e1 	bhi.w	8007e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d003      	beq.n	8007cea <HAL_RCC_GetSysClockFreq+0x3a>
 8007ce2:	e0db      	b.n	8007e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ce4:	4b73      	ldr	r3, [pc, #460]	@ (8007eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007ce8:	e0db      	b.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cea:	4b73      	ldr	r3, [pc, #460]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007cee:	e0d8      	b.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d063      	beq.n	8007dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d06:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	099b      	lsrs	r3, r3, #6
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007d22:	4622      	mov	r2, r4
 8007d24:	462b      	mov	r3, r5
 8007d26:	f04f 0000 	mov.w	r0, #0
 8007d2a:	f04f 0100 	mov.w	r1, #0
 8007d2e:	0159      	lsls	r1, r3, #5
 8007d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d34:	0150      	lsls	r0, r2, #5
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	1a51      	subs	r1, r2, r1
 8007d3e:	6139      	str	r1, [r7, #16]
 8007d40:	4629      	mov	r1, r5
 8007d42:	eb63 0301 	sbc.w	r3, r3, r1
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d54:	4659      	mov	r1, fp
 8007d56:	018b      	lsls	r3, r1, #6
 8007d58:	4651      	mov	r1, sl
 8007d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d5e:	4651      	mov	r1, sl
 8007d60:	018a      	lsls	r2, r1, #6
 8007d62:	4651      	mov	r1, sl
 8007d64:	ebb2 0801 	subs.w	r8, r2, r1
 8007d68:	4659      	mov	r1, fp
 8007d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d82:	4690      	mov	r8, r2
 8007d84:	4699      	mov	r9, r3
 8007d86:	4623      	mov	r3, r4
 8007d88:	eb18 0303 	adds.w	r3, r8, r3
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	462b      	mov	r3, r5
 8007d90:	eb49 0303 	adc.w	r3, r9, r3
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007da2:	4629      	mov	r1, r5
 8007da4:	024b      	lsls	r3, r1, #9
 8007da6:	4621      	mov	r1, r4
 8007da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007dac:	4621      	mov	r1, r4
 8007dae:	024a      	lsls	r2, r1, #9
 8007db0:	4610      	mov	r0, r2
 8007db2:	4619      	mov	r1, r3
 8007db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db6:	2200      	movs	r2, #0
 8007db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007dc0:	f7f8 fa0a 	bl	80001d8 <__aeabi_uldivmod>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4613      	mov	r3, r2
 8007dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dcc:	e058      	b.n	8007e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dce:	4b38      	ldr	r3, [pc, #224]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	099b      	lsrs	r3, r3, #6
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	4611      	mov	r1, r2
 8007dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007dde:	623b      	str	r3, [r7, #32]
 8007de0:	2300      	movs	r3, #0
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	f04f 0000 	mov.w	r0, #0
 8007df0:	f04f 0100 	mov.w	r1, #0
 8007df4:	0159      	lsls	r1, r3, #5
 8007df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dfa:	0150      	lsls	r0, r2, #5
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4641      	mov	r1, r8
 8007e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e06:	4649      	mov	r1, r9
 8007e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e20:	ebb2 040a 	subs.w	r4, r2, sl
 8007e24:	eb63 050b 	sbc.w	r5, r3, fp
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	00eb      	lsls	r3, r5, #3
 8007e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e36:	00e2      	lsls	r2, r4, #3
 8007e38:	4614      	mov	r4, r2
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	4643      	mov	r3, r8
 8007e3e:	18e3      	adds	r3, r4, r3
 8007e40:	603b      	str	r3, [r7, #0]
 8007e42:	464b      	mov	r3, r9
 8007e44:	eb45 0303 	adc.w	r3, r5, r3
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e56:	4629      	mov	r1, r5
 8007e58:	028b      	lsls	r3, r1, #10
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e60:	4621      	mov	r1, r4
 8007e62:	028a      	lsls	r2, r1, #10
 8007e64:	4610      	mov	r0, r2
 8007e66:	4619      	mov	r1, r3
 8007e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	61fa      	str	r2, [r7, #28]
 8007e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e74:	f7f8 f9b0 	bl	80001d8 <__aeabi_uldivmod>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	0c1b      	lsrs	r3, r3, #16
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e9a:	e002      	b.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e9c:	4b05      	ldr	r3, [pc, #20]	@ (8007eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3750      	adds	r7, #80	@ 0x50
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eae:	bf00      	nop
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	00f42400 	.word	0x00f42400
 8007eb8:	007a1200 	.word	0x007a1200

08007ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	@ (8007ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20000038 	.word	0x20000038

08007ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ed8:	f7ff fff0 	bl	8007ebc <HAL_RCC_GetHCLKFreq>
 8007edc:	4602      	mov	r2, r0
 8007ede:	4b05      	ldr	r3, [pc, #20]	@ (8007ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	0a9b      	lsrs	r3, r3, #10
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	4903      	ldr	r1, [pc, #12]	@ (8007ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eea:	5ccb      	ldrb	r3, [r1, r3]
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	080100f0 	.word	0x080100f0

08007efc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d105      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d038      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f24:	4b68      	ldr	r3, [pc, #416]	@ (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f2a:	f7fa f933 	bl	8002194 <HAL_GetTick>
 8007f2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f30:	e008      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f32:	f7fa f92f 	bl	8002194 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e0bd      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f44:	4b61      	ldr	r3, [pc, #388]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	019b      	lsls	r3, r3, #6
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	071b      	lsls	r3, r3, #28
 8007f62:	495a      	ldr	r1, [pc, #360]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f6a:	4b57      	ldr	r3, [pc, #348]	@ (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f70:	f7fa f910 	bl	8002194 <HAL_GetTick>
 8007f74:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f76:	e008      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f78:	f7fa f90c 	bl	8002194 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e09a      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f8a:	4b50      	ldr	r3, [pc, #320]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8083 	beq.w	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	4b48      	ldr	r3, [pc, #288]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fac:	4a47      	ldr	r2, [pc, #284]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fb4:	4b45      	ldr	r3, [pc, #276]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007fc0:	4b43      	ldr	r3, [pc, #268]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a42      	ldr	r2, [pc, #264]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fcc:	f7fa f8e2 	bl	8002194 <HAL_GetTick>
 8007fd0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007fd4:	f7fa f8de 	bl	8002194 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e06c      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ff2:	4b36      	ldr	r3, [pc, #216]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ffa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d02f      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	429a      	cmp	r2, r3
 800800e:	d028      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008010:	4b2e      	ldr	r3, [pc, #184]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008018:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800801a:	4b2e      	ldr	r3, [pc, #184]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800801c:	2201      	movs	r2, #1
 800801e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008020:	4b2c      	ldr	r3, [pc, #176]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008026:	4a29      	ldr	r2, [pc, #164]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800802c:	4b27      	ldr	r3, [pc, #156]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b01      	cmp	r3, #1
 8008036:	d114      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008038:	f7fa f8ac 	bl	8002194 <HAL_GetTick>
 800803c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800803e:	e00a      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008040:	f7fa f8a8 	bl	8002194 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800804e:	4293      	cmp	r3, r2
 8008050:	d901      	bls.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e034      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008056:	4b1d      	ldr	r3, [pc, #116]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0ee      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800806a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800806e:	d10d      	bne.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008070:	4b16      	ldr	r3, [pc, #88]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008080:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008084:	4911      	ldr	r1, [pc, #68]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008086:	4313      	orrs	r3, r2
 8008088:	608b      	str	r3, [r1, #8]
 800808a:	e005      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800808c:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	4a0e      	ldr	r2, [pc, #56]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008092:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008096:	6093      	str	r3, [r2, #8]
 8008098:	4b0c      	ldr	r3, [pc, #48]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800809a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a4:	4909      	ldr	r1, [pc, #36]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	7d1a      	ldrb	r2, [r3, #20]
 80080ba:	4b07      	ldr	r3, [pc, #28]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80080bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	42470068 	.word	0x42470068
 80080cc:	40023800 	.word	0x40023800
 80080d0:	40007000 	.word	0x40007000
 80080d4:	42470e40 	.word	0x42470e40
 80080d8:	424711e0 	.word	0x424711e0

080080dc <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2203      	movs	r2, #3
 80080e8:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80080ea:	4b1c      	ldr	r3, [pc, #112]	@ (800815c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80080ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f0:	099b      	lsrs	r3, r3, #6
 80080f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080fa:	4b18      	ldr	r3, [pc, #96]	@ (800815c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80080fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008100:	0f1b      	lsrs	r3, r3, #28
 8008102:	f003 0207 	and.w	r2, r3, #7
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800810a:	4b14      	ldr	r3, [pc, #80]	@ (800815c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800810c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008110:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008118:	4b10      	ldr	r3, [pc, #64]	@ (800815c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008120:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008122:	4b0e      	ldr	r3, [pc, #56]	@ (800815c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008126:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8008132:	4b0a      	ldr	r3, [pc, #40]	@ (800815c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d103      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8008146:	e002      	b.n	800814e <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	751a      	strb	r2, [r3, #20]
}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40023800 	.word	0x40023800

08008160 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d140      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800817e:	4b24      	ldr	r3, [pc, #144]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d005      	beq.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d131      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008194:	4b1f      	ldr	r3, [pc, #124]	@ (8008214 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008196:	617b      	str	r3, [r7, #20]
          break;
 8008198:	e031      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800819a:	4b1d      	ldr	r3, [pc, #116]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081a6:	d109      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80081a8:	4b19      	ldr	r3, [pc, #100]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081b2:	4a19      	ldr	r2, [pc, #100]	@ (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	e008      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80081bc:	4b14      	ldr	r3, [pc, #80]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081c6:	4a15      	ldr	r2, [pc, #84]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80081c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081cc:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80081ce:	4b10      	ldr	r3, [pc, #64]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081d4:	099b      	lsrs	r3, r3, #6
 80081d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	fb02 f303 	mul.w	r3, r2, r3
 80081e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80081e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80081e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081e8:	0f1b      	lsrs	r3, r3, #28
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	617b      	str	r3, [r7, #20]
          break;
 80081f6:	e002      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
          break;
 80081fc:	bf00      	nop
        }
      }
      break;
 80081fe:	bf00      	nop
    }
  }
  return frequency;
 8008200:	697b      	ldr	r3, [r7, #20]
}
 8008202:	4618      	mov	r0, r3
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40023800 	.word	0x40023800
 8008214:	00bb8000 	.word	0x00bb8000
 8008218:	007a1200 	.word	0x007a1200
 800821c:	00f42400 	.word	0x00f42400

08008220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008220:	b084      	sub	sp, #16
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	f107 001c 	add.w	r0, r7, #28
 800822e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	2b01      	cmp	r3, #1
 8008236:	d122      	bne.n	800827e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800824c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d105      	bne.n	8008272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f94a 	bl	800850c <USB_CoreReset>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	e01a      	b.n	80082b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f93e 	bl	800850c <USB_CoreReset>
 8008290:	4603      	mov	r3, r0
 8008292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80082a6:	e005      	b.n	80082b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d10b      	bne.n	80082d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f043 0206 	orr.w	r2, r3, #6
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082de:	b004      	add	sp, #16
 80082e0:	4770      	bx	lr

080082e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f043 0201 	orr.w	r2, r3, #1
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f023 0201 	bic.w	r2, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	60da      	str	r2, [r3, #12]
 8008350:	e00b      	b.n	800836a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d106      	bne.n	8008366 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	60da      	str	r2, [r3, #12]
 8008364:	e001      	b.n	800836a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e003      	b.n	8008372 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800836a:	2032      	movs	r0, #50	@ 0x32
 800836c:	f7f9 ff1e 	bl	80021ac <HAL_Delay>

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	019b      	lsls	r3, r3, #6
 800838e:	f043 0220 	orr.w	r2, r3, #32
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4a09      	ldr	r2, [pc, #36]	@ (80083c4 <USB_FlushTxFifo+0x48>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d901      	bls.n	80083a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e006      	b.n	80083b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	d0f0      	beq.n	8008396 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	00030d40 	.word	0x00030d40

080083c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2210      	movs	r2, #16
 80083d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3301      	adds	r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4a09      	ldr	r2, [pc, #36]	@ (8008408 <USB_FlushRxFifo+0x40>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d901      	bls.n	80083ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e006      	b.n	80083fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b10      	cmp	r3, #16
 80083f6:	d0f0      	beq.n	80083da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	00030d40 	.word	0x00030d40

0800840c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800840c:	b480      	push	{r7}
 800840e:	b089      	sub	sp, #36	@ 0x24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4611      	mov	r1, r2
 8008418:	461a      	mov	r2, r3
 800841a:	460b      	mov	r3, r1
 800841c:	71fb      	strb	r3, [r7, #7]
 800841e:	4613      	mov	r3, r2
 8008420:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800842a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d11a      	bne.n	8008468 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008432:	88bb      	ldrh	r3, [r7, #4]
 8008434:	3303      	adds	r3, #3
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800843a:	2300      	movs	r3, #0
 800843c:	61bb      	str	r3, [r7, #24]
 800843e:	e00f      	b.n	8008460 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	031a      	lsls	r2, r3, #12
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	4413      	add	r3, r2
 8008448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800844c:	461a      	mov	r2, r3
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	3304      	adds	r3, #4
 8008458:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	3301      	adds	r3, #1
 800845e:	61bb      	str	r3, [r7, #24]
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	429a      	cmp	r2, r3
 8008466:	d3eb      	bcc.n	8008440 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3724      	adds	r7, #36	@ 0x24
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008476:	b480      	push	{r7}
 8008478:	b089      	sub	sp, #36	@ 0x24
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	3303      	adds	r3, #3
 8008490:	089b      	lsrs	r3, r3, #2
 8008492:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	e00b      	b.n	80084b2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	601a      	str	r2, [r3, #0]
    pDest++;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3304      	adds	r3, #4
 80084aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	3301      	adds	r3, #1
 80084b0:	61bb      	str	r3, [r7, #24]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d3ef      	bcc.n	800849a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80084ba:	69fb      	ldr	r3, [r7, #28]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3724      	adds	r7, #36	@ 0x24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4013      	ands	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084e0:	68fb      	ldr	r3, [r7, #12]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	f003 0301 	and.w	r3, r3, #1
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4a13      	ldr	r2, [pc, #76]	@ (8008570 <USB_CoreReset+0x64>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d901      	bls.n	800852a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e01b      	b.n	8008562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	daf2      	bge.n	8008518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f043 0201 	orr.w	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4a09      	ldr	r2, [pc, #36]	@ (8008570 <USB_CoreReset+0x64>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d901      	bls.n	8008554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e006      	b.n	8008562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b01      	cmp	r3, #1
 800855e:	d0f0      	beq.n	8008542 <USB_CoreReset+0x36>

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	00030d40 	.word	0x00030d40

08008574 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008574:	b084      	sub	sp, #16
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	f107 001c 	add.w	r0, r7, #28
 8008582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008590:	461a      	mov	r2, r3
 8008592:	2300      	movs	r3, #0
 8008594:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d018      	beq.n	80085f8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d10a      	bne.n	80085e2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085da:	f043 0304 	orr.w	r3, r3, #4
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	e014      	b.n	800860c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085f0:	f023 0304 	bic.w	r3, r3, #4
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	e009      	b.n	800860c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008606:	f023 0304 	bic.w	r3, r3, #4
 800860a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800860c:	2110      	movs	r1, #16
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff feb4 	bl	800837c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff fed7 	bl	80083c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	e015      	b.n	800864c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	4413      	add	r3, r2
 8008628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800862c:	461a      	mov	r2, r3
 800862e:	f04f 33ff 	mov.w	r3, #4294967295
 8008632:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4413      	add	r3, r2
 800863c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008640:	461a      	mov	r2, r3
 8008642:	2300      	movs	r3, #0
 8008644:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3301      	adds	r3, #1
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d3e5      	bcc.n	8008620 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008654:	2101      	movs	r1, #1
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8ac 	bl	80087b4 <USB_DriveVbus>

  HAL_Delay(200U);
 800865c:	20c8      	movs	r0, #200	@ 0xc8
 800865e:	f7f9 fda5 	bl	80021ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f04f 32ff 	mov.w	r2, #4294967295
 800866e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008682:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a14      	ldr	r2, [pc, #80]	@ (80086d8 <USB_HostInit+0x164>)
 8008688:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a13      	ldr	r2, [pc, #76]	@ (80086dc <USB_HostInit+0x168>)
 800868e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008692:	e009      	b.n	80086a8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2280      	movs	r2, #128	@ 0x80
 8008698:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a10      	ldr	r2, [pc, #64]	@ (80086e0 <USB_HostInit+0x16c>)
 800869e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a10      	ldr	r2, [pc, #64]	@ (80086e4 <USB_HostInit+0x170>)
 80086a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f043 0210 	orr.w	r2, r3, #16
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <USB_HostInit+0x174>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086d2:	b004      	add	sp, #16
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	01000200 	.word	0x01000200
 80086dc:	00e00300 	.word	0x00e00300
 80086e0:	00600080 	.word	0x00600080
 80086e4:	004000e0 	.word	0x004000e0
 80086e8:	a3200008 	.word	0xa3200008

080086ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800870a:	f023 0303 	bic.w	r3, r3, #3
 800870e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008724:	4313      	orrs	r3, r2
 8008726:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d107      	bne.n	800873e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008734:	461a      	mov	r2, r3
 8008736:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800873a:	6053      	str	r3, [r2, #4]
 800873c:	e009      	b.n	8008752 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d106      	bne.n	8008752 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800874a:	461a      	mov	r2, r3
 800874c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008750:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008780:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800878a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800878e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008790:	2064      	movs	r0, #100	@ 0x64
 8008792:	f7f9 fd0b 	bl	80021ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800879e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80087a4:	200a      	movs	r0, #10
 80087a6:	f7f9 fd01 	bl	80021ac <HAL_Delay>

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80087d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d109      	bne.n	80087f8 <USB_DriveVbus+0x44>
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d106      	bne.n	80087f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80087f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80087f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008802:	d109      	bne.n	8008818 <USB_DriveVbus+0x64>
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008816:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008826:	b480      	push	{r7}
 8008828:	b085      	sub	sp, #20
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	0c5b      	lsrs	r3, r3, #17
 8008844:	f003 0303 	and.w	r3, r3, #3
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	b29b      	uxth	r3, r3
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	4608      	mov	r0, r1
 8008882:	4611      	mov	r1, r2
 8008884:	461a      	mov	r2, r3
 8008886:	4603      	mov	r3, r0
 8008888:	70fb      	strb	r3, [r7, #3]
 800888a:	460b      	mov	r3, r1
 800888c:	70bb      	strb	r3, [r7, #2]
 800888e:	4613      	mov	r3, r2
 8008890:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a6:	461a      	mov	r2, r3
 80088a8:	f04f 33ff 	mov.w	r3, #4294967295
 80088ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80088ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d87e      	bhi.n	80089b4 <USB_HC_Init+0x13c>
 80088b6:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <USB_HC_Init+0x44>)
 80088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	08008977 	.word	0x08008977
 80088c4:	080088cd 	.word	0x080088cd
 80088c8:	08008939 	.word	0x08008939
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088d8:	461a      	mov	r2, r3
 80088da:	f240 439d 	movw	r3, #1181	@ 0x49d
 80088de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80088e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	da10      	bge.n	800890a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008906:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008908:	e057      	b.n	80089ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d051      	beq.n	80089ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	0151      	lsls	r1, r2, #5
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	440a      	add	r2, r1
 800892c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008930:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008934:	60d3      	str	r3, [r2, #12]
      break;
 8008936:	e040      	b.n	80089ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4413      	add	r3, r2
 8008940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008944:	461a      	mov	r2, r3
 8008946:	f240 639d 	movw	r3, #1693	@ 0x69d
 800894a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800894c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da34      	bge.n	80089be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4413      	add	r3, r2
 800895c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	440a      	add	r2, r1
 800896a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800896e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008972:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008974:	e023      	b.n	80089be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008982:	461a      	mov	r2, r3
 8008984:	f240 2325 	movw	r3, #549	@ 0x225
 8008988:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800898a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800898e:	2b00      	cmp	r3, #0
 8008990:	da17      	bge.n	80089c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	78fa      	ldrb	r2, [r7, #3]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80089b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80089b2:	e006      	b.n	80089c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	75fb      	strb	r3, [r7, #23]
      break;
 80089b8:	e004      	b.n	80089c4 <USB_HC_Init+0x14c>
      break;
 80089ba:	bf00      	nop
 80089bc:	e002      	b.n	80089c4 <USB_HC_Init+0x14c>
      break;
 80089be:	bf00      	nop
 80089c0:	e000      	b.n	80089c4 <USB_HC_Init+0x14c>
      break;
 80089c2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	2101      	movs	r1, #1
 80089d4:	fa01 f303 	lsl.w	r3, r1, r3
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80089de:	4313      	orrs	r3, r2
 80089e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80089ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da03      	bge.n	80089fe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80089f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	e001      	b.n	8008a02 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008a02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d103      	bne.n	8008a12 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008a0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	e001      	b.n	8008a16 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a16:	787b      	ldrb	r3, [r7, #1]
 8008a18:	059b      	lsls	r3, r3, #22
 8008a1a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a1e:	78bb      	ldrb	r3, [r7, #2]
 8008a20:	02db      	lsls	r3, r3, #11
 8008a22:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a26:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a2c:	049b      	lsls	r3, r3, #18
 8008a2e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008a34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a3a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	0159      	lsls	r1, r3, #5
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	440b      	add	r3, r1
 8008a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a4c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a52:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008a54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d10f      	bne.n	8008a7c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008a5c:	78fb      	ldrb	r3, [r7, #3]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	0151      	lsls	r1, r2, #5
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	440a      	add	r2, r1
 8008a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a7a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop

08008a8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08c      	sub	sp, #48	@ 0x30
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	785b      	ldrb	r3, [r3, #1]
 8008aa2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008aa8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d028      	beq.n	8008b08 <USB_HC_StartXfer+0x7c>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	791b      	ldrb	r3, [r3, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d124      	bne.n	8008b08 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <USB_HC_StartXfer+0x50>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	795b      	ldrb	r3, [r3, #5]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d107      	bne.n	8008adc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 fa2e 	bl	8008f34 <USB_DoPing>
      return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e113      	b.n	8008d04 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d112      	bne.n	8008b08 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	6a3a      	ldr	r2, [r7, #32]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008afc:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8008b00:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d018      	beq.n	8008b42 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	8912      	ldrh	r2, [r2, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	8912      	ldrh	r2, [r2, #8]
 8008b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b24:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8008b26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008b28:	8b7b      	ldrh	r3, [r7, #26]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d90b      	bls.n	8008b46 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008b2e:	8b7b      	ldrh	r3, [r7, #26]
 8008b30:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008b32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	8912      	ldrh	r2, [r2, #8]
 8008b38:	fb03 f202 	mul.w	r2, r3, r2
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	611a      	str	r2, [r3, #16]
 8008b40:	e001      	b.n	8008b46 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008b42:	2301      	movs	r3, #1
 8008b44:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  if (hc->ep_is_in != 0U)
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	78db      	ldrb	r3, [r3, #3]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d006      	beq.n	8008b5c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008b4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	8912      	ldrh	r2, [r2, #8]
 8008b54:	fb03 f202 	mul.w	r2, r3, r2
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b66:	04d9      	lsls	r1, r3, #19
 8008b68:	4b68      	ldr	r3, [pc, #416]	@ (8008d0c <USB_HC_StartXfer+0x280>)
 8008b6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	7a9b      	ldrb	r3, [r3, #10]
 8008b72:	075b      	lsls	r3, r3, #29
 8008b74:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b78:	69f9      	ldr	r1, [r7, #28]
 8008b7a:	0148      	lsls	r0, r1, #5
 8008b7c:	6a39      	ldr	r1, [r7, #32]
 8008b7e:	4401      	add	r1, r0
 8008b80:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	68d9      	ldr	r1, [r3, #12]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b9e:	460a      	mov	r2, r1
 8008ba0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bf0c      	ite	eq
 8008bb2:	2301      	moveq	r3, #1
 8008bb4:	2300      	movne	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	6a3a      	ldr	r2, [r7, #32]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	7e7b      	ldrb	r3, [r7, #25]
 8008bea:	075b      	lsls	r3, r3, #29
 8008bec:	69f9      	ldr	r1, [r7, #28]
 8008bee:	0148      	lsls	r0, r1, #5
 8008bf0:	6a39      	ldr	r1, [r7, #32]
 8008bf2:	4401      	add	r1, r0
 8008bf4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a41      	ldr	r2, [pc, #260]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c0c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c0e:	4b40      	ldr	r3, [pc, #256]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c16:	4a3e      	ldr	r2, [pc, #248]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c18:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	78db      	ldrb	r3, [r3, #3]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d006      	beq.n	8008c30 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008c22:	4b3b      	ldr	r3, [pc, #236]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c2a:	4a39      	ldr	r2, [pc, #228]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e005      	b.n	8008c3c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008c30:	4b37      	ldr	r3, [pc, #220]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c38:	4a35      	ldr	r2, [pc, #212]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c3a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c3c:	4b34      	ldr	r3, [pc, #208]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c44:	4a32      	ldr	r2, [pc, #200]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c46:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c54:	461a      	mov	r2, r3
 8008c56:	4b2e      	ldr	r3, [pc, #184]	@ (8008d10 <USB_HC_StartXfer+0x284>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e04e      	b.n	8008d04 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	78db      	ldrb	r3, [r3, #3]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d149      	bne.n	8008d02 <USB_HC_StartXfer+0x276>
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d045      	beq.n	8008d02 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	79db      	ldrb	r3, [r3, #7]
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d830      	bhi.n	8008ce0 <USB_HC_StartXfer+0x254>
 8008c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c84 <USB_HC_StartXfer+0x1f8>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008c95 	.word	0x08008c95
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008c95 	.word	0x08008c95
 8008c90:	08008cb9 	.word	0x08008cb9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	3303      	adds	r3, #3
 8008c9a:	089b      	lsrs	r3, r3, #2
 8008c9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c9e:	8afa      	ldrh	r2, [r7, #22]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d91c      	bls.n	8008ce4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f043 0220 	orr.w	r2, r3, #32
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008cb6:	e015      	b.n	8008ce4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	3303      	adds	r3, #3
 8008cbe:	089b      	lsrs	r3, r3, #2
 8008cc0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008cc2:	8afa      	ldrh	r2, [r7, #22]
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d90a      	bls.n	8008ce8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	619a      	str	r2, [r3, #24]
        }
        break;
 8008cde:	e003      	b.n	8008ce8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008ce0:	bf00      	nop
 8008ce2:	e002      	b.n	8008cea <USB_HC_StartXfer+0x25e>
        break;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <USB_HC_StartXfer+0x25e>
        break;
 8008ce8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	68d9      	ldr	r1, [r3, #12]
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	785a      	ldrb	r2, [r3, #1]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	9000      	str	r0, [sp, #0]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff fb85 	bl	800840c <USB_WritePacket>
  }

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3728      	adds	r7, #40	@ 0x28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	1ff80000 	.word	0x1ff80000
 8008d10:	20001974 	.word	0x20001974

08008d14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	b29b      	uxth	r3, r3
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b087      	sub	sp, #28
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008d46:	78fb      	ldrb	r3, [r7, #3]
 8008d48:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	0c9b      	lsrs	r3, r3, #18
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <USB_HC_Halt+0x3a>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d16c      	bne.n	8008e4a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	0151      	lsls	r1, r2, #5
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	440a      	add	r2, r1
 8008d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d8e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d143      	bne.n	8008e24 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008dfa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	617b      	str	r3, [r7, #20]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e08:	d81d      	bhi.n	8008e46 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e20:	d0ec      	beq.n	8008dfc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e22:	e080      	b.n	8008f26 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e42:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e44:	e06f      	b.n	8008f26 <USB_HC_Halt+0x1f0>
          break;
 8008e46:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e48:	e06d      	b.n	8008f26 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e68:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d143      	bne.n	8008f02 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e98:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eb8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ed4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ed8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	3301      	adds	r3, #1
 8008ede:	617b      	str	r3, [r7, #20]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ee6:	d81d      	bhi.n	8008f24 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008efe:	d0ec      	beq.n	8008eda <USB_HC_Halt+0x1a4>
 8008f00:	e011      	b.n	8008f26 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	e000      	b.n	8008f26 <USB_HC_Halt+0x1f0>
          break;
 8008f24:	bf00      	nop
    }
  }

  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	371c      	adds	r7, #28
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	04da      	lsls	r2, r3, #19
 8008f50:	4b15      	ldr	r3, [pc, #84]	@ (8008fa8 <USB_DoPing+0x74>)
 8008f52:	4013      	ands	r3, r2
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f92:	461a      	mov	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	1ff80000 	.word	0x1ff80000

08008fac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff f9a1 	bl	8008304 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008fc2:	2110      	movs	r1, #16
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff f9d9 	bl	800837c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff f9fc 	bl	80083c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	613b      	str	r3, [r7, #16]
 8008fd4:	e01f      	b.n	8009016 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ff4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ffc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4413      	add	r3, r2
 8009006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800900a:	461a      	mov	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3301      	adds	r3, #1
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d9dc      	bls.n	8008fd6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800901c:	2300      	movs	r3, #0
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	e034      	b.n	800908c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009038:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009040:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009048:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009056:	461a      	mov	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3301      	adds	r3, #1
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009068:	d80c      	bhi.n	8009084 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800907c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009080:	d0ec      	beq.n	800905c <USB_StopHost+0xb0>
 8009082:	e000      	b.n	8009086 <USB_StopHost+0xda>
        break;
 8009084:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	3301      	adds	r3, #1
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2b0f      	cmp	r3, #15
 8009090:	d9c7      	bls.n	8009022 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009098:	461a      	mov	r2, r3
 800909a:	f04f 33ff 	mov.w	r3, #4294967295
 800909e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f04f 32ff 	mov.w	r2, #4294967295
 80090a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff f91a 	bl	80082e2 <USB_EnableGlobalInt>

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80090bc:	4904      	ldr	r1, [pc, #16]	@ (80090d0 <MX_FATFS_Init+0x18>)
 80090be:	4805      	ldr	r0, [pc, #20]	@ (80090d4 <MX_FATFS_Init+0x1c>)
 80090c0:	f006 fa10 	bl	800f4e4 <FATFS_LinkDriver>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	4b03      	ldr	r3, [pc, #12]	@ (80090d8 <MX_FATFS_Init+0x20>)
 80090ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80090cc:	bf00      	nop
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	2000197c 	.word	0x2000197c
 80090d4:	08010100 	.word	0x08010100
 80090d8:	20001978 	.word	0x20001978

080090dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	4619      	mov	r1, r3
 8009116:	4808      	ldr	r0, [pc, #32]	@ (8009138 <USBH_status+0x34>)
 8009118:	f000 fe18 	bl	8009d4c <USBH_MSC_UnitIsReady>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <USBH_status+0x24>
  {
    res = RES_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
 8009126:	e001      	b.n	800912c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20001de8 	.word	0x20001de8

0800913c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b094      	sub	sp, #80	@ 0x50
 8009140:	af02      	add	r7, sp, #8
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009152:	7bf9      	ldrb	r1, [r7, #15]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	4813      	ldr	r0, [pc, #76]	@ (80091ac <USBH_read+0x70>)
 800915e:	f000 fe3f 	bl	8009de0 <USBH_MSC_Read>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d103      	bne.n	8009170 <USBH_read+0x34>
  {
    res = RES_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800916e:	e017      	b.n	80091a0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009170:	f107 0210 	add.w	r2, r7, #16
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	4619      	mov	r1, r3
 8009178:	480c      	ldr	r0, [pc, #48]	@ (80091ac <USBH_read+0x70>)
 800917a:	f000 fe0d 	bl	8009d98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800917e:	7f7b      	ldrb	r3, [r7, #29]
 8009180:	2b3a      	cmp	r3, #58	@ 0x3a
 8009182:	d005      	beq.n	8009190 <USBH_read+0x54>
 8009184:	2b3a      	cmp	r3, #58	@ 0x3a
 8009186:	dc07      	bgt.n	8009198 <USBH_read+0x5c>
 8009188:	2b04      	cmp	r3, #4
 800918a:	d001      	beq.n	8009190 <USBH_read+0x54>
 800918c:	2b28      	cmp	r3, #40	@ 0x28
 800918e:	d103      	bne.n	8009198 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009190:	2303      	movs	r3, #3
 8009192:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8009196:	e003      	b.n	80091a0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800919e:	bf00      	nop
    }
  }

  return res;
 80091a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3748      	adds	r7, #72	@ 0x48
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20001de8 	.word	0x20001de8

080091b0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b094      	sub	sp, #80	@ 0x50
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80091c6:	7bf9      	ldrb	r1, [r7, #15]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4817      	ldr	r0, [pc, #92]	@ (8009230 <USBH_write+0x80>)
 80091d2:	f000 fe6e 	bl	8009eb2 <USBH_MSC_Write>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <USBH_write+0x34>
  {
    res = RES_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80091e2:	e01f      	b.n	8009224 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80091e4:	f107 0210 	add.w	r2, r7, #16
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4619      	mov	r1, r3
 80091ec:	4810      	ldr	r0, [pc, #64]	@ (8009230 <USBH_write+0x80>)
 80091ee:	f000 fdd3 	bl	8009d98 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80091f2:	7f7b      	ldrb	r3, [r7, #29]
 80091f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80091f6:	d00d      	beq.n	8009214 <USBH_write+0x64>
 80091f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80091fa:	dc0f      	bgt.n	800921c <USBH_write+0x6c>
 80091fc:	2b28      	cmp	r3, #40	@ 0x28
 80091fe:	d009      	beq.n	8009214 <USBH_write+0x64>
 8009200:	2b28      	cmp	r3, #40	@ 0x28
 8009202:	dc0b      	bgt.n	800921c <USBH_write+0x6c>
 8009204:	2b04      	cmp	r3, #4
 8009206:	d005      	beq.n	8009214 <USBH_write+0x64>
 8009208:	2b27      	cmp	r3, #39	@ 0x27
 800920a:	d107      	bne.n	800921c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800920c:	2302      	movs	r3, #2
 800920e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8009212:	e007      	b.n	8009224 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009214:	2303      	movs	r3, #3
 8009216:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800921a:	e003      	b.n	8009224 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8009222:	bf00      	nop
    }
  }

  return res;
 8009224:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009228:	4618      	mov	r0, r3
 800922a:	3748      	adds	r7, #72	@ 0x48
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20001de8 	.word	0x20001de8

08009234 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b090      	sub	sp, #64	@ 0x40
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	603a      	str	r2, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
 8009240:	460b      	mov	r3, r1
 8009242:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800924a:	79bb      	ldrb	r3, [r7, #6]
 800924c:	2b03      	cmp	r3, #3
 800924e:	d852      	bhi.n	80092f6 <USBH_ioctl+0xc2>
 8009250:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <USBH_ioctl+0x24>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	08009269 	.word	0x08009269
 800925c:	08009271 	.word	0x08009271
 8009260:	0800929b 	.word	0x0800929b
 8009264:	080092c7 	.word	0x080092c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800926e:	e045      	b.n	80092fc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009270:	f107 0208 	add.w	r2, r7, #8
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	4619      	mov	r1, r3
 8009278:	4823      	ldr	r0, [pc, #140]	@ (8009308 <USBH_ioctl+0xd4>)
 800927a:	f000 fd8d 	bl	8009d98 <USBH_MSC_GetLUNInfo>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d106      	bne.n	8009292 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009290:	e034      	b.n	80092fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8009298:	e030      	b.n	80092fc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800929a:	f107 0208 	add.w	r2, r7, #8
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	4619      	mov	r1, r3
 80092a2:	4819      	ldr	r0, [pc, #100]	@ (8009308 <USBH_ioctl+0xd4>)
 80092a4:	f000 fd78 	bl	8009d98 <USBH_MSC_GetLUNInfo>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d107      	bne.n	80092be <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80092ae:	8a3b      	ldrh	r3, [r7, #16]
 80092b0:	461a      	mov	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80092bc:	e01e      	b.n	80092fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80092c4:	e01a      	b.n	80092fc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80092c6:	f107 0208 	add.w	r2, r7, #8
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	4619      	mov	r1, r3
 80092ce:	480e      	ldr	r0, [pc, #56]	@ (8009308 <USBH_ioctl+0xd4>)
 80092d0:	f000 fd62 	bl	8009d98 <USBH_MSC_GetLUNInfo>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80092da:	8a3b      	ldrh	r3, [r7, #16]
 80092dc:	0a5b      	lsrs	r3, r3, #9
 80092de:	b29b      	uxth	r3, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80092ec:	e006      	b.n	80092fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80092f4:	e002      	b.n	80092fc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80092f6:	2304      	movs	r3, #4
 80092f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 80092fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009300:	4618      	mov	r0, r3
 8009302:	3740      	adds	r7, #64	@ 0x40
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20001de8 	.word	0x20001de8

0800930c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800930c:	b590      	push	{r4, r7, lr}
 800930e:	b089      	sub	sp, #36	@ 0x24
 8009310:	af04      	add	r7, sp, #16
 8009312:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800931a:	7919      	ldrb	r1, [r3, #4]
 800931c:	2350      	movs	r3, #80	@ 0x50
 800931e:	2206      	movs	r2, #6
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 fc50 	bl	800abc6 <USBH_FindInterface>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2bff      	cmp	r3, #255	@ 0xff
 800932e:	d002      	beq.n	8009336 <USBH_MSC_InterfaceInit+0x2a>
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d901      	bls.n	800933a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009336:	2302      	movs	r3, #2
 8009338:	e0ef      	b.n	800951a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 fc25 	bl	800ab8e <USBH_SelectInterface>
 8009344:	4603      	mov	r3, r0
 8009346:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800934e:	2302      	movs	r3, #2
 8009350:	e0e3      	b.n	800951a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009358:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800935c:	f006 fcd6 	bl	800fd0c <malloc>
 8009360:	4603      	mov	r3, r0
 8009362:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009374:	2302      	movs	r3, #2
 8009376:	e0d0      	b.n	800951a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009378:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800937c:	2100      	movs	r1, #0
 800937e:	68b8      	ldr	r0, [r7, #8]
 8009380:	f006 fd82 	bl	800fe88 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	211a      	movs	r1, #26
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	4413      	add	r3, r2
 8009390:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	b25b      	sxtb	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	da16      	bge.n	80093ca <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	211a      	movs	r1, #26
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	4413      	add	r3, r2
 80093a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093ac:	781a      	ldrb	r2, [r3, #0]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	211a      	movs	r1, #26
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	4413      	add	r3, r2
 80093be:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093c2:	881a      	ldrh	r2, [r3, #0]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	815a      	strh	r2, [r3, #10]
 80093c8:	e015      	b.n	80093f6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	211a      	movs	r1, #26
 80093d0:	fb01 f303 	mul.w	r3, r1, r3
 80093d4:	4413      	add	r3, r2
 80093d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093da:	781a      	ldrb	r2, [r3, #0]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	211a      	movs	r1, #26
 80093e6:	fb01 f303 	mul.w	r3, r1, r3
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093f0:	881a      	ldrh	r2, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	211a      	movs	r1, #26
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	4413      	add	r3, r2
 8009402:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	b25b      	sxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	da16      	bge.n	800943c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	211a      	movs	r1, #26
 8009414:	fb01 f303 	mul.w	r3, r1, r3
 8009418:	4413      	add	r3, r2
 800941a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	211a      	movs	r1, #26
 800942a:	fb01 f303 	mul.w	r3, r1, r3
 800942e:	4413      	add	r3, r2
 8009430:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009434:	881a      	ldrh	r2, [r3, #0]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	815a      	strh	r2, [r3, #10]
 800943a:	e015      	b.n	8009468 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	211a      	movs	r1, #26
 8009442:	fb01 f303 	mul.w	r3, r1, r3
 8009446:	4413      	add	r3, r2
 8009448:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800944c:	781a      	ldrb	r2, [r3, #0]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	211a      	movs	r1, #26
 8009458:	fb01 f303 	mul.w	r3, r1, r3
 800945c:	4413      	add	r3, r2
 800945e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009462:	881a      	ldrh	r2, [r3, #0]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2200      	movs	r2, #0
 800946c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2200      	movs	r2, #0
 8009472:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2200      	movs	r2, #0
 8009478:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	799b      	ldrb	r3, [r3, #6]
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f002 fdb6 	bl	800bff2 <USBH_AllocPipe>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	79db      	ldrb	r3, [r3, #7]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f002 fdac 	bl	800bff2 <USBH_AllocPipe>
 800949a:	4603      	mov	r3, r0
 800949c:	461a      	mov	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fdaa 	bl	8009ffc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	7959      	ldrb	r1, [r3, #5]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	7998      	ldrb	r0, [r3, #6]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	8912      	ldrh	r2, [r2, #8]
 80094c0:	9202      	str	r2, [sp, #8]
 80094c2:	2202      	movs	r2, #2
 80094c4:	9201      	str	r2, [sp, #4]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	4623      	mov	r3, r4
 80094ca:	4602      	mov	r2, r0
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f002 fd61 	bl	800bf94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	7919      	ldrb	r1, [r3, #4]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	79d8      	ldrb	r0, [r3, #7]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	8952      	ldrh	r2, [r2, #10]
 80094ea:	9202      	str	r2, [sp, #8]
 80094ec:	2202      	movs	r2, #2
 80094ee:	9201      	str	r2, [sp, #4]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	4623      	mov	r3, r4
 80094f4:	4602      	mov	r2, r0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f002 fd4c 	bl	800bf94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	791b      	ldrb	r3, [r3, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f006 fb47 	bl	800fb98 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	795b      	ldrb	r3, [r3, #5]
 800950e:	2200      	movs	r2, #0
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f006 fb40 	bl	800fb98 <USBH_LL_SetToggle>

  return USBH_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	bd90      	pop	{r4, r7, pc}

08009522 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	795b      	ldrb	r3, [r3, #5]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00e      	beq.n	800955a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	795b      	ldrb	r3, [r3, #5]
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f002 fd45 	bl	800bfd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	795b      	ldrb	r3, [r3, #5]
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f002 fd70 	bl	800c034 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	791b      	ldrb	r3, [r3, #4]
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f002 fd32 	bl	800bfd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	791b      	ldrb	r3, [r3, #4]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f002 fd5d 	bl	800c034 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	4618      	mov	r0, r3
 8009596:	f006 fbc1 	bl	800fd1c <free>
    phost->pActiveClass->pData = 0U;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095a0:	2200      	movs	r2, #0
 80095a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80095c0:	2301      	movs	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	7b9b      	ldrb	r3, [r3, #14]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d041      	beq.n	8009650 <USBH_MSC_ClassRequest+0xa2>
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	dc4b      	bgt.n	8009668 <USBH_MSC_ClassRequest+0xba>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <USBH_MSC_ClassRequest+0x2a>
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d147      	bne.n	8009668 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fcee 	bl	8009fbe <USBH_MSC_BOT_REQ_GetMaxLUN>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d104      	bne.n	80095f6 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d137      	bne.n	800966c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d804      	bhi.n	800960e <USBH_MSC_ClassRequest+0x60>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	3301      	adds	r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	e000      	b.n	8009610 <USBH_MSC_ClassRequest+0x62>
 800960e:	2202      	movs	r2, #2
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009614:	2300      	movs	r3, #0
 8009616:	73bb      	strb	r3, [r7, #14]
 8009618:	e014      	b.n	8009644 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	2134      	movs	r1, #52	@ 0x34
 8009620:	fb01 f303 	mul.w	r3, r1, r3
 8009624:	4413      	add	r3, r2
 8009626:	3392      	adds	r3, #146	@ 0x92
 8009628:	2202      	movs	r2, #2
 800962a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	2134      	movs	r1, #52	@ 0x34
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	33c1      	adds	r3, #193	@ 0xc1
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	3301      	adds	r3, #1
 8009642:	73bb      	strb	r3, [r7, #14]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	7bba      	ldrb	r2, [r7, #14]
 800964a:	429a      	cmp	r2, r3
 800964c:	d3e5      	bcc.n	800961a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800964e:	e00d      	b.n	800966c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f002 f873 	bl	800b73e <USBH_ClrFeature>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d108      	bne.n	8009670 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	7bda      	ldrb	r2, [r3, #15]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009666:	e003      	b.n	8009670 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009668:	bf00      	nop
 800966a:	e002      	b.n	8009672 <USBH_MSC_ClassRequest+0xc4>
      break;
 800966c:	bf00      	nop
 800966e:	e000      	b.n	8009672 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009670:	bf00      	nop
  }

  return status;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800968e:	2301      	movs	r3, #1
 8009690:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009692:	2301      	movs	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009696:	2301      	movs	r3, #1
 8009698:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	7b1b      	ldrb	r3, [r3, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <USBH_MSC_Process+0x2e>
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	f000 826f 	beq.w	8009b86 <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80096a8:	e270      	b.n	8009b8c <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	7812      	ldrb	r2, [r2, #0]
 80096b4:	4293      	cmp	r3, r2
 80096b6:	f080 824e 	bcs.w	8009b56 <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80096c0:	4619      	mov	r1, r3
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	2334      	movs	r3, #52	@ 0x34
 80096c6:	fb01 f303 	mul.w	r3, r1, r3
 80096ca:	4413      	add	r3, r2
 80096cc:	3391      	adds	r3, #145	@ 0x91
 80096ce:	2201      	movs	r2, #1
 80096d0:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80096d8:	4619      	mov	r1, r3
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	2334      	movs	r3, #52	@ 0x34
 80096de:	fb01 f303 	mul.w	r3, r1, r3
 80096e2:	4413      	add	r3, r2
 80096e4:	3390      	adds	r3, #144	@ 0x90
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	f200 8242 	bhi.w	8009b72 <USBH_MSC_Process+0x4f6>
 80096ee:	a201      	add	r2, pc, #4	@ (adr r2, 80096f4 <USBH_MSC_Process+0x78>)
 80096f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f4:	08009719 	.word	0x08009719
 80096f8:	08009b73 	.word	0x08009b73
 80096fc:	080097e1 	.word	0x080097e1
 8009700:	08009965 	.word	0x08009965
 8009704:	0800973f 	.word	0x0800973f
 8009708:	08009a31 	.word	0x08009a31
 800970c:	08009b73 	.word	0x08009b73
 8009710:	08009b73 	.word	0x08009b73
 8009714:	08009b45 	.word	0x08009b45
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800971e:	4619      	mov	r1, r3
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	2334      	movs	r3, #52	@ 0x34
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	4413      	add	r3, r2
 800972a:	3390      	adds	r3, #144	@ 0x90
 800972c:	2204      	movs	r2, #4
 800972e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 800973c:	e222      	b.n	8009b84 <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009744:	b2d9      	uxtb	r1, r3
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800974c:	461a      	mov	r2, r3
 800974e:	2334      	movs	r3, #52	@ 0x34
 8009750:	fb02 f303 	mul.w	r3, r2, r3
 8009754:	3398      	adds	r3, #152	@ 0x98
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	4413      	add	r3, r2
 800975a:	3307      	adds	r3, #7
 800975c:	461a      	mov	r2, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 ff69 	bl	800a636 <USBH_MSC_SCSI_Inquiry>
 8009764:	4603      	mov	r3, r0
 8009766:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009774:	4619      	mov	r1, r3
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	2334      	movs	r3, #52	@ 0x34
 800977a:	fb01 f303 	mul.w	r3, r1, r3
 800977e:	4413      	add	r3, r2
 8009780:	3390      	adds	r3, #144	@ 0x90
 8009782:	2202      	movs	r2, #2
 8009784:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d10c      	bne.n	80097a6 <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009792:	4619      	mov	r1, r3
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	2334      	movs	r3, #52	@ 0x34
 8009798:	fb01 f303 	mul.w	r3, r1, r3
 800979c:	4413      	add	r3, r2
 800979e:	3390      	adds	r3, #144	@ 0x90
 80097a0:	2205      	movs	r2, #5
 80097a2:	701a      	strb	r2, [r3, #0]
            break;
 80097a4:	e1e7      	b.n	8009b76 <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	f040 81e4 	bne.w	8009b76 <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80097b4:	4619      	mov	r1, r3
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	2334      	movs	r3, #52	@ 0x34
 80097ba:	fb01 f303 	mul.w	r3, r1, r3
 80097be:	4413      	add	r3, r2
 80097c0:	3390      	adds	r3, #144	@ 0x90
 80097c2:	2201      	movs	r2, #1
 80097c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80097cc:	4619      	mov	r1, r3
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	2334      	movs	r3, #52	@ 0x34
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	3391      	adds	r3, #145	@ 0x91
 80097da:	2202      	movs	r2, #2
 80097dc:	701a      	strb	r2, [r3, #0]
            break;
 80097de:	e1ca      	b.n	8009b76 <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fe66 	bl	800a4bc <USBH_MSC_SCSI_TestUnitReady>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d149      	bne.n	800988e <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009800:	4619      	mov	r1, r3
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	2334      	movs	r3, #52	@ 0x34
 8009806:	fb01 f303 	mul.w	r3, r1, r3
 800980a:	4413      	add	r3, r2
 800980c:	3392      	adds	r3, #146	@ 0x92
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00c      	beq.n	800982e <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800981a:	4619      	mov	r1, r3
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	2334      	movs	r3, #52	@ 0x34
 8009820:	fb01 f303 	mul.w	r3, r1, r3
 8009824:	4413      	add	r3, r2
 8009826:	33c1      	adds	r3, #193	@ 0xc1
 8009828:	2201      	movs	r2, #1
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e00b      	b.n	8009846 <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009834:	4619      	mov	r1, r3
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	2334      	movs	r3, #52	@ 0x34
 800983a:	fb01 f303 	mul.w	r3, r1, r3
 800983e:	4413      	add	r3, r2
 8009840:	33c1      	adds	r3, #193	@ 0xc1
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800984c:	4619      	mov	r1, r3
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	2334      	movs	r3, #52	@ 0x34
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	3390      	adds	r3, #144	@ 0x90
 800985a:	2203      	movs	r2, #3
 800985c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009864:	4619      	mov	r1, r3
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	2334      	movs	r3, #52	@ 0x34
 800986a:	fb01 f303 	mul.w	r3, r1, r3
 800986e:	4413      	add	r3, r2
 8009870:	3391      	adds	r3, #145	@ 0x91
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800987c:	4619      	mov	r1, r3
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	2334      	movs	r3, #52	@ 0x34
 8009882:	fb01 f303 	mul.w	r3, r1, r3
 8009886:	4413      	add	r3, r2
 8009888:	3392      	adds	r3, #146	@ 0x92
 800988a:	2200      	movs	r2, #0
 800988c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800988e:	7bbb      	ldrb	r3, [r7, #14]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d14a      	bne.n	800992a <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800989a:	4619      	mov	r1, r3
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	2334      	movs	r3, #52	@ 0x34
 80098a0:	fb01 f303 	mul.w	r3, r1, r3
 80098a4:	4413      	add	r3, r2
 80098a6:	3392      	adds	r3, #146	@ 0x92
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d00c      	beq.n	80098c8 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80098b4:	4619      	mov	r1, r3
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	2334      	movs	r3, #52	@ 0x34
 80098ba:	fb01 f303 	mul.w	r3, r1, r3
 80098be:	4413      	add	r3, r2
 80098c0:	33c1      	adds	r3, #193	@ 0xc1
 80098c2:	2201      	movs	r2, #1
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	e00b      	b.n	80098e0 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80098ce:	4619      	mov	r1, r3
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	2334      	movs	r3, #52	@ 0x34
 80098d4:	fb01 f303 	mul.w	r3, r1, r3
 80098d8:	4413      	add	r3, r2
 80098da:	33c1      	adds	r3, #193	@ 0xc1
 80098dc:	2200      	movs	r2, #0
 80098de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80098e6:	4619      	mov	r1, r3
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	2334      	movs	r3, #52	@ 0x34
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	4413      	add	r3, r2
 80098f2:	3390      	adds	r3, #144	@ 0x90
 80098f4:	2205      	movs	r2, #5
 80098f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80098fe:	4619      	mov	r1, r3
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	2334      	movs	r3, #52	@ 0x34
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	4413      	add	r3, r2
 800990a:	3391      	adds	r3, #145	@ 0x91
 800990c:	2201      	movs	r2, #1
 800990e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009916:	4619      	mov	r1, r3
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	2334      	movs	r3, #52	@ 0x34
 800991c:	fb01 f303 	mul.w	r3, r1, r3
 8009920:	4413      	add	r3, r2
 8009922:	3392      	adds	r3, #146	@ 0x92
 8009924:	2202      	movs	r2, #2
 8009926:	701a      	strb	r2, [r3, #0]
            break;
 8009928:	e127      	b.n	8009b7a <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b04      	cmp	r3, #4
 800992e:	f040 8124 	bne.w	8009b7a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009938:	4619      	mov	r1, r3
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	2334      	movs	r3, #52	@ 0x34
 800993e:	fb01 f303 	mul.w	r3, r1, r3
 8009942:	4413      	add	r3, r2
 8009944:	3390      	adds	r3, #144	@ 0x90
 8009946:	2201      	movs	r2, #1
 8009948:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009950:	4619      	mov	r1, r3
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	2334      	movs	r3, #52	@ 0x34
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	4413      	add	r3, r2
 800995c:	3391      	adds	r3, #145	@ 0x91
 800995e:	2202      	movs	r2, #2
 8009960:	701a      	strb	r2, [r3, #0]
            break;
 8009962:	e10a      	b.n	8009b7a <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800996a:	b2d9      	uxtb	r1, r3
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009972:	461a      	mov	r2, r3
 8009974:	2334      	movs	r3, #52	@ 0x34
 8009976:	fb02 f303 	mul.w	r3, r2, r3
 800997a:	3390      	adds	r3, #144	@ 0x90
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	4413      	add	r3, r2
 8009980:	3304      	adds	r3, #4
 8009982:	461a      	mov	r2, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fddc 	bl	800a542 <USBH_MSC_SCSI_ReadCapacity>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d120      	bne.n	80099d6 <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800999a:	4619      	mov	r1, r3
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	2334      	movs	r3, #52	@ 0x34
 80099a0:	fb01 f303 	mul.w	r3, r1, r3
 80099a4:	4413      	add	r3, r2
 80099a6:	3390      	adds	r3, #144	@ 0x90
 80099a8:	2201      	movs	r2, #1
 80099aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099b2:	4619      	mov	r1, r3
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	2334      	movs	r3, #52	@ 0x34
 80099b8:	fb01 f303 	mul.w	r3, r1, r3
 80099bc:	4413      	add	r3, r2
 80099be:	3391      	adds	r3, #145	@ 0x91
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099ca:	3301      	adds	r3, #1
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80099d4:	e0d3      	b.n	8009b7e <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d10c      	bne.n	80099f6 <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099e2:	4619      	mov	r1, r3
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	2334      	movs	r3, #52	@ 0x34
 80099e8:	fb01 f303 	mul.w	r3, r1, r3
 80099ec:	4413      	add	r3, r2
 80099ee:	3390      	adds	r3, #144	@ 0x90
 80099f0:	2205      	movs	r2, #5
 80099f2:	701a      	strb	r2, [r3, #0]
            break;
 80099f4:	e0c3      	b.n	8009b7e <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	f040 80c0 	bne.w	8009b7e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a04:	4619      	mov	r1, r3
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	2334      	movs	r3, #52	@ 0x34
 8009a0a:	fb01 f303 	mul.w	r3, r1, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	3390      	adds	r3, #144	@ 0x90
 8009a12:	2201      	movs	r2, #1
 8009a14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	2334      	movs	r3, #52	@ 0x34
 8009a22:	fb01 f303 	mul.w	r3, r1, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	3391      	adds	r3, #145	@ 0x91
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	701a      	strb	r2, [r3, #0]
            break;
 8009a2e:	e0a6      	b.n	8009b7e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a36:	b2d9      	uxtb	r1, r3
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a3e:	461a      	mov	r2, r3
 8009a40:	2334      	movs	r3, #52	@ 0x34
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
 8009a46:	3398      	adds	r3, #152	@ 0x98
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fe95 	bl	800a780 <USBH_MSC_SCSI_RequestSense>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d145      	bne.n	8009aec <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a66:	4619      	mov	r1, r3
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	2334      	movs	r3, #52	@ 0x34
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	4413      	add	r3, r2
 8009a72:	339c      	adds	r3, #156	@ 0x9c
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	2b06      	cmp	r3, #6
 8009a78:	d00c      	beq.n	8009a94 <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a80:	4619      	mov	r1, r3
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	2334      	movs	r3, #52	@ 0x34
 8009a86:	fb01 f303 	mul.w	r3, r1, r3
 8009a8a:	4413      	add	r3, r2
 8009a8c:	339c      	adds	r3, #156	@ 0x9c
 8009a8e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d117      	bne.n	8009ac4 <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d80c      	bhi.n	8009ac4 <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	2334      	movs	r3, #52	@ 0x34
 8009ab6:	fb01 f303 	mul.w	r3, r1, r3
 8009aba:	4413      	add	r3, r2
 8009abc:	3390      	adds	r3, #144	@ 0x90
 8009abe:	2202      	movs	r2, #2
 8009ac0:	701a      	strb	r2, [r3, #0]
                  break;
 8009ac2:	e05f      	b.n	8009b84 <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009aca:	4619      	mov	r1, r3
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	2334      	movs	r3, #52	@ 0x34
 8009ad0:	fb01 f303 	mul.w	r3, r1, r3
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3390      	adds	r3, #144	@ 0x90
 8009ad8:	2201      	movs	r2, #1
 8009ada:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d10c      	bne.n	8009b0c <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009af8:	4619      	mov	r1, r3
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	2334      	movs	r3, #52	@ 0x34
 8009afe:	fb01 f303 	mul.w	r3, r1, r3
 8009b02:	4413      	add	r3, r2
 8009b04:	3390      	adds	r3, #144	@ 0x90
 8009b06:	2208      	movs	r2, #8
 8009b08:	701a      	strb	r2, [r3, #0]
            break;
 8009b0a:	e03a      	b.n	8009b82 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d137      	bne.n	8009b82 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b18:	4619      	mov	r1, r3
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	2334      	movs	r3, #52	@ 0x34
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	3390      	adds	r3, #144	@ 0x90
 8009b26:	2201      	movs	r2, #1
 8009b28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b30:	4619      	mov	r1, r3
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	2334      	movs	r3, #52	@ 0x34
 8009b36:	fb01 f303 	mul.w	r3, r1, r3
 8009b3a:	4413      	add	r3, r2
 8009b3c:	3391      	adds	r3, #145	@ 0x91
 8009b3e:	2202      	movs	r2, #2
 8009b40:	701a      	strb	r2, [r3, #0]
            break;
 8009b42:	e01e      	b.n	8009b82 <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009b54:	e016      	b.n	8009b84 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2201      	movs	r2, #1
 8009b62:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b6a:	2102      	movs	r1, #2
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	4798      	blx	r3
      break;
 8009b70:	e00c      	b.n	8009b8c <USBH_MSC_Process+0x510>
            break;
 8009b72:	bf00      	nop
 8009b74:	e00a      	b.n	8009b8c <USBH_MSC_Process+0x510>
            break;
 8009b76:	bf00      	nop
 8009b78:	e008      	b.n	8009b8c <USBH_MSC_Process+0x510>
            break;
 8009b7a:	bf00      	nop
 8009b7c:	e006      	b.n	8009b8c <USBH_MSC_Process+0x510>
            break;
 8009b7e:	bf00      	nop
 8009b80:	e004      	b.n	8009b8c <USBH_MSC_Process+0x510>
            break;
 8009b82:	bf00      	nop
      break;
 8009b84:	e002      	b.n	8009b8c <USBH_MSC_Process+0x510>
      error = USBH_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	75fb      	strb	r3, [r7, #23]
      break;
 8009b8a:	bf00      	nop
  }
  return error;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop

08009b98 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b088      	sub	sp, #32
 8009bb2:	af02      	add	r7, sp, #8
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	2134      	movs	r1, #52	@ 0x34
 8009bd2:	fb01 f303 	mul.w	r3, r1, r3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	3390      	adds	r3, #144	@ 0x90
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b07      	cmp	r3, #7
 8009bde:	d03c      	beq.n	8009c5a <USBH_MSC_RdWrProcess+0xac>
 8009be0:	2b07      	cmp	r3, #7
 8009be2:	f300 80a7 	bgt.w	8009d34 <USBH_MSC_RdWrProcess+0x186>
 8009be6:	2b05      	cmp	r3, #5
 8009be8:	d06c      	beq.n	8009cc4 <USBH_MSC_RdWrProcess+0x116>
 8009bea:	2b06      	cmp	r3, #6
 8009bec:	f040 80a2 	bne.w	8009d34 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009bf0:	78f9      	ldrb	r1, [r7, #3]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fea4 	bl	800a948 <USBH_MSC_SCSI_Read>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10b      	bne.n	8009c22 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	2134      	movs	r1, #52	@ 0x34
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	4413      	add	r3, r2
 8009c16:	3390      	adds	r3, #144	@ 0x90
 8009c18:	2201      	movs	r2, #1
 8009c1a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c20:	e08a      	b.n	8009d38 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d109      	bne.n	8009c3c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	2134      	movs	r1, #52	@ 0x34
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	3390      	adds	r3, #144	@ 0x90
 8009c36:	2205      	movs	r2, #5
 8009c38:	701a      	strb	r2, [r3, #0]
      break;
 8009c3a:	e07d      	b.n	8009d38 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
 8009c3e:	2b04      	cmp	r3, #4
 8009c40:	d17a      	bne.n	8009d38 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009c42:	78fb      	ldrb	r3, [r7, #3]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	2134      	movs	r1, #52	@ 0x34
 8009c48:	fb01 f303 	mul.w	r3, r1, r3
 8009c4c:	4413      	add	r3, r2
 8009c4e:	3390      	adds	r3, #144	@ 0x90
 8009c50:	2208      	movs	r2, #8
 8009c52:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009c54:	2302      	movs	r3, #2
 8009c56:	75fb      	strb	r3, [r7, #23]
      break;
 8009c58:	e06e      	b.n	8009d38 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009c5a:	78f9      	ldrb	r1, [r7, #3]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	2200      	movs	r2, #0
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fe04 	bl	800a872 <USBH_MSC_SCSI_Write>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	2134      	movs	r1, #52	@ 0x34
 8009c7a:	fb01 f303 	mul.w	r3, r1, r3
 8009c7e:	4413      	add	r3, r2
 8009c80:	3390      	adds	r3, #144	@ 0x90
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c8a:	e057      	b.n	8009d3c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d109      	bne.n	8009ca6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009c92:	78fb      	ldrb	r3, [r7, #3]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	2134      	movs	r1, #52	@ 0x34
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3390      	adds	r3, #144	@ 0x90
 8009ca0:	2205      	movs	r2, #5
 8009ca2:	701a      	strb	r2, [r3, #0]
      break;
 8009ca4:	e04a      	b.n	8009d3c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d147      	bne.n	8009d3c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	2134      	movs	r1, #52	@ 0x34
 8009cb2:	fb01 f303 	mul.w	r3, r1, r3
 8009cb6:	4413      	add	r3, r2
 8009cb8:	3390      	adds	r3, #144	@ 0x90
 8009cba:	2208      	movs	r2, #8
 8009cbc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc2:	e03b      	b.n	8009d3c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	2234      	movs	r2, #52	@ 0x34
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
 8009ccc:	3398      	adds	r3, #152	@ 0x98
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	1d1a      	adds	r2, r3, #4
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fd51 	bl	800a780 <USBH_MSC_SCSI_RequestSense>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d113      	bne.n	8009d10 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009ce8:	78fb      	ldrb	r3, [r7, #3]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	2134      	movs	r1, #52	@ 0x34
 8009cee:	fb01 f303 	mul.w	r3, r1, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3390      	adds	r3, #144	@ 0x90
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	2134      	movs	r1, #52	@ 0x34
 8009d00:	fb01 f303 	mul.w	r3, r1, r3
 8009d04:	4413      	add	r3, r2
 8009d06:	3391      	adds	r3, #145	@ 0x91
 8009d08:	2202      	movs	r2, #2
 8009d0a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d014      	beq.n	8009d40 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d111      	bne.n	8009d40 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	2134      	movs	r1, #52	@ 0x34
 8009d22:	fb01 f303 	mul.w	r3, r1, r3
 8009d26:	4413      	add	r3, r2
 8009d28:	3390      	adds	r3, #144	@ 0x90
 8009d2a:	2208      	movs	r2, #8
 8009d2c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d32:	e005      	b.n	8009d40 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009d34:	bf00      	nop
 8009d36:	e004      	b.n	8009d42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009d38:	bf00      	nop
 8009d3a:	e002      	b.n	8009d42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009d3c:	bf00      	nop
 8009d3e:	e000      	b.n	8009d42 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009d40:	bf00      	nop

  }
  return error;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b0b      	cmp	r3, #11
 8009d6a:	d10c      	bne.n	8009d86 <USBH_MSC_UnitIsReady+0x3a>
 8009d6c:	78fb      	ldrb	r3, [r7, #3]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	2134      	movs	r1, #52	@ 0x34
 8009d72:	fb01 f303 	mul.w	r3, r1, r3
 8009d76:	4413      	add	r3, r2
 8009d78:	3391      	adds	r3, #145	@ 0x91
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d102      	bne.n	8009d86 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009d80:	2301      	movs	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
 8009d84:	e001      	b.n	8009d8a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	460b      	mov	r3, r1
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b0b      	cmp	r3, #11
 8009db8:	d10d      	bne.n	8009dd6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	2234      	movs	r2, #52	@ 0x34
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
 8009dc2:	3390      	adds	r3, #144	@ 0x90
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	2234      	movs	r2, #52	@ 0x34
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f006 f8c9 	bl	800ff64 <memcpy>
    return USBH_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e000      	b.n	8009dd8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009dd6:	2302      	movs	r3, #2
  }
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	460b      	mov	r3, r1
 8009dee:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00e      	beq.n	8009e24 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009e0c:	2b0b      	cmp	r3, #11
 8009e0e:	d109      	bne.n	8009e24 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	2134      	movs	r1, #52	@ 0x34
 8009e16:	fb01 f303 	mul.w	r3, r1, r3
 8009e1a:	4413      	add	r3, r2
 8009e1c:	3390      	adds	r3, #144	@ 0x90
 8009e1e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d001      	beq.n	8009e28 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009e24:	2302      	movs	r3, #2
 8009e26:	e040      	b.n	8009eaa <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2206      	movs	r2, #6
 8009e2c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	2134      	movs	r1, #52	@ 0x34
 8009e34:	fb01 f303 	mul.w	r3, r1, r3
 8009e38:	4413      	add	r3, r2
 8009e3a:	3390      	adds	r3, #144	@ 0x90
 8009e3c:	2206      	movs	r2, #6
 8009e3e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009e4a:	7af9      	ldrb	r1, [r7, #11]
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fd77 	bl	800a948 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e60:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e62:	e016      	b.n	8009e92 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	1ad2      	subs	r2, r2, r3
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009e74:	fb01 f303 	mul.w	r3, r1, r3
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d805      	bhi.n	8009e88 <USBH_MSC_Read+0xa8>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d104      	bne.n	8009e92 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	e00b      	b.n	8009eaa <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	4619      	mov	r1, r3
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7ff fe89 	bl	8009bae <USBH_MSC_RdWrProcess>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d0e0      	beq.n	8009e64 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b088      	sub	sp, #32
 8009eb6:	af02      	add	r7, sp, #8
 8009eb8:	60f8      	str	r0, [r7, #12]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00e      	beq.n	8009ef6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009ede:	2b0b      	cmp	r3, #11
 8009ee0:	d109      	bne.n	8009ef6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009ee2:	7afb      	ldrb	r3, [r7, #11]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	2134      	movs	r1, #52	@ 0x34
 8009ee8:	fb01 f303 	mul.w	r3, r1, r3
 8009eec:	4413      	add	r3, r2
 8009eee:	3390      	adds	r3, #144	@ 0x90
 8009ef0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d001      	beq.n	8009efa <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e040      	b.n	8009f7c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2207      	movs	r2, #7
 8009efe:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	2134      	movs	r1, #52	@ 0x34
 8009f06:	fb01 f303 	mul.w	r3, r1, r3
 8009f0a:	4413      	add	r3, r2
 8009f0c:	3390      	adds	r3, #144	@ 0x90
 8009f0e:	2207      	movs	r2, #7
 8009f10:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009f12:	7afb      	ldrb	r3, [r7, #11]
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009f1c:	7af9      	ldrb	r1, [r7, #11]
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 fca3 	bl	800a872 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f32:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009f34:	e016      	b.n	8009f64 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009f46:	fb01 f303 	mul.w	r3, r1, r3
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d805      	bhi.n	8009f5a <USBH_MSC_Write+0xa8>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009f60:	2302      	movs	r3, #2
 8009f62:	e00b      	b.n	8009f7c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	4619      	mov	r1, r3
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7ff fe20 	bl	8009bae <USBH_MSC_RdWrProcess>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d0e0      	beq.n	8009f36 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	2201      	movs	r2, #1
 8009f78:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2221      	movs	r2, #33	@ 0x21
 8009f90:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	22ff      	movs	r2, #255	@ 0xff
 8009f96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009faa:	2200      	movs	r2, #0
 8009fac:	2100      	movs	r1, #0
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fd9e 	bl	800baf0 <USBH_CtlReq>
 8009fb4:	4603      	mov	r3, r0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	22a1      	movs	r2, #161	@ 0xa1
 8009fcc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	22fe      	movs	r2, #254	@ 0xfe
 8009fd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 fd80 	bl	800baf0 <USBH_CtlReq>
 8009ff0:	4603      	mov	r3, r0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4a09      	ldr	r2, [pc, #36]	@ (800a038 <USBH_MSC_BOT_Init+0x3c>)
 800a012:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	4a09      	ldr	r2, [pc, #36]	@ (800a03c <USBH_MSC_BOT_Init+0x40>)
 800a018:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	43425355 	.word	0x43425355
 800a03c:	20304050 	.word	0x20304050

0800a040 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af02      	add	r7, sp, #8
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a04c:	2301      	movs	r3, #1
 800a04e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a050:	2301      	movs	r3, #1
 800a052:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a054:	2301      	movs	r3, #1
 800a056:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a058:	2300      	movs	r3, #0
 800a05a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a070:	3b01      	subs	r3, #1
 800a072:	2b0a      	cmp	r3, #10
 800a074:	f200 819e 	bhi.w	800a3b4 <USBH_MSC_BOT_Process+0x374>
 800a078:	a201      	add	r2, pc, #4	@ (adr r2, 800a080 <USBH_MSC_BOT_Process+0x40>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a0ad 	.word	0x0800a0ad
 800a084:	0800a0d5 	.word	0x0800a0d5
 800a088:	0800a13f 	.word	0x0800a13f
 800a08c:	0800a15d 	.word	0x0800a15d
 800a090:	0800a1e1 	.word	0x0800a1e1
 800a094:	0800a203 	.word	0x0800a203
 800a098:	0800a29b 	.word	0x0800a29b
 800a09c:	0800a2b7 	.word	0x0800a2b7
 800a0a0:	0800a309 	.word	0x0800a309
 800a0a4:	0800a339 	.word	0x0800a339
 800a0a8:	0800a39b 	.word	0x0800a39b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	795b      	ldrb	r3, [r3, #5]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	9200      	str	r2, [sp, #0]
 800a0ca:	221f      	movs	r2, #31
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 ff1e 	bl	800bf0e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a0d2:	e17e      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	795b      	ldrb	r3, [r3, #5]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f005 fd32 	bl	800fb44 <USBH_LL_GetURBState>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a0e4:	7d3b      	ldrb	r3, [r7, #20]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d118      	bne.n	800a11c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00f      	beq.n	800a112 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a0f8:	b25b      	sxtb	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da04      	bge.n	800a108 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2203      	movs	r2, #3
 800a102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a106:	e157      	b.n	800a3b8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	2205      	movs	r2, #5
 800a10c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a110:	e152      	b.n	800a3b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2207      	movs	r2, #7
 800a116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a11a:	e14d      	b.n	800a3b8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a11c:	7d3b      	ldrb	r3, [r7, #20]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d104      	bne.n	800a12c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a12a:	e145      	b.n	800a3b8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a12c:	7d3b      	ldrb	r3, [r7, #20]
 800a12e:	2b05      	cmp	r3, #5
 800a130:	f040 8142 	bne.w	800a3b8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	220a      	movs	r2, #10
 800a138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a13c:	e13c      	b.n	800a3b8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	895a      	ldrh	r2, [r3, #10]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	791b      	ldrb	r3, [r3, #4]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 ff03 	bl	800bf58 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	2204      	movs	r2, #4
 800a156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800a15a:	e13a      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	791b      	ldrb	r3, [r3, #4]
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f005 fcee 	bl	800fb44 <USBH_LL_GetURBState>
 800a168:	4603      	mov	r3, r0
 800a16a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a16c:	7d3b      	ldrb	r3, [r7, #20]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d12d      	bne.n	800a1ce <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	8952      	ldrh	r2, [r2, #10]
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d910      	bls.n	800a1a0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	8952      	ldrh	r2, [r2, #10]
 800a188:	441a      	add	r2, r3
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	8952      	ldrh	r2, [r2, #10]
 800a198:	1a9a      	subs	r2, r3, r2
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a19e:	e002      	b.n	800a1a6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	895a      	ldrh	r2, [r3, #10]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	791b      	ldrb	r3, [r3, #4]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fecb 	bl	800bf58 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a1c2:	e0fb      	b.n	800a3bc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	2207      	movs	r2, #7
 800a1c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a1cc:	e0f6      	b.n	800a3bc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a1ce:	7d3b      	ldrb	r3, [r7, #20]
 800a1d0:	2b05      	cmp	r3, #5
 800a1d2:	f040 80f3 	bne.w	800a3bc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2209      	movs	r2, #9
 800a1da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a1de:	e0ed      	b.n	800a3bc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	891a      	ldrh	r2, [r3, #8]
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	795b      	ldrb	r3, [r3, #5]
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	9000      	str	r0, [sp, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 fe8b 	bl	800bf0e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	2206      	movs	r2, #6
 800a1fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a200:	e0e7      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	795b      	ldrb	r3, [r3, #5]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f005 fc9b 	bl	800fb44 <USBH_LL_GetURBState>
 800a20e:	4603      	mov	r3, r0
 800a210:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a212:	7d3b      	ldrb	r3, [r7, #20]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d12f      	bne.n	800a278 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	8912      	ldrh	r2, [r2, #8]
 800a220:	4293      	cmp	r3, r2
 800a222:	d910      	bls.n	800a246 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	8912      	ldrh	r2, [r2, #8]
 800a22e:	441a      	add	r2, r3
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	8912      	ldrh	r2, [r2, #8]
 800a23e:	1a9a      	subs	r2, r3, r2
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a244:	e002      	b.n	800a24c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2200      	movs	r2, #0
 800a24a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00c      	beq.n	800a26e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	891a      	ldrh	r2, [r3, #8]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	795b      	ldrb	r3, [r3, #5]
 800a262:	2001      	movs	r0, #1
 800a264:	9000      	str	r0, [sp, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 fe51 	bl	800bf0e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a26c:	e0a8      	b.n	800a3c0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2207      	movs	r2, #7
 800a272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a276:	e0a3      	b.n	800a3c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a278:	7d3b      	ldrb	r3, [r7, #20]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d104      	bne.n	800a288 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2205      	movs	r2, #5
 800a282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a286:	e09b      	b.n	800a3c0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a288:	7d3b      	ldrb	r3, [r7, #20]
 800a28a:	2b05      	cmp	r3, #5
 800a28c:	f040 8098 	bne.w	800a3c0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	220a      	movs	r2, #10
 800a294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a298:	e092      	b.n	800a3c0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	791b      	ldrb	r3, [r3, #4]
 800a2a4:	220d      	movs	r2, #13
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 fe56 	bl	800bf58 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2208      	movs	r2, #8
 800a2b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a2b4:	e08d      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	791b      	ldrb	r3, [r3, #4]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f005 fc41 	bl	800fb44 <USBH_LL_GetURBState>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a2c6:	7d3b      	ldrb	r3, [r7, #20]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d115      	bne.n	800a2f8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f8a9 	bl	800a434 <USBH_MSC_DecodeCSW>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a2e6:	7d7b      	ldrb	r3, [r7, #21]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a2f0:	e068      	b.n	800a3c4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f6:	e065      	b.n	800a3c4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a2f8:	7d3b      	ldrb	r3, [r7, #20]
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d162      	bne.n	800a3c4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2209      	movs	r2, #9
 800a302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a306:	e05d      	b.n	800a3c4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	2200      	movs	r2, #0
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f864 	bl	800a3dc <USBH_MSC_BOT_Abort>
 800a314:	4603      	mov	r3, r0
 800a316:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a318:	7dbb      	ldrb	r3, [r7, #22]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d104      	bne.n	800a328 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2207      	movs	r2, #7
 800a322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a326:	e04f      	b.n	800a3c8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a328:	7dbb      	ldrb	r3, [r7, #22]
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d14c      	bne.n	800a3c8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	220b      	movs	r2, #11
 800a332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a336:	e047      	b.n	800a3c8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	2201      	movs	r2, #1
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f84c 	bl	800a3dc <USBH_MSC_BOT_Abort>
 800a344:	4603      	mov	r3, r0
 800a346:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a348:	7dbb      	ldrb	r3, [r7, #22]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d11d      	bne.n	800a38a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	795b      	ldrb	r3, [r3, #5]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f005 fc52 	bl	800fbfe <USBH_LL_GetToggle>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	7959      	ldrb	r1, [r3, #5]
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	f1c3 0301 	rsb	r3, r3, #1
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f005 fc13 	bl	800fb98 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	791b      	ldrb	r3, [r3, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f005 fc0c 	bl	800fb98 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	2209      	movs	r2, #9
 800a384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a388:	e020      	b.n	800a3cc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a38a:	7dbb      	ldrb	r3, [r7, #22]
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d11d      	bne.n	800a3cc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	220b      	movs	r2, #11
 800a394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a398:	e018      	b.n	800a3cc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff fdf2 	bl	8009f84 <USBH_MSC_BOT_REQ_Reset>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d112      	bne.n	800a3d0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800a3b2:	e00d      	b.n	800a3d0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a3b4:	bf00      	nop
 800a3b6:	e00c      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e00a      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a3bc:	bf00      	nop
 800a3be:	e008      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a3c0:	bf00      	nop
 800a3c2:	e006      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a3c4:	bf00      	nop
 800a3c6:	e004      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a3c8:	bf00      	nop
 800a3ca:	e002      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a3cc:	bf00      	nop
 800a3ce:	e000      	b.n	800a3d2 <USBH_MSC_BOT_Process+0x392>
      break;
 800a3d0:	bf00      	nop
  }
  return status;
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a3fa:	78bb      	ldrb	r3, [r7, #2]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <USBH_MSC_BOT_Abort+0x2a>
 800a400:	2b01      	cmp	r3, #1
 800a402:	d009      	beq.n	800a418 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a404:	e011      	b.n	800a42a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	79db      	ldrb	r3, [r3, #7]
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 f996 	bl	800b73e <USBH_ClrFeature>
 800a412:	4603      	mov	r3, r0
 800a414:	73fb      	strb	r3, [r7, #15]
      break;
 800a416:	e008      	b.n	800a42a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	799b      	ldrb	r3, [r3, #6]
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f001 f98d 	bl	800b73e <USBH_ClrFeature>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]
      break;
 800a428:	bf00      	nop
  }
  return status;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a446:	2301      	movs	r3, #1
 800a448:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	791b      	ldrb	r3, [r3, #4]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f005 fae5 	bl	800fa20 <USBH_LL_GetLastXferSize>
 800a456:	4603      	mov	r3, r0
 800a458:	2b0d      	cmp	r3, #13
 800a45a:	d002      	beq.n	800a462 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a45c:	2302      	movs	r3, #2
 800a45e:	73fb      	strb	r3, [r7, #15]
 800a460:	e024      	b.n	800a4ac <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a466:	4a14      	ldr	r2, [pc, #80]	@ (800a4b8 <USBH_MSC_DecodeCSW+0x84>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d11d      	bne.n	800a4a8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a474:	429a      	cmp	r2, r3
 800a476:	d119      	bne.n	800a4ac <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d102      	bne.n	800a488 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
 800a486:	e011      	b.n	800a4ac <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d102      	bne.n	800a498 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a492:	2301      	movs	r3, #1
 800a494:	73fb      	strb	r3, [r7, #15]
 800a496:	e009      	b.n	800a4ac <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d104      	bne.n	800a4ac <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	73fb      	strb	r3, [r7, #15]
 800a4a6:	e001      	b.n	800a4ac <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	53425355 	.word	0x53425355

0800a4bc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a4d2:	69db      	ldr	r3, [r3, #28]
 800a4d4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d002      	beq.n	800a4e6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d021      	beq.n	800a528 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a4e4:	e028      	b.n	800a538 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	220a      	movs	r2, #10
 800a4f8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	3363      	adds	r3, #99	@ 0x63
 800a500:	2210      	movs	r2, #16
 800a502:	2100      	movs	r1, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f005 fcbf 	bl	800fe88 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2201      	movs	r2, #1
 800a516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800a522:	2301      	movs	r3, #1
 800a524:	73fb      	strb	r3, [r7, #15]
      break;
 800a526:	e007      	b.n	800a538 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff fd87 	bl	800a040 <USBH_MSC_BOT_Process>
 800a532:	4603      	mov	r3, r0
 800a534:	73fb      	strb	r3, [r7, #15]
      break;
 800a536:	bf00      	nop
  }

  return error;
 800a538:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b086      	sub	sp, #24
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	460b      	mov	r3, r1
 800a54c:	607a      	str	r2, [r7, #4]
 800a54e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a550:	2301      	movs	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a564:	2b01      	cmp	r3, #1
 800a566:	d002      	beq.n	800a56e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d027      	beq.n	800a5bc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a56c:	e05e      	b.n	800a62c <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	2208      	movs	r2, #8
 800a572:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2280      	movs	r2, #128	@ 0x80
 800a578:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	220a      	movs	r2, #10
 800a580:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	3363      	adds	r3, #99	@ 0x63
 800a588:	2210      	movs	r2, #16
 800a58a:	2100      	movs	r1, #0
 800a58c:	4618      	mov	r0, r3
 800a58e:	f005 fc7b 	bl	800fe88 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2225      	movs	r2, #37	@ 0x25
 800a596:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f103 0210 	add.w	r2, r3, #16
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ba:	e037      	b.n	800a62c <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f7ff fd3d 	bl	800a040 <USBH_MSC_BOT_Process>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d12c      	bne.n	800a62a <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5d6:	3303      	adds	r3, #3
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	021b      	lsls	r3, r3, #8
 800a5e8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a5f6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	061b      	lsls	r3, r3, #24
 800a602:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a60e:	3307      	adds	r3, #7
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a61a:	3306      	adds	r3, #6
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	021b      	lsls	r3, r3, #8
 800a620:	b29b      	uxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	809a      	strh	r2, [r3, #4]
      break;
 800a62a:	bf00      	nop
  }

  return error;
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b086      	sub	sp, #24
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	460b      	mov	r3, r1
 800a640:	607a      	str	r2, [r7, #4]
 800a642:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a644:	2302      	movs	r3, #2
 800a646:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d002      	beq.n	800a662 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d03d      	beq.n	800a6dc <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a660:	e089      	b.n	800a776 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2224      	movs	r2, #36	@ 0x24
 800a666:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2280      	movs	r2, #128	@ 0x80
 800a66c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	220a      	movs	r2, #10
 800a674:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	3363      	adds	r3, #99	@ 0x63
 800a67c:	220a      	movs	r2, #10
 800a67e:	2100      	movs	r1, #0
 800a680:	4618      	mov	r0, r3
 800a682:	f005 fc01 	bl	800fe88 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	2212      	movs	r2, #18
 800a68a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a68e:	7afb      	ldrb	r3, [r7, #11]
 800a690:	015b      	lsls	r3, r3, #5
 800a692:	b2da      	uxtb	r2, r3
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2224      	movs	r2, #36	@ 0x24
 800a6ae:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f103 0210 	add.w	r2, r3, #16
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6da:	e04c      	b.n	800a776 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff fcad 	bl	800a040 <USBH_MSC_BOT_Process>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d141      	bne.n	800a774 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a6f0:	2222      	movs	r2, #34	@ 0x22
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f005 fbc7 	bl	800fe88 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	b2da      	uxtb	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	095b      	lsrs	r3, r3, #5
 800a716:	b2da      	uxtb	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a722:	3301      	adds	r3, #1
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	b25b      	sxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	da03      	bge.n	800a734 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	709a      	strb	r2, [r3, #2]
 800a732:	e002      	b.n	800a73a <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	1cd8      	adds	r0, r3, #3
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a744:	3308      	adds	r3, #8
 800a746:	2208      	movs	r2, #8
 800a748:	4619      	mov	r1, r3
 800a74a:	f005 fc0b 	bl	800ff64 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f103 000c 	add.w	r0, r3, #12
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a75a:	3310      	adds	r3, #16
 800a75c:	2210      	movs	r2, #16
 800a75e:	4619      	mov	r1, r3
 800a760:	f005 fc00 	bl	800ff64 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	331d      	adds	r3, #29
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800a76e:	3220      	adds	r2, #32
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	601a      	str	r2, [r3, #0]
      break;
 800a774:	bf00      	nop
  }

  return error;
 800a776:	7dfb      	ldrb	r3, [r7, #23]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	460b      	mov	r3, r1
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a78e:	2302      	movs	r3, #2
 800a790:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d002      	beq.n	800a7ac <USBH_MSC_SCSI_RequestSense+0x2c>
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d03d      	beq.n	800a826 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a7aa:	e05d      	b.n	800a868 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	220e      	movs	r2, #14
 800a7b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2280      	movs	r2, #128	@ 0x80
 800a7b6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	220a      	movs	r2, #10
 800a7be:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3363      	adds	r3, #99	@ 0x63
 800a7c6:	2210      	movs	r2, #16
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f005 fb5c 	bl	800fe88 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2203      	movs	r2, #3
 800a7d4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a7d8:	7afb      	ldrb	r3, [r7, #11]
 800a7da:	015b      	lsls	r3, r3, #5
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	220e      	movs	r2, #14
 800a7f8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f103 0210 	add.w	r2, r3, #16
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a820:	2301      	movs	r3, #1
 800a822:	75fb      	strb	r3, [r7, #23]
      break;
 800a824:	e020      	b.n	800a868 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a826:	7afb      	ldrb	r3, [r7, #11]
 800a828:	4619      	mov	r1, r3
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7ff fc08 	bl	800a040 <USBH_MSC_BOT_Process>
 800a830:	4603      	mov	r3, r0
 800a832:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a834:	7dfb      	ldrb	r3, [r7, #23]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d115      	bne.n	800a866 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a840:	3302      	adds	r3, #2
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	f003 030f 	and.w	r3, r3, #15
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a854:	7b1a      	ldrb	r2, [r3, #12]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a860:	7b5a      	ldrb	r2, [r3, #13]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	709a      	strb	r2, [r3, #2]
      break;
 800a866:	bf00      	nop
  }

  return error;
 800a868:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b086      	sub	sp, #24
 800a876:	af00      	add	r7, sp, #0
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]
 800a87e:	460b      	mov	r3, r1
 800a880:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a882:	2302      	movs	r3, #2
 800a884:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a896:	2b01      	cmp	r3, #1
 800a898:	d002      	beq.n	800a8a0 <USBH_MSC_SCSI_Write+0x2e>
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d047      	beq.n	800a92e <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a89e:	e04e      	b.n	800a93e <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	fb03 f202 	mul.w	r2, r3, r2
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	220a      	movs	r2, #10
 800a8be:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	3363      	adds	r3, #99	@ 0x63
 800a8c6:	2210      	movs	r2, #16
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f005 fadc 	bl	800fe88 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	222a      	movs	r2, #42	@ 0x2a
 800a8d4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a8d8:	79fa      	ldrb	r2, [r7, #7]
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a8e0:	79ba      	ldrb	r2, [r7, #6]
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a8e8:	797a      	ldrb	r2, [r7, #5]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a8f0:	1d3b      	adds	r3, r7, #4
 800a8f2:	781a      	ldrb	r2, [r3, #0]
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a8fa:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a904:	f107 0320 	add.w	r3, r7, #32
 800a908:	781a      	ldrb	r2, [r3, #0]
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a928:	2301      	movs	r3, #1
 800a92a:	75fb      	strb	r3, [r7, #23]
      break;
 800a92c:	e007      	b.n	800a93e <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a92e:	7afb      	ldrb	r3, [r7, #11]
 800a930:	4619      	mov	r1, r3
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fb84 	bl	800a040 <USBH_MSC_BOT_Process>
 800a938:	4603      	mov	r3, r0
 800a93a:	75fb      	strb	r3, [r7, #23]
      break;
 800a93c:	bf00      	nop
  }

  return error;
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	603b      	str	r3, [r7, #0]
 800a954:	460b      	mov	r3, r1
 800a956:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a958:	2302      	movs	r3, #2
 800a95a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d002      	beq.n	800a976 <USBH_MSC_SCSI_Read+0x2e>
 800a970:	2b02      	cmp	r3, #2
 800a972:	d047      	beq.n	800aa04 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a974:	e04e      	b.n	800aa14 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800a97c:	461a      	mov	r2, r3
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	fb03 f202 	mul.w	r2, r3, r2
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2280      	movs	r2, #128	@ 0x80
 800a98c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	220a      	movs	r2, #10
 800a994:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	3363      	adds	r3, #99	@ 0x63
 800a99c:	2210      	movs	r2, #16
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f005 fa71 	bl	800fe88 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2228      	movs	r2, #40	@ 0x28
 800a9aa:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a9ae:	79fa      	ldrb	r2, [r7, #7]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a9b6:	79ba      	ldrb	r2, [r7, #6]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a9be:	797a      	ldrb	r2, [r7, #5]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a9c6:	1d3b      	adds	r3, r7, #4
 800a9c8:	781a      	ldrb	r2, [r3, #0]
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a9d0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a9da:	f107 0320 	add.w	r3, r7, #32
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	75fb      	strb	r3, [r7, #23]
      break;
 800aa02:	e007      	b.n	800aa14 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa04:	7afb      	ldrb	r3, [r7, #11]
 800aa06:	4619      	mov	r1, r3
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f7ff fb19 	bl	800a040 <USBH_MSC_BOT_Process>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	75fb      	strb	r3, [r7, #23]
      break;
 800aa12:	bf00      	nop
  }

  return error;
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	60f8      	str	r0, [r7, #12]
 800aa26:	60b9      	str	r1, [r7, #8]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aa32:	2302      	movs	r3, #2
 800aa34:	e029      	b.n	800aa8a <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	79fa      	ldrb	r2, [r7, #7]
 800aa3a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 f81f 	bl	800aa92 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f004 ff18 	bl	800f8b8 <USBH_LL_Init>

  return USBH_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e009      	b.n	800aab8 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	33e0      	adds	r3, #224	@ 0xe0
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	2200      	movs	r2, #0
 800aab0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	3301      	adds	r3, #1
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b0e      	cmp	r3, #14
 800aabc:	d9f2      	bls.n	800aaa4 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
 800aac2:	e009      	b.n	800aad8 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aace:	2200      	movs	r2, #0
 800aad0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3301      	adds	r3, #1
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aade:	d3f1      	bcc.n	800aac4 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2240      	movs	r2, #64	@ 0x40
 800ab04:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d016      	beq.n	800ab7c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10e      	bne.n	800ab76 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ab5e:	1c59      	adds	r1, r3, #1
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	33de      	adds	r3, #222	@ 0xde
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	73fb      	strb	r3, [r7, #15]
 800ab74:	e004      	b.n	800ab80 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab76:	2302      	movs	r3, #2
 800ab78:	73fb      	strb	r3, [r7, #15]
 800ab7a:	e001      	b.n	800ab80 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	460b      	mov	r3, r1
 800ab98:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800aba4:	78fa      	ldrb	r2, [r7, #3]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d204      	bcs.n	800abb4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800abb2:	e001      	b.n	800abb8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800abb4:	2302      	movs	r3, #2
 800abb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b087      	sub	sp, #28
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	461a      	mov	r2, r3
 800abd4:	4603      	mov	r3, r0
 800abd6:	70fb      	strb	r3, [r7, #3]
 800abd8:	460b      	mov	r3, r1
 800abda:	70bb      	strb	r3, [r7, #2]
 800abdc:	4613      	mov	r3, r2
 800abde:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800abee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abf0:	e025      	b.n	800ac3e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	221a      	movs	r2, #26
 800abf6:	fb02 f303 	mul.w	r3, r2, r3
 800abfa:	3308      	adds	r3, #8
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	4413      	add	r3, r2
 800ac00:	3302      	adds	r3, #2
 800ac02:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	795b      	ldrb	r3, [r3, #5]
 800ac08:	78fa      	ldrb	r2, [r7, #3]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d002      	beq.n	800ac14 <USBH_FindInterface+0x4e>
 800ac0e:	78fb      	ldrb	r3, [r7, #3]
 800ac10:	2bff      	cmp	r3, #255	@ 0xff
 800ac12:	d111      	bne.n	800ac38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ac18:	78ba      	ldrb	r2, [r7, #2]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d002      	beq.n	800ac24 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac1e:	78bb      	ldrb	r3, [r7, #2]
 800ac20:	2bff      	cmp	r3, #255	@ 0xff
 800ac22:	d109      	bne.n	800ac38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ac28:	787a      	ldrb	r2, [r7, #1]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d002      	beq.n	800ac34 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ac2e:	787b      	ldrb	r3, [r7, #1]
 800ac30:	2bff      	cmp	r3, #255	@ 0xff
 800ac32:	d101      	bne.n	800ac38 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	e006      	b.n	800ac46 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d9d6      	bls.n	800abf2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac44:	23ff      	movs	r3, #255	@ 0xff
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	371c      	adds	r7, #28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f004 fe68 	bl	800f930 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ac60:	2101      	movs	r1, #1
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f004 ff81 	bl	800fb6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af04      	add	r7, sp, #16
 800ac7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d102      	bne.n	800ac96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2203      	movs	r2, #3
 800ac94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b0b      	cmp	r3, #11
 800ac9e:	f200 81b0 	bhi.w	800b002 <USBH_Process+0x38e>
 800aca2:	a201      	add	r2, pc, #4	@ (adr r2, 800aca8 <USBH_Process+0x34>)
 800aca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca8:	0800acd9 	.word	0x0800acd9
 800acac:	0800ad0b 	.word	0x0800ad0b
 800acb0:	0800ad73 	.word	0x0800ad73
 800acb4:	0800af9d 	.word	0x0800af9d
 800acb8:	0800b003 	.word	0x0800b003
 800acbc:	0800ae13 	.word	0x0800ae13
 800acc0:	0800af43 	.word	0x0800af43
 800acc4:	0800ae49 	.word	0x0800ae49
 800acc8:	0800ae69 	.word	0x0800ae69
 800accc:	0800ae87 	.word	0x0800ae87
 800acd0:	0800aeb5 	.word	0x0800aeb5
 800acd4:	0800af85 	.word	0x0800af85
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 8190 	beq.w	800b006 <USBH_Process+0x392>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800acec:	20c8      	movs	r0, #200	@ 0xc8
 800acee:	f004 ffb9 	bl	800fc64 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f004 fe79 	bl	800f9ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad08:	e17d      	b.n	800b006 <USBH_Process+0x392>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d107      	bne.n	800ad24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad22:	e17f      	b.n	800b024 <USBH_Process+0x3b0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ad2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad2e:	d914      	bls.n	800ad5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ad36:	3301      	adds	r3, #1
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d903      	bls.n	800ad52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	220d      	movs	r2, #13
 800ad4e:	701a      	strb	r2, [r3, #0]
      break;
 800ad50:	e168      	b.n	800b024 <USBH_Process+0x3b0>
            phost->gState = HOST_IDLE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	701a      	strb	r2, [r3, #0]
      break;
 800ad58:	e164      	b.n	800b024 <USBH_Process+0x3b0>
          phost->Timeout += 10U;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ad60:	f103 020a 	add.w	r2, r3, #10
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ad6a:	200a      	movs	r0, #10
 800ad6c:	f004 ff7a 	bl	800fc64 <USBH_Delay>
      break;
 800ad70:	e158      	b.n	800b024 <USBH_Process+0x3b0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d005      	beq.n	800ad88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad82:	2104      	movs	r1, #4
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad88:	2064      	movs	r0, #100	@ 0x64
 800ad8a:	f004 ff6b 	bl	800fc64 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f004 fe04 	bl	800f99c <USBH_LL_GetSpeed>
 800ad94:	4603      	mov	r3, r0
 800ad96:	461a      	mov	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2205      	movs	r2, #5
 800ada2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ada4:	2100      	movs	r1, #0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 f923 	bl	800bff2 <USBH_AllocPipe>
 800adac:	4603      	mov	r3, r0
 800adae:	461a      	mov	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800adb4:	2180      	movs	r1, #128	@ 0x80
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 f91b 	bl	800bff2 <USBH_AllocPipe>
 800adbc:	4603      	mov	r3, r0
 800adbe:	461a      	mov	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7919      	ldrb	r1, [r3, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800add8:	9202      	str	r2, [sp, #8]
 800adda:	2200      	movs	r2, #0
 800addc:	9201      	str	r2, [sp, #4]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	4603      	mov	r3, r0
 800ade2:	2280      	movs	r2, #128	@ 0x80
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 f8d5 	bl	800bf94 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	7959      	ldrb	r1, [r3, #5]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adfe:	9202      	str	r2, [sp, #8]
 800ae00:	2200      	movs	r2, #0
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4603      	mov	r3, r0
 800ae08:	2200      	movs	r2, #0
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f001 f8c2 	bl	800bf94 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae10:	e108      	b.n	800b024 <USBH_Process+0x3b0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f90c 	bl	800b030 <USBH_HandleEnum>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 80f2 	bne.w	800b00a <USBH_Process+0x396>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d103      	bne.n	800ae40 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2208      	movs	r2, #8
 800ae3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae3e:	e0e4      	b.n	800b00a <USBH_Process+0x396>
          phost->gState = HOST_INPUT;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2207      	movs	r2, #7
 800ae44:	701a      	strb	r2, [r3, #0]
      break;
 800ae46:	e0e0      	b.n	800b00a <USBH_Process+0x396>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 80dd 	beq.w	800b00e <USBH_Process+0x39a>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2208      	movs	r2, #8
 800ae64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ae66:	e0d2      	b.n	800b00e <USBH_Process+0x39a>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fc1d 	bl	800b6b0 <USBH_SetCfg>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f040 80ca 	bne.w	800b012 <USBH_Process+0x39e>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2209      	movs	r2, #9
 800ae82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae84:	e0c5      	b.n	800b012 <USBH_Process+0x39e>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800ae8c:	f003 0320 	and.w	r3, r3, #32
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <USBH_Process+0x238>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ae94:	2101      	movs	r1, #1
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fc2d 	bl	800b6f6 <USBH_SetFeature>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f040 80b9 	bne.w	800b016 <USBH_Process+0x3a2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	220a      	movs	r2, #10
 800aea8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aeaa:	e0b4      	b.n	800b016 <USBH_Process+0x3a2>
        phost->gState = HOST_CHECK_CLASS;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	220a      	movs	r2, #10
 800aeb0:	701a      	strb	r2, [r3, #0]
      break;
 800aeb2:	e0b0      	b.n	800b016 <USBH_Process+0x3a2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 80ad 	beq.w	800b01a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aec8:	2300      	movs	r3, #0
 800aeca:	73fb      	strb	r3, [r7, #15]
 800aecc:	e016      	b.n	800aefc <USBH_Process+0x288>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aece:	7bfa      	ldrb	r2, [r7, #15]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	32de      	adds	r2, #222	@ 0xde
 800aed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed8:	791a      	ldrb	r2, [r3, #4]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d108      	bne.n	800aef6 <USBH_Process+0x282>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aee4:	7bfa      	ldrb	r2, [r7, #15]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	32de      	adds	r2, #222	@ 0xde
 800aeea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800aef4:	e005      	b.n	800af02 <USBH_Process+0x28e>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aef6:	7bfb      	ldrb	r3, [r7, #15]
 800aef8:	3301      	adds	r3, #1
 800aefa:	73fb      	strb	r3, [r7, #15]
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0e5      	beq.n	800aece <USBH_Process+0x25a>
          }
        }

        if (phost->pActiveClass != NULL)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d016      	beq.n	800af3a <USBH_Process+0x2c6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	4798      	blx	r3
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d109      	bne.n	800af32 <USBH_Process+0x2be>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2206      	movs	r2, #6
 800af22:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af2a:	2103      	movs	r1, #3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af30:	e073      	b.n	800b01a <USBH_Process+0x3a6>
            phost->gState = HOST_ABORT_STATE;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	220d      	movs	r2, #13
 800af36:	701a      	strb	r2, [r3, #0]
      break;
 800af38:	e06f      	b.n	800b01a <USBH_Process+0x3a6>
          phost->gState = HOST_ABORT_STATE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	220d      	movs	r2, #13
 800af3e:	701a      	strb	r2, [r3, #0]
      break;
 800af40:	e06b      	b.n	800b01a <USBH_Process+0x3a6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d017      	beq.n	800af7c <USBH_Process+0x308>
      {
        status = phost->pActiveClass->Requests(phost);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	4798      	blx	r3
 800af58:	4603      	mov	r3, r0
 800af5a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <USBH_Process+0x2f8>
        {
          phost->gState = HOST_CLASS;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	220b      	movs	r2, #11
 800af68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af6a:	e058      	b.n	800b01e <USBH_Process+0x3aa>
        else if (status == USBH_FAIL)
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d154      	bne.n	800b01e <USBH_Process+0x3aa>
          phost->gState = HOST_ABORT_STATE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	220d      	movs	r2, #13
 800af78:	701a      	strb	r2, [r3, #0]
      break;
 800af7a:	e050      	b.n	800b01e <USBH_Process+0x3aa>
        phost->gState = HOST_ABORT_STATE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	220d      	movs	r2, #13
 800af80:	701a      	strb	r2, [r3, #0]
      break;
 800af82:	e04c      	b.n	800b01e <USBH_Process+0x3aa>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d049      	beq.n	800b022 <USBH_Process+0x3ae>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	4798      	blx	r3
      }
      break;
 800af9a:	e042      	b.n	800b022 <USBH_Process+0x3ae>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      DeInitStateMachine(phost);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff fd74 	bl	800aa92 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d009      	beq.n	800afc8 <USBH_Process+0x354>
      {
        phost->pActiveClass->DeInit(phost);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d005      	beq.n	800afde <USBH_Process+0x36a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afd8:	2105      	movs	r1, #5
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d107      	bne.n	800affa <USBH_Process+0x386>
      {
        phost->device.is_ReEnumerated = 0U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fe2d 	bl	800ac52 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aff8:	e014      	b.n	800b024 <USBH_Process+0x3b0>
        USBH_LL_Start(phost);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f004 fc98 	bl	800f930 <USBH_LL_Start>
      break;
 800b000:	e010      	b.n	800b024 <USBH_Process+0x3b0>

    case HOST_ABORT_STATE:
    default :
      break;
 800b002:	bf00      	nop
 800b004:	e00e      	b.n	800b024 <USBH_Process+0x3b0>
      break;
 800b006:	bf00      	nop
 800b008:	e00c      	b.n	800b024 <USBH_Process+0x3b0>
      break;
 800b00a:	bf00      	nop
 800b00c:	e00a      	b.n	800b024 <USBH_Process+0x3b0>
    break;
 800b00e:	bf00      	nop
 800b010:	e008      	b.n	800b024 <USBH_Process+0x3b0>
      break;
 800b012:	bf00      	nop
 800b014:	e006      	b.n	800b024 <USBH_Process+0x3b0>
      break;
 800b016:	bf00      	nop
 800b018:	e004      	b.n	800b024 <USBH_Process+0x3b0>
      break;
 800b01a:	bf00      	nop
 800b01c:	e002      	b.n	800b024 <USBH_Process+0x3b0>
      break;
 800b01e:	bf00      	nop
 800b020:	e000      	b.n	800b024 <USBH_Process+0x3b0>
      break;
 800b022:	bf00      	nop
  }
  return USBH_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop

0800b030 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af04      	add	r7, sp, #16
 800b036:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b038:	2301      	movs	r3, #1
 800b03a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b03c:	2301      	movs	r3, #1
 800b03e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	785b      	ldrb	r3, [r3, #1]
 800b044:	2b07      	cmp	r3, #7
 800b046:	f200 81bd 	bhi.w	800b3c4 <USBH_HandleEnum+0x394>
 800b04a:	a201      	add	r2, pc, #4	@ (adr r2, 800b050 <USBH_HandleEnum+0x20>)
 800b04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b050:	0800b071 	.word	0x0800b071
 800b054:	0800b12b 	.word	0x0800b12b
 800b058:	0800b195 	.word	0x0800b195
 800b05c:	0800b21f 	.word	0x0800b21f
 800b060:	0800b289 	.word	0x0800b289
 800b064:	0800b2f9 	.word	0x0800b2f9
 800b068:	0800b33f 	.word	0x0800b33f
 800b06c:	0800b385 	.word	0x0800b385
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b070:	2108      	movs	r1, #8
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa4c 	bl	800b510 <USBH_Get_DevDesc>
 800b078:	4603      	mov	r3, r0
 800b07a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d12e      	bne.n	800b0e0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	7919      	ldrb	r1, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b0a6:	9202      	str	r2, [sp, #8]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	9201      	str	r2, [sp, #4]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2280      	movs	r2, #128	@ 0x80
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 ff6e 	bl	800bf94 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	7959      	ldrb	r1, [r3, #5]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0cc:	9202      	str	r2, [sp, #8]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	9201      	str	r2, [sp, #4]
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 ff5b 	bl	800bf94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0de:	e173      	b.n	800b3c8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	f040 8170 	bne.w	800b3c8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d903      	bls.n	800b10a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	220d      	movs	r2, #13
 800b106:	701a      	strb	r2, [r3, #0]
      break;
 800b108:	e15e      	b.n	800b3c8 <USBH_HandleEnum+0x398>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	795b      	ldrb	r3, [r3, #5]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 ff8f 	bl	800c034 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	791b      	ldrb	r3, [r3, #4]
 800b11a:	4619      	mov	r1, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 ff89 	bl	800c034 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	701a      	strb	r2, [r3, #0]
      break;
 800b128:	e14e      	b.n	800b3c8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b12a:	2112      	movs	r1, #18
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f9ef 	bl	800b510 <USBH_Get_DevDesc>
 800b132:	4603      	mov	r3, r0
 800b134:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d103      	bne.n	800b144 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b142:	e143      	b.n	800b3cc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	2b03      	cmp	r3, #3
 800b148:	f040 8140 	bne.w	800b3cc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b152:	3301      	adds	r3, #1
 800b154:	b2da      	uxtb	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b162:	2b03      	cmp	r3, #3
 800b164:	d903      	bls.n	800b16e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	220d      	movs	r2, #13
 800b16a:	701a      	strb	r2, [r3, #0]
      break;
 800b16c:	e12e      	b.n	800b3cc <USBH_HandleEnum+0x39c>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	795b      	ldrb	r3, [r3, #5]
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 ff5d 	bl	800c034 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	791b      	ldrb	r3, [r3, #4]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 ff57 	bl	800c034 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
      break;
 800b192:	e11b      	b.n	800b3cc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b194:	2101      	movs	r1, #1
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 fa66 	bl	800b668 <USBH_SetAddress>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d130      	bne.n	800b208 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b1a6:	2002      	movs	r0, #2
 800b1a8:	f004 fd5c 	bl	800fc64 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2203      	movs	r2, #3
 800b1b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	7919      	ldrb	r1, [r3, #4]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b1ce:	9202      	str	r2, [sp, #8]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	9201      	str	r2, [sp, #4]
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2280      	movs	r2, #128	@ 0x80
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 feda 	bl	800bf94 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7959      	ldrb	r1, [r3, #5]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1f4:	9202      	str	r2, [sp, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	9201      	str	r2, [sp, #4]
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2200      	movs	r2, #0
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fec7 	bl	800bf94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b206:	e0e3      	b.n	800b3d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b208:	7bbb      	ldrb	r3, [r7, #14]
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	f040 80e0 	bne.w	800b3d0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	220d      	movs	r2, #13
 800b214:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	705a      	strb	r2, [r3, #1]
      break;
 800b21c:	e0d8      	b.n	800b3d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b21e:	2109      	movs	r1, #9
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f99d 	bl	800b560 <USBH_Get_CfgDesc>
 800b226:	4603      	mov	r3, r0
 800b228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d103      	bne.n	800b238 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2204      	movs	r2, #4
 800b234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b236:	e0cd      	b.n	800b3d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b238:	7bbb      	ldrb	r3, [r7, #14]
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	f040 80ca 	bne.w	800b3d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b246:	3301      	adds	r3, #1
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b256:	2b03      	cmp	r3, #3
 800b258:	d903      	bls.n	800b262 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	220d      	movs	r2, #13
 800b25e:	701a      	strb	r2, [r3, #0]
      break;
 800b260:	e0b8      	b.n	800b3d4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	795b      	ldrb	r3, [r3, #5]
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fee3 	bl	800c034 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	791b      	ldrb	r3, [r3, #4]
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fedd 	bl	800c034 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	701a      	strb	r2, [r3, #0]
      break;
 800b286:	e0a5      	b.n	800b3d4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f965 	bl	800b560 <USBH_Get_CfgDesc>
 800b296:	4603      	mov	r3, r0
 800b298:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2205      	movs	r2, #5
 800b2a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b2a6:	e097      	b.n	800b3d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2a8:	7bbb      	ldrb	r3, [r7, #14]
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	f040 8094 	bne.w	800b3d8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d903      	bls.n	800b2d2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	220d      	movs	r2, #13
 800b2ce:	701a      	strb	r2, [r3, #0]
      break;
 800b2d0:	e082      	b.n	800b3d8 <USBH_HandleEnum+0x3a8>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	795b      	ldrb	r3, [r3, #5]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 feab 	bl	800c034 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	791b      	ldrb	r3, [r3, #4]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fea5 	bl	800c034 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	701a      	strb	r2, [r3, #0]
      break;
 800b2f6:	e06f      	b.n	800b3d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d019      	beq.n	800b336 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b30e:	23ff      	movs	r3, #255	@ 0xff
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f949 	bl	800b5a8 <USBH_Get_StringDesc>
 800b316:	4603      	mov	r3, r0
 800b318:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d103      	bne.n	800b328 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2206      	movs	r2, #6
 800b324:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b326:	e059      	b.n	800b3dc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b328:	7bbb      	ldrb	r3, [r7, #14]
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d156      	bne.n	800b3dc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2206      	movs	r2, #6
 800b332:	705a      	strb	r2, [r3, #1]
      break;
 800b334:	e052      	b.n	800b3dc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2206      	movs	r2, #6
 800b33a:	705a      	strb	r2, [r3, #1]
      break;
 800b33c:	e04e      	b.n	800b3dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b344:	2b00      	cmp	r3, #0
 800b346:	d019      	beq.n	800b37c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b354:	23ff      	movs	r3, #255	@ 0xff
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f926 	bl	800b5a8 <USBH_Get_StringDesc>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b360:	7bbb      	ldrb	r3, [r7, #14]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d103      	bne.n	800b36e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2207      	movs	r2, #7
 800b36a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b36c:	e038      	b.n	800b3e0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
 800b370:	2b03      	cmp	r3, #3
 800b372:	d135      	bne.n	800b3e0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2207      	movs	r2, #7
 800b378:	705a      	strb	r2, [r3, #1]
      break;
 800b37a:	e031      	b.n	800b3e0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2207      	movs	r2, #7
 800b380:	705a      	strb	r2, [r3, #1]
      break;
 800b382:	e02d      	b.n	800b3e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d017      	beq.n	800b3be <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b39a:	23ff      	movs	r3, #255	@ 0xff
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f903 	bl	800b5a8 <USBH_Get_StringDesc>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b3b0:	e018      	b.n	800b3e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d115      	bne.n	800b3e4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b3bc:	e012      	b.n	800b3e4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c2:	e00f      	b.n	800b3e4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b3c4:	bf00      	nop
 800b3c6:	e00e      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3c8:	bf00      	nop
 800b3ca:	e00c      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3cc:	bf00      	nop
 800b3ce:	e00a      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3d0:	bf00      	nop
 800b3d2:	e008      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3d4:	bf00      	nop
 800b3d6:	e006      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3d8:	bf00      	nop
 800b3da:	e004      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3dc:	bf00      	nop
 800b3de:	e002      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3e0:	bf00      	nop
 800b3e2:	e000      	b.n	800b3e6 <USBH_HandleEnum+0x3b6>
      break;
 800b3e4:	bf00      	nop
  }
  return Status;
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b082      	sub	sp, #8
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f804 	bl	800b432 <USBH_HandleSof>
}
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	2b0b      	cmp	r3, #11
 800b442:	d10a      	bne.n	800b45a <USBH_HandleSof+0x28>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	4798      	blx	r3
  }
}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b472:	bf00      	nop
}
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b48e:	bf00      	nop
}
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b083      	sub	sp, #12
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f004 fa3c 	bl	800f966 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	791b      	ldrb	r3, [r3, #4]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fd9d 	bl	800c034 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	795b      	ldrb	r3, [r3, #5]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fd97 	bl	800c034 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af02      	add	r7, sp, #8
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	b29b      	uxth	r3, r3
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	4613      	mov	r3, r2
 800b52a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b52e:	2100      	movs	r1, #0
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f864 	bl	800b5fe <USBH_GetDescriptor>
 800b536:	4603      	mov	r3, r0
 800b538:	73fb      	strb	r3, [r7, #15]
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10a      	bne.n	800b556 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b54c:	78fa      	ldrb	r2, [r7, #3]
 800b54e:	b292      	uxth	r2, r2
 800b550:	4619      	mov	r1, r3
 800b552:	f000 f918 	bl	800b786 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b556:	7bfb      	ldrb	r3, [r7, #15]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af02      	add	r7, sp, #8
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	331c      	adds	r3, #28
 800b570:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b572:	887b      	ldrh	r3, [r7, #2]
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b57c:	2100      	movs	r1, #0
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f83d 	bl	800b5fe <USBH_GetDescriptor>
 800b584:	4603      	mov	r3, r0
 800b586:	72fb      	strb	r3, [r7, #11]
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d107      	bne.n	800b59e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b594:	887a      	ldrh	r2, [r7, #2]
 800b596:	68f9      	ldr	r1, [r7, #12]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 f960 	bl	800b85e <USBH_ParseCfgDesc>
  }

  return status;
 800b59e:	7afb      	ldrb	r3, [r7, #11]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	607a      	str	r2, [r7, #4]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	72fb      	strb	r3, [r7, #11]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b5c4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b5cc:	893b      	ldrh	r3, [r7, #8]
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f812 	bl	800b5fe <USBH_GetDescriptor>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	75fb      	strb	r3, [r7, #23]
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d107      	bne.n	800b5f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b5ea:	893a      	ldrh	r2, [r7, #8]
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fa31 	bl	800ba56 <USBH_ParseStringDesc>
  }

  return status;
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b084      	sub	sp, #16
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	607b      	str	r3, [r7, #4]
 800b608:	460b      	mov	r3, r1
 800b60a:	72fb      	strb	r3, [r7, #11]
 800b60c:	4613      	mov	r3, r2
 800b60e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	789b      	ldrb	r3, [r3, #2]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d11c      	bne.n	800b652 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2206      	movs	r2, #6
 800b628:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	893a      	ldrh	r2, [r7, #8]
 800b62e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b630:	893b      	ldrh	r3, [r7, #8]
 800b632:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b63a:	d104      	bne.n	800b646 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f240 4209 	movw	r2, #1033	@ 0x409
 800b642:	829a      	strh	r2, [r3, #20]
 800b644:	e002      	b.n	800b64c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8b3a      	ldrh	r2, [r7, #24]
 800b650:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b652:	8b3b      	ldrh	r3, [r7, #24]
 800b654:	461a      	mov	r2, r3
 800b656:	6879      	ldr	r1, [r7, #4]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 fa49 	bl	800baf0 <USBH_CtlReq>
 800b65e:	4603      	mov	r3, r0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	789b      	ldrb	r3, [r3, #2]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d10f      	bne.n	800b69c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2205      	movs	r2, #5
 800b686:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b688:	78fb      	ldrb	r3, [r7, #3]
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b69c:	2200      	movs	r2, #0
 800b69e:	2100      	movs	r1, #0
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fa25 	bl	800baf0 <USBH_CtlReq>
 800b6a6:	4603      	mov	r3, r0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	789b      	ldrb	r3, [r3, #2]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d10e      	bne.n	800b6e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2209      	movs	r2, #9
 800b6ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	887a      	ldrh	r2, [r7, #2]
 800b6d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fa02 	bl	800baf0 <USBH_CtlReq>
 800b6ec:	4603      	mov	r3, r0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	789b      	ldrb	r3, [r3, #2]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d10f      	bne.n	800b72a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2203      	movs	r2, #3
 800b714:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	b29a      	uxth	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b72a:	2200      	movs	r2, #0
 800b72c:	2100      	movs	r1, #0
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f9de 	bl	800baf0 <USBH_CtlReq>
 800b734:	4603      	mov	r3, r0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	789b      	ldrb	r3, [r3, #2]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d10f      	bne.n	800b772 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2202      	movs	r2, #2
 800b756:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	b29a      	uxth	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b772:	2200      	movs	r2, #0
 800b774:	2100      	movs	r1, #0
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f9ba 	bl	800baf0 <USBH_CtlReq>
 800b77c:	4603      	mov	r3, r0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b786:	b480      	push	{r7}
 800b788:	b085      	sub	sp, #20
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	4613      	mov	r3, r2
 800b792:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	781a      	ldrb	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	785a      	ldrb	r2, [r3, #1]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	3302      	adds	r3, #2
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	3303      	adds	r3, #3
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	791a      	ldrb	r2, [r3, #4]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	795a      	ldrb	r2, [r3, #5]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	799a      	ldrb	r2, [r3, #6]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	79da      	ldrb	r2, [r3, #7]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	2b08      	cmp	r3, #8
 800b7e2:	d936      	bls.n	800b852 <USBH_ParseDevDesc+0xcc>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	3309      	adds	r3, #9
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	021b      	lsls	r3, r3, #8
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	330a      	adds	r3, #10
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	330b      	adds	r3, #11
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	b29b      	uxth	r3, r3
 800b810:	4313      	orrs	r3, r2
 800b812:	b29a      	uxth	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	330c      	adds	r3, #12
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	330d      	adds	r3, #13
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	021b      	lsls	r3, r3, #8
 800b828:	b29b      	uxth	r3, r3
 800b82a:	4313      	orrs	r3, r2
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	7b9a      	ldrb	r2, [r3, #14]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	7bda      	ldrb	r2, [r3, #15]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	7c1a      	ldrb	r2, [r3, #16]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	7c5a      	ldrb	r2, [r3, #17]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	745a      	strb	r2, [r3, #17]
  }
}
 800b852:	bf00      	nop
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b08a      	sub	sp, #40	@ 0x28
 800b862:	af00      	add	r7, sp, #0
 800b864:	60f8      	str	r0, [r7, #12]
 800b866:	60b9      	str	r1, [r7, #8]
 800b868:	4613      	mov	r3, r2
 800b86a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t                      ep_ix = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	781a      	ldrb	r2, [r3, #0]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	785a      	ldrb	r2, [r3, #1]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	3302      	adds	r3, #2
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	3303      	adds	r3, #3
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	021b      	lsls	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	791a      	ldrb	r2, [r3, #4]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	795a      	ldrb	r2, [r3, #5]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	799a      	ldrb	r2, [r3, #6]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	79da      	ldrb	r2, [r3, #7]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	7a1a      	ldrb	r2, [r3, #8]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b8d2:	88fb      	ldrh	r3, [r7, #6]
 800b8d4:	2b09      	cmp	r3, #9
 800b8d6:	d95f      	bls.n	800b998 <USBH_ParseCfgDesc+0x13a>
  {
    ptr = USB_LEN_CFG_DESC;
 800b8d8:	2309      	movs	r3, #9
 800b8da:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b8e0:	e051      	b.n	800b986 <USBH_ParseCfgDesc+0x128>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b8e2:	f107 0316 	add.w	r3, r7, #22
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8ea:	f000 f8e7 	bl	800babc <USBH_GetNextDesc>
 800b8ee:	6278      	str	r0, [r7, #36]	@ 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	785b      	ldrb	r3, [r3, #1]
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d146      	bne.n	800b986 <USBH_ParseCfgDesc+0x128>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b8f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b8fc:	221a      	movs	r2, #26
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
 800b902:	3308      	adds	r3, #8
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	4413      	add	r3, r2
 800b908:	3302      	adds	r3, #2
 800b90a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b90c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b90e:	69f8      	ldr	r0, [r7, #28]
 800b910:	f000 f846 	bl	800b9a0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b91e:	e022      	b.n	800b966 <USBH_ParseCfgDesc+0x108>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b920:	f107 0316 	add.w	r3, r7, #22
 800b924:	4619      	mov	r1, r3
 800b926:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b928:	f000 f8c8 	bl	800babc <USBH_GetNextDesc>
 800b92c:	6278      	str	r0, [r7, #36]	@ 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b930:	785b      	ldrb	r3, [r3, #1]
 800b932:	2b05      	cmp	r3, #5
 800b934:	d117      	bne.n	800b966 <USBH_ParseCfgDesc+0x108>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b936:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b93a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b93e:	3201      	adds	r2, #1
 800b940:	00d2      	lsls	r2, r2, #3
 800b942:	211a      	movs	r1, #26
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	4413      	add	r3, r2
 800b94a:	3308      	adds	r3, #8
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	3304      	adds	r3, #4
 800b952:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b954:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b956:	69b8      	ldr	r0, [r7, #24]
 800b958:	f000 f851 	bl	800b9fe <USBH_ParseEPDesc>
            ep_ix++;
 800b95c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b960:	3301      	adds	r3, #1
 800b962:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	791b      	ldrb	r3, [r3, #4]
 800b96a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b96e:	429a      	cmp	r2, r3
 800b970:	d204      	bcs.n	800b97c <USBH_ParseCfgDesc+0x11e>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	885a      	ldrh	r2, [r3, #2]
 800b976:	8afb      	ldrh	r3, [r7, #22]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d8d1      	bhi.n	800b920 <USBH_ParseCfgDesc+0xc2>
          }
        }
        if_ix++;
 800b97c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b980:	3301      	adds	r3, #1
 800b982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b986:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d804      	bhi.n	800b998 <USBH_ParseCfgDesc+0x13a>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	885a      	ldrh	r2, [r3, #2]
 800b992:	8afb      	ldrh	r3, [r7, #22]
 800b994:	429a      	cmp	r2, r3
 800b996:	d8a4      	bhi.n	800b8e2 <USBH_ParseCfgDesc+0x84>
      }
    }
  }
}
 800b998:	bf00      	nop
 800b99a:	3728      	adds	r7, #40	@ 0x28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781a      	ldrb	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	785a      	ldrb	r2, [r3, #1]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	789a      	ldrb	r2, [r3, #2]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	78da      	ldrb	r2, [r3, #3]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	791a      	ldrb	r2, [r3, #4]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	795a      	ldrb	r2, [r3, #5]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	799a      	ldrb	r2, [r3, #6]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	79da      	ldrb	r2, [r3, #7]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	7a1a      	ldrb	r2, [r3, #8]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	721a      	strb	r2, [r3, #8]
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781a      	ldrb	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	785a      	ldrb	r2, [r3, #1]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	789a      	ldrb	r2, [r3, #2]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	78da      	ldrb	r2, [r3, #3]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	3305      	adds	r3, #5
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	021b      	lsls	r3, r3, #8
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	799a      	ldrb	r2, [r3, #6]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	719a      	strb	r2, [r3, #6]
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b087      	sub	sp, #28
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	4613      	mov	r3, r2
 800ba62:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3301      	adds	r3, #1
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d120      	bne.n	800bab0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	1e9a      	subs	r2, r3, #2
 800ba74:	88fb      	ldrh	r3, [r7, #6]
 800ba76:	4293      	cmp	r3, r2
 800ba78:	bf28      	it	cs
 800ba7a:	4613      	movcs	r3, r2
 800ba7c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3302      	adds	r3, #2
 800ba82:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ba84:	2300      	movs	r3, #0
 800ba86:	82fb      	strh	r3, [r7, #22]
 800ba88:	e00b      	b.n	800baa2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ba8a:	8afb      	ldrh	r3, [r7, #22]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	781a      	ldrb	r2, [r3, #0]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ba9c:	8afb      	ldrh	r3, [r7, #22]
 800ba9e:	3302      	adds	r3, #2
 800baa0:	82fb      	strh	r3, [r7, #22]
 800baa2:	8afa      	ldrh	r2, [r7, #22]
 800baa4:	8abb      	ldrh	r3, [r7, #20]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d3ef      	bcc.n	800ba8a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2200      	movs	r2, #0
 800baae:	701a      	strb	r2, [r3, #0]
  }
}
 800bab0:	bf00      	nop
 800bab2:	371c      	adds	r7, #28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	7812      	ldrb	r2, [r2, #0]
 800bace:	4413      	add	r3, r2
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4413      	add	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bae2:	68fb      	ldr	r3, [r7, #12]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4613      	mov	r3, r2
 800bafc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bafe:	2301      	movs	r3, #1
 800bb00:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	789b      	ldrb	r3, [r3, #2]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d002      	beq.n	800bb10 <USBH_CtlReq+0x20>
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d00f      	beq.n	800bb2e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bb0e:	e027      	b.n	800bb60 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	88fa      	ldrh	r2, [r7, #6]
 800bb1a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2202      	movs	r2, #2
 800bb26:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb2c:	e018      	b.n	800bb60 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 f81c 	bl	800bb6c <USBH_HandleControl>
 800bb34:	4603      	mov	r3, r0
 800bb36:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bb38:	7dfb      	ldrb	r3, [r7, #23]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <USBH_CtlReq+0x54>
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d106      	bne.n	800bb52 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2201      	movs	r2, #1
 800bb48:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	761a      	strb	r2, [r3, #24]
      break;
 800bb50:	e005      	b.n	800bb5e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d102      	bne.n	800bb5e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	709a      	strb	r2, [r3, #2]
      break;
 800bb5e:	bf00      	nop
  }
  return status;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af02      	add	r7, sp, #8
 800bb72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb74:	2301      	movs	r3, #1
 800bb76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7e1b      	ldrb	r3, [r3, #24]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	2b0a      	cmp	r3, #10
 800bb84:	f200 8156 	bhi.w	800be34 <USBH_HandleControl+0x2c8>
 800bb88:	a201      	add	r2, pc, #4	@ (adr r2, 800bb90 <USBH_HandleControl+0x24>)
 800bb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8e:	bf00      	nop
 800bb90:	0800bbbd 	.word	0x0800bbbd
 800bb94:	0800bbd7 	.word	0x0800bbd7
 800bb98:	0800bc41 	.word	0x0800bc41
 800bb9c:	0800bc67 	.word	0x0800bc67
 800bba0:	0800bc9f 	.word	0x0800bc9f
 800bba4:	0800bcc9 	.word	0x0800bcc9
 800bba8:	0800bd1b 	.word	0x0800bd1b
 800bbac:	0800bd3d 	.word	0x0800bd3d
 800bbb0:	0800bd79 	.word	0x0800bd79
 800bbb4:	0800bd9f 	.word	0x0800bd9f
 800bbb8:	0800bddd 	.word	0x0800bddd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f103 0110 	add.w	r1, r3, #16
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	795b      	ldrb	r3, [r3, #5]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f943 	bl	800be54 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	761a      	strb	r2, [r3, #24]
      break;
 800bbd4:	e139      	b.n	800be4a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	795b      	ldrb	r3, [r3, #5]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f003 ffb1 	bl	800fb44 <USBH_LL_GetURBState>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d11e      	bne.n	800bc2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7c1b      	ldrb	r3, [r3, #16]
 800bbf0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbf4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	8adb      	ldrh	r3, [r3, #22]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00a      	beq.n	800bc14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bbfe:	7b7b      	ldrb	r3, [r7, #13]
 800bc00:	2b80      	cmp	r3, #128	@ 0x80
 800bc02:	d103      	bne.n	800bc0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2203      	movs	r2, #3
 800bc08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc0a:	e115      	b.n	800be38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2205      	movs	r2, #5
 800bc10:	761a      	strb	r2, [r3, #24]
      break;
 800bc12:	e111      	b.n	800be38 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bc14:	7b7b      	ldrb	r3, [r7, #13]
 800bc16:	2b80      	cmp	r3, #128	@ 0x80
 800bc18:	d103      	bne.n	800bc22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2209      	movs	r2, #9
 800bc1e:	761a      	strb	r2, [r3, #24]
      break;
 800bc20:	e10a      	b.n	800be38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2207      	movs	r2, #7
 800bc26:	761a      	strb	r2, [r3, #24]
      break;
 800bc28:	e106      	b.n	800be38 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
 800bc2c:	2b04      	cmp	r3, #4
 800bc2e:	d003      	beq.n	800bc38 <USBH_HandleControl+0xcc>
 800bc30:	7bbb      	ldrb	r3, [r7, #14]
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	f040 8100 	bne.w	800be38 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	220b      	movs	r2, #11
 800bc3c:	761a      	strb	r2, [r3, #24]
      break;
 800bc3e:	e0fb      	b.n	800be38 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6899      	ldr	r1, [r3, #8]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	899a      	ldrh	r2, [r3, #12]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	791b      	ldrb	r3, [r3, #4]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f93a 	bl	800bed2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2204      	movs	r2, #4
 800bc62:	761a      	strb	r2, [r3, #24]
      break;
 800bc64:	e0f1      	b.n	800be4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	791b      	ldrb	r3, [r3, #4]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f003 ff69 	bl	800fb44 <USBH_LL_GetURBState>
 800bc72:	4603      	mov	r3, r0
 800bc74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc76:	7bbb      	ldrb	r3, [r7, #14]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d102      	bne.n	800bc82 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2209      	movs	r2, #9
 800bc80:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
 800bc84:	2b05      	cmp	r3, #5
 800bc86:	d102      	bne.n	800bc8e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc8c:	e0d6      	b.n	800be3c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	f040 80d3 	bne.w	800be3c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	220b      	movs	r2, #11
 800bc9a:	761a      	strb	r2, [r3, #24]
      break;
 800bc9c:	e0ce      	b.n	800be3c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6899      	ldr	r1, [r3, #8]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	899a      	ldrh	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	795b      	ldrb	r3, [r3, #5]
 800bcaa:	2001      	movs	r0, #1
 800bcac:	9000      	str	r0, [sp, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 f8ea 	bl	800be88 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2206      	movs	r2, #6
 800bcc4:	761a      	strb	r2, [r3, #24]
      break;
 800bcc6:	e0c0      	b.n	800be4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	795b      	ldrb	r3, [r3, #5]
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f003 ff38 	bl	800fb44 <USBH_LL_GetURBState>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bcd8:	7bbb      	ldrb	r3, [r7, #14]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d103      	bne.n	800bce6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2207      	movs	r2, #7
 800bce2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bce4:	e0ac      	b.n	800be40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b05      	cmp	r3, #5
 800bcea:	d105      	bne.n	800bcf8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	220c      	movs	r2, #12
 800bcf0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcf6:	e0a3      	b.n	800be40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d103      	bne.n	800bd06 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2205      	movs	r2, #5
 800bd02:	761a      	strb	r2, [r3, #24]
      break;
 800bd04:	e09c      	b.n	800be40 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	f040 8099 	bne.w	800be40 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	220b      	movs	r2, #11
 800bd12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bd14:	2302      	movs	r3, #2
 800bd16:	73fb      	strb	r3, [r7, #15]
      break;
 800bd18:	e092      	b.n	800be40 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	791b      	ldrb	r3, [r3, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	2100      	movs	r1, #0
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f8d5 	bl	800bed2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2208      	movs	r2, #8
 800bd38:	761a      	strb	r2, [r3, #24]

      break;
 800bd3a:	e086      	b.n	800be4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	791b      	ldrb	r3, [r3, #4]
 800bd40:	4619      	mov	r1, r3
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f003 fefe 	bl	800fb44 <USBH_LL_GetURBState>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d105      	bne.n	800bd5e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	220d      	movs	r2, #13
 800bd56:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bd5c:	e072      	b.n	800be44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bd5e:	7bbb      	ldrb	r3, [r7, #14]
 800bd60:	2b04      	cmp	r3, #4
 800bd62:	d103      	bne.n	800bd6c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	220b      	movs	r2, #11
 800bd68:	761a      	strb	r2, [r3, #24]
      break;
 800bd6a:	e06b      	b.n	800be44 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bd6c:	7bbb      	ldrb	r3, [r7, #14]
 800bd6e:	2b05      	cmp	r3, #5
 800bd70:	d168      	bne.n	800be44 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bd72:	2303      	movs	r3, #3
 800bd74:	73fb      	strb	r3, [r7, #15]
      break;
 800bd76:	e065      	b.n	800be44 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	795b      	ldrb	r3, [r3, #5]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	9200      	str	r2, [sp, #0]
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f87f 	bl	800be88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	220a      	movs	r2, #10
 800bd9a:	761a      	strb	r2, [r3, #24]
      break;
 800bd9c:	e055      	b.n	800be4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	795b      	ldrb	r3, [r3, #5]
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f003 fecd 	bl	800fb44 <USBH_LL_GetURBState>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d105      	bne.n	800bdc0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	220d      	movs	r2, #13
 800bdbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bdbe:	e043      	b.n	800be48 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d103      	bne.n	800bdce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2209      	movs	r2, #9
 800bdca:	761a      	strb	r2, [r3, #24]
      break;
 800bdcc:	e03c      	b.n	800be48 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	2b04      	cmp	r3, #4
 800bdd2:	d139      	bne.n	800be48 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	220b      	movs	r2, #11
 800bdd8:	761a      	strb	r2, [r3, #24]
      break;
 800bdda:	e035      	b.n	800be48 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	7e5b      	ldrb	r3, [r3, #25]
 800bde0:	3301      	adds	r3, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	765a      	strb	r2, [r3, #25]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	7e5b      	ldrb	r3, [r3, #25]
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d806      	bhi.n	800bdfe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bdfc:	e025      	b.n	800be4a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800be04:	2106      	movs	r1, #6
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	795b      	ldrb	r3, [r3, #5]
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f90c 	bl	800c034 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	791b      	ldrb	r3, [r3, #4]
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f906 	bl	800c034 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800be2e:	2302      	movs	r3, #2
 800be30:	73fb      	strb	r3, [r7, #15]
      break;
 800be32:	e00a      	b.n	800be4a <USBH_HandleControl+0x2de>

    default:
      break;
 800be34:	bf00      	nop
 800be36:	e008      	b.n	800be4a <USBH_HandleControl+0x2de>
      break;
 800be38:	bf00      	nop
 800be3a:	e006      	b.n	800be4a <USBH_HandleControl+0x2de>
      break;
 800be3c:	bf00      	nop
 800be3e:	e004      	b.n	800be4a <USBH_HandleControl+0x2de>
      break;
 800be40:	bf00      	nop
 800be42:	e002      	b.n	800be4a <USBH_HandleControl+0x2de>
      break;
 800be44:	bf00      	nop
 800be46:	e000      	b.n	800be4a <USBH_HandleControl+0x2de>
      break;
 800be48:	bf00      	nop
  }

  return status;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af04      	add	r7, sp, #16
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4613      	mov	r3, r2
 800be60:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be62:	79f9      	ldrb	r1, [r7, #7]
 800be64:	2300      	movs	r3, #0
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	2308      	movs	r3, #8
 800be6a:	9302      	str	r3, [sp, #8]
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	2300      	movs	r3, #0
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	2200      	movs	r2, #0
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f003 fe32 	bl	800fae2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b088      	sub	sp, #32
 800be8c:	af04      	add	r7, sp, #16
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	4611      	mov	r1, r2
 800be94:	461a      	mov	r2, r3
 800be96:	460b      	mov	r3, r1
 800be98:	80fb      	strh	r3, [r7, #6]
 800be9a:	4613      	mov	r3, r2
 800be9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800beac:	7979      	ldrb	r1, [r7, #5]
 800beae:	7e3b      	ldrb	r3, [r7, #24]
 800beb0:	9303      	str	r3, [sp, #12]
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	9302      	str	r3, [sp, #8]
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	2301      	movs	r3, #1
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	2300      	movs	r3, #0
 800bec0:	2200      	movs	r2, #0
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f003 fe0d 	bl	800fae2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b088      	sub	sp, #32
 800bed6:	af04      	add	r7, sp, #16
 800bed8:	60f8      	str	r0, [r7, #12]
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	4611      	mov	r1, r2
 800bede:	461a      	mov	r2, r3
 800bee0:	460b      	mov	r3, r1
 800bee2:	80fb      	strh	r3, [r7, #6]
 800bee4:	4613      	mov	r3, r2
 800bee6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bee8:	7979      	ldrb	r1, [r7, #5]
 800beea:	2300      	movs	r3, #0
 800beec:	9303      	str	r3, [sp, #12]
 800beee:	88fb      	ldrh	r3, [r7, #6]
 800bef0:	9302      	str	r3, [sp, #8]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	9301      	str	r3, [sp, #4]
 800bef6:	2301      	movs	r3, #1
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	2300      	movs	r3, #0
 800befc:	2201      	movs	r2, #1
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f003 fdef 	bl	800fae2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bf04:	2300      	movs	r3, #0

}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b088      	sub	sp, #32
 800bf12:	af04      	add	r7, sp, #16
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	4611      	mov	r1, r2
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	80fb      	strh	r3, [r7, #6]
 800bf20:	4613      	mov	r3, r2
 800bf22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf32:	7979      	ldrb	r1, [r7, #5]
 800bf34:	7e3b      	ldrb	r3, [r7, #24]
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	88fb      	ldrh	r3, [r7, #6]
 800bf3a:	9302      	str	r3, [sp, #8]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	2301      	movs	r3, #1
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	2302      	movs	r3, #2
 800bf46:	2200      	movs	r2, #0
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f003 fdca 	bl	800fae2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af04      	add	r7, sp, #16
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	4611      	mov	r1, r2
 800bf64:	461a      	mov	r2, r3
 800bf66:	460b      	mov	r3, r1
 800bf68:	80fb      	strh	r3, [r7, #6]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bf6e:	7979      	ldrb	r1, [r7, #5]
 800bf70:	2300      	movs	r3, #0
 800bf72:	9303      	str	r3, [sp, #12]
 800bf74:	88fb      	ldrh	r3, [r7, #6]
 800bf76:	9302      	str	r3, [sp, #8]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	2302      	movs	r3, #2
 800bf82:	2201      	movs	r2, #1
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f003 fdac 	bl	800fae2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af04      	add	r7, sp, #16
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	70fb      	strb	r3, [r7, #3]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70bb      	strb	r3, [r7, #2]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bfae:	7878      	ldrb	r0, [r7, #1]
 800bfb0:	78ba      	ldrb	r2, [r7, #2]
 800bfb2:	78f9      	ldrb	r1, [r7, #3]
 800bfb4:	8b3b      	ldrh	r3, [r7, #24]
 800bfb6:	9302      	str	r3, [sp, #8]
 800bfb8:	7d3b      	ldrb	r3, [r7, #20]
 800bfba:	9301      	str	r3, [sp, #4]
 800bfbc:	7c3b      	ldrb	r3, [r7, #16]
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f003 fd3f 	bl	800fa46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b082      	sub	sp, #8
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bfde:	78fb      	ldrb	r3, [r7, #3]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f003 fd5e 	bl	800faa4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	460b      	mov	r3, r1
 800bffc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f836 	bl	800c070 <USBH_GetFreePipe>
 800c004:	4603      	mov	r3, r0
 800c006:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c008:	89fb      	ldrh	r3, [r7, #14]
 800c00a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c00e:	4293      	cmp	r3, r2
 800c010:	d00a      	beq.n	800c028 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c012:	78fa      	ldrb	r2, [r7, #3]
 800c014:	89fb      	ldrh	r3, [r7, #14]
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	33e0      	adds	r3, #224	@ 0xe0
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	440b      	add	r3, r1
 800c026:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c028:	89fb      	ldrh	r3, [r7, #14]
 800c02a:	b2db      	uxtb	r3, r3
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	2b0a      	cmp	r3, #10
 800c044:	d80d      	bhi.n	800c062 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	33e0      	adds	r3, #224	@ 0xe0
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	78fb      	ldrb	r3, [r7, #3]
 800c054:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	33e0      	adds	r3, #224	@ 0xe0
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	440b      	add	r3, r1
 800c060:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c078:	2300      	movs	r3, #0
 800c07a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]
 800c080:	e00f      	b.n	800c0a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	33e0      	adds	r3, #224	@ 0xe0
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	e007      	b.n	800c0ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	73fb      	strb	r3, [r7, #15]
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
 800c0a4:	2b0a      	cmp	r3, #10
 800c0a6:	d9ec      	bls.n	800c082 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c0a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	4603      	mov	r3, r0
 800c0c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	4a08      	ldr	r2, [pc, #32]	@ (800c0e8 <disk_status+0x30>)
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	79fa      	ldrb	r2, [r7, #7]
 800c0d0:	4905      	ldr	r1, [pc, #20]	@ (800c0e8 <disk_status+0x30>)
 800c0d2:	440a      	add	r2, r1
 800c0d4:	7a12      	ldrb	r2, [r2, #8]
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	4798      	blx	r3
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	20001ddc 	.word	0x20001ddc

0800c0ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c0fa:	79fb      	ldrb	r3, [r7, #7]
 800c0fc:	4a0d      	ldr	r2, [pc, #52]	@ (800c134 <disk_initialize+0x48>)
 800c0fe:	5cd3      	ldrb	r3, [r2, r3]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d111      	bne.n	800c128 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	4a0b      	ldr	r2, [pc, #44]	@ (800c134 <disk_initialize+0x48>)
 800c108:	2101      	movs	r1, #1
 800c10a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c10c:	79fb      	ldrb	r3, [r7, #7]
 800c10e:	4a09      	ldr	r2, [pc, #36]	@ (800c134 <disk_initialize+0x48>)
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	79fa      	ldrb	r2, [r7, #7]
 800c11a:	4906      	ldr	r1, [pc, #24]	@ (800c134 <disk_initialize+0x48>)
 800c11c:	440a      	add	r2, r1
 800c11e:	7a12      	ldrb	r2, [r2, #8]
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c128:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20001ddc 	.word	0x20001ddc

0800c138 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c138:	b590      	push	{r4, r7, lr}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60b9      	str	r1, [r7, #8]
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	4a0a      	ldr	r2, [pc, #40]	@ (800c174 <disk_read+0x3c>)
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	689c      	ldr	r4, [r3, #8]
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	4a07      	ldr	r2, [pc, #28]	@ (800c174 <disk_read+0x3c>)
 800c158:	4413      	add	r3, r2
 800c15a:	7a18      	ldrb	r0, [r3, #8]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	47a0      	blx	r4
 800c164:	4603      	mov	r3, r0
 800c166:	75fb      	strb	r3, [r7, #23]
  return res;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd90      	pop	{r4, r7, pc}
 800c172:	bf00      	nop
 800c174:	20001ddc 	.word	0x20001ddc

0800c178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b087      	sub	sp, #28
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	4603      	mov	r3, r0
 800c186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c188:	7bfb      	ldrb	r3, [r7, #15]
 800c18a:	4a0a      	ldr	r2, [pc, #40]	@ (800c1b4 <disk_write+0x3c>)
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	68dc      	ldr	r4, [r3, #12]
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	4a07      	ldr	r2, [pc, #28]	@ (800c1b4 <disk_write+0x3c>)
 800c198:	4413      	add	r3, r2
 800c19a:	7a18      	ldrb	r0, [r3, #8]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	47a0      	blx	r4
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	371c      	adds	r7, #28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd90      	pop	{r4, r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20001ddc 	.word	0x20001ddc

0800c1b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	603a      	str	r2, [r7, #0]
 800c1c2:	71fb      	strb	r3, [r7, #7]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	4a09      	ldr	r2, [pc, #36]	@ (800c1f0 <disk_ioctl+0x38>)
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	79fa      	ldrb	r2, [r7, #7]
 800c1d6:	4906      	ldr	r1, [pc, #24]	@ (800c1f0 <disk_ioctl+0x38>)
 800c1d8:	440a      	add	r2, r1
 800c1da:	7a10      	ldrb	r0, [r2, #8]
 800c1dc:	79b9      	ldrb	r1, [r7, #6]
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]
  return res;
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20001ddc 	.word	0x20001ddc

0800c1f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3301      	adds	r3, #1
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c204:	89fb      	ldrh	r3, [r7, #14]
 800c206:	021b      	lsls	r3, r3, #8
 800c208:	b21a      	sxth	r2, r3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	b21b      	sxth	r3, r3
 800c210:	4313      	orrs	r3, r2
 800c212:	b21b      	sxth	r3, r3
 800c214:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c216:	89fb      	ldrh	r3, [r7, #14]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3303      	adds	r3, #3
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	021b      	lsls	r3, r3, #8
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	3202      	adds	r2, #2
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	3201      	adds	r2, #1
 800c24a:	7812      	ldrb	r2, [r2, #0]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	021b      	lsls	r3, r3, #8
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	7812      	ldrb	r2, [r2, #0]
 800c258:	4313      	orrs	r3, r2
 800c25a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c25c:	68fb      	ldr	r3, [r7, #12]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	460b      	mov	r3, r1
 800c274:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	887a      	ldrh	r2, [r7, #2]
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	701a      	strb	r2, [r3, #0]
 800c282:	887b      	ldrh	r3, [r7, #2]
 800c284:	0a1b      	lsrs	r3, r3, #8
 800c286:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	607a      	str	r2, [r7, #4]
 800c28e:	887a      	ldrh	r2, [r7, #2]
 800c290:	b2d2      	uxtb	r2, r2
 800c292:	701a      	strb	r2, [r3, #0]
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	b2d2      	uxtb	r2, r2
 800c2b4:	701a      	strb	r2, [r3, #0]
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	0a1b      	lsrs	r3, r3, #8
 800c2ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	1c5a      	adds	r2, r3, #1
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	b2d2      	uxtb	r2, r2
 800c2c6:	701a      	strb	r2, [r3, #0]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	0a1b      	lsrs	r3, r3, #8
 800c2cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	b2d2      	uxtb	r2, r2
 800c2d8:	701a      	strb	r2, [r3, #0]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	1c5a      	adds	r2, r3, #1
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	b2d2      	uxtb	r2, r2
 800c2ea:	701a      	strb	r2, [r3, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00d      	beq.n	800c32e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	1c53      	adds	r3, r2, #1
 800c316:	613b      	str	r3, [r7, #16]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	1c59      	adds	r1, r3, #1
 800c31c:	6179      	str	r1, [r7, #20]
 800c31e:	7812      	ldrb	r2, [r2, #0]
 800c320:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	607b      	str	r3, [r7, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1f1      	bne.n	800c312 <mem_cpy+0x1a>
	}
}
 800c32e:	bf00      	nop
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c33a:	b480      	push	{r7}
 800c33c:	b087      	sub	sp, #28
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	1c5a      	adds	r2, r3, #1
 800c34e:	617a      	str	r2, [r7, #20]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	b2d2      	uxtb	r2, r2
 800c354:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3b01      	subs	r3, #1
 800c35a:	607b      	str	r3, [r7, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1f3      	bne.n	800c34a <mem_set+0x10>
}
 800c362:	bf00      	nop
 800c364:	bf00      	nop
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c370:	b480      	push	{r7}
 800c372:	b089      	sub	sp, #36	@ 0x24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	61fb      	str	r3, [r7, #28]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	61fa      	str	r2, [r7, #28]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	4619      	mov	r1, r3
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	1c5a      	adds	r2, r3, #1
 800c396:	61ba      	str	r2, [r7, #24]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	1acb      	subs	r3, r1, r3
 800c39c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	607b      	str	r3, [r7, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <mem_cmp+0x40>
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0eb      	beq.n	800c388 <mem_cmp+0x18>

	return r;
 800c3b0:	697b      	ldr	r3, [r7, #20]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3724      	adds	r7, #36	@ 0x24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c3be:	b480      	push	{r7}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c3c8:	e002      	b.n	800c3d0 <chk_chr+0x12>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	607b      	str	r3, [r7, #4]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <chk_chr+0x26>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d1f2      	bne.n	800c3ca <chk_chr+0xc>
	return *str;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c3fe:	2300      	movs	r3, #0
 800c400:	60bb      	str	r3, [r7, #8]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	e029      	b.n	800c45c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c408:	4a27      	ldr	r2, [pc, #156]	@ (800c4a8 <chk_lock+0xb4>)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	011b      	lsls	r3, r3, #4
 800c40e:	4413      	add	r3, r2
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01d      	beq.n	800c452 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c416:	4a24      	ldr	r2, [pc, #144]	@ (800c4a8 <chk_lock+0xb4>)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	011b      	lsls	r3, r3, #4
 800c41c:	4413      	add	r3, r2
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d116      	bne.n	800c456 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c428:	4a1f      	ldr	r2, [pc, #124]	@ (800c4a8 <chk_lock+0xb4>)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	011b      	lsls	r3, r3, #4
 800c42e:	4413      	add	r3, r2
 800c430:	3304      	adds	r3, #4
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c438:	429a      	cmp	r2, r3
 800c43a:	d10c      	bne.n	800c456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c43c:	4a1a      	ldr	r2, [pc, #104]	@ (800c4a8 <chk_lock+0xb4>)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	011b      	lsls	r3, r3, #4
 800c442:	4413      	add	r3, r2
 800c444:	3308      	adds	r3, #8
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d102      	bne.n	800c456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c450:	e007      	b.n	800c462 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c452:	2301      	movs	r3, #1
 800c454:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3301      	adds	r3, #1
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d9d2      	bls.n	800c408 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d109      	bne.n	800c47c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d102      	bne.n	800c474 <chk_lock+0x80>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b02      	cmp	r3, #2
 800c472:	d101      	bne.n	800c478 <chk_lock+0x84>
 800c474:	2300      	movs	r3, #0
 800c476:	e010      	b.n	800c49a <chk_lock+0xa6>
 800c478:	2312      	movs	r3, #18
 800c47a:	e00e      	b.n	800c49a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d108      	bne.n	800c494 <chk_lock+0xa0>
 800c482:	4a09      	ldr	r2, [pc, #36]	@ (800c4a8 <chk_lock+0xb4>)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	011b      	lsls	r3, r3, #4
 800c488:	4413      	add	r3, r2
 800c48a:	330c      	adds	r3, #12
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c492:	d101      	bne.n	800c498 <chk_lock+0xa4>
 800c494:	2310      	movs	r3, #16
 800c496:	e000      	b.n	800c49a <chk_lock+0xa6>
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3714      	adds	r7, #20
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	20001bbc 	.word	0x20001bbc

0800c4ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	607b      	str	r3, [r7, #4]
 800c4b6:	e002      	b.n	800c4be <enq_lock+0x12>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	607b      	str	r3, [r7, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d806      	bhi.n	800c4d2 <enq_lock+0x26>
 800c4c4:	4a09      	ldr	r2, [pc, #36]	@ (800c4ec <enq_lock+0x40>)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	011b      	lsls	r3, r3, #4
 800c4ca:	4413      	add	r3, r2
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1f2      	bne.n	800c4b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	bf14      	ite	ne
 800c4d8:	2301      	movne	r3, #1
 800c4da:	2300      	moveq	r3, #0
 800c4dc:	b2db      	uxtb	r3, r3
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	370c      	adds	r7, #12
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20001bbc 	.word	0x20001bbc

0800c4f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e01f      	b.n	800c540 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c500:	4a41      	ldr	r2, [pc, #260]	@ (800c608 <inc_lock+0x118>)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	011b      	lsls	r3, r3, #4
 800c506:	4413      	add	r3, r2
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d113      	bne.n	800c53a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c512:	4a3d      	ldr	r2, [pc, #244]	@ (800c608 <inc_lock+0x118>)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	011b      	lsls	r3, r3, #4
 800c518:	4413      	add	r3, r2
 800c51a:	3304      	adds	r3, #4
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c522:	429a      	cmp	r2, r3
 800c524:	d109      	bne.n	800c53a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c526:	4a38      	ldr	r2, [pc, #224]	@ (800c608 <inc_lock+0x118>)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	011b      	lsls	r3, r3, #4
 800c52c:	4413      	add	r3, r2
 800c52e:	3308      	adds	r3, #8
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c536:	429a      	cmp	r2, r3
 800c538:	d006      	beq.n	800c548 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d9dc      	bls.n	800c500 <inc_lock+0x10>
 800c546:	e000      	b.n	800c54a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c548:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d132      	bne.n	800c5b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c550:	2300      	movs	r3, #0
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e002      	b.n	800c55c <inc_lock+0x6c>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d806      	bhi.n	800c570 <inc_lock+0x80>
 800c562:	4a29      	ldr	r2, [pc, #164]	@ (800c608 <inc_lock+0x118>)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	4413      	add	r3, r2
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1f2      	bne.n	800c556 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b02      	cmp	r3, #2
 800c574:	d101      	bne.n	800c57a <inc_lock+0x8a>
 800c576:	2300      	movs	r3, #0
 800c578:	e040      	b.n	800c5fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	4922      	ldr	r1, [pc, #136]	@ (800c608 <inc_lock+0x118>)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	440b      	add	r3, r1
 800c586:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	491e      	ldr	r1, [pc, #120]	@ (800c608 <inc_lock+0x118>)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	011b      	lsls	r3, r3, #4
 800c592:	440b      	add	r3, r1
 800c594:	3304      	adds	r3, #4
 800c596:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	695a      	ldr	r2, [r3, #20]
 800c59c:	491a      	ldr	r1, [pc, #104]	@ (800c608 <inc_lock+0x118>)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	011b      	lsls	r3, r3, #4
 800c5a2:	440b      	add	r3, r1
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c5a8:	4a17      	ldr	r2, [pc, #92]	@ (800c608 <inc_lock+0x118>)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	011b      	lsls	r3, r3, #4
 800c5ae:	4413      	add	r3, r2
 800c5b0:	330c      	adds	r3, #12
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d009      	beq.n	800c5d0 <inc_lock+0xe0>
 800c5bc:	4a12      	ldr	r2, [pc, #72]	@ (800c608 <inc_lock+0x118>)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	011b      	lsls	r3, r3, #4
 800c5c2:	4413      	add	r3, r2
 800c5c4:	330c      	adds	r3, #12
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <inc_lock+0xe0>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e015      	b.n	800c5fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d108      	bne.n	800c5e8 <inc_lock+0xf8>
 800c5d6:	4a0c      	ldr	r2, [pc, #48]	@ (800c608 <inc_lock+0x118>)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	011b      	lsls	r3, r3, #4
 800c5dc:	4413      	add	r3, r2
 800c5de:	330c      	adds	r3, #12
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	e001      	b.n	800c5ec <inc_lock+0xfc>
 800c5e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5ec:	4906      	ldr	r1, [pc, #24]	@ (800c608 <inc_lock+0x118>)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	011b      	lsls	r3, r3, #4
 800c5f2:	440b      	add	r3, r1
 800c5f4:	330c      	adds	r3, #12
 800c5f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3301      	adds	r3, #1
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	20001bbc 	.word	0x20001bbc

0800c60c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3b01      	subs	r3, #1
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d825      	bhi.n	800c66c <dec_lock+0x60>
		n = Files[i].ctr;
 800c620:	4a17      	ldr	r2, [pc, #92]	@ (800c680 <dec_lock+0x74>)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	011b      	lsls	r3, r3, #4
 800c626:	4413      	add	r3, r2
 800c628:	330c      	adds	r3, #12
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c62e:	89fb      	ldrh	r3, [r7, #14]
 800c630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c634:	d101      	bne.n	800c63a <dec_lock+0x2e>
 800c636:	2300      	movs	r3, #0
 800c638:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c63a:	89fb      	ldrh	r3, [r7, #14]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <dec_lock+0x3a>
 800c640:	89fb      	ldrh	r3, [r7, #14]
 800c642:	3b01      	subs	r3, #1
 800c644:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c646:	4a0e      	ldr	r2, [pc, #56]	@ (800c680 <dec_lock+0x74>)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	4413      	add	r3, r2
 800c64e:	330c      	adds	r3, #12
 800c650:	89fa      	ldrh	r2, [r7, #14]
 800c652:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c654:	89fb      	ldrh	r3, [r7, #14]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d105      	bne.n	800c666 <dec_lock+0x5a>
 800c65a:	4a09      	ldr	r2, [pc, #36]	@ (800c680 <dec_lock+0x74>)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	011b      	lsls	r3, r3, #4
 800c660:	4413      	add	r3, r2
 800c662:	2200      	movs	r2, #0
 800c664:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	737b      	strb	r3, [r7, #13]
 800c66a:	e001      	b.n	800c670 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c66c:	2302      	movs	r3, #2
 800c66e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c670:	7b7b      	ldrb	r3, [r7, #13]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	20001bbc 	.word	0x20001bbc

0800c684 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	e010      	b.n	800c6b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c692:	4a0d      	ldr	r2, [pc, #52]	@ (800c6c8 <clear_lock+0x44>)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	4413      	add	r3, r2
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d105      	bne.n	800c6ae <clear_lock+0x2a>
 800c6a2:	4a09      	ldr	r2, [pc, #36]	@ (800c6c8 <clear_lock+0x44>)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	4413      	add	r3, r2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d9eb      	bls.n	800c692 <clear_lock+0xe>
	}
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	20001bbc 	.word	0x20001bbc

0800c6cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	78db      	ldrb	r3, [r3, #3]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d034      	beq.n	800c74a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	7858      	ldrb	r0, [r3, #1]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	f7ff fd40 	bl	800c178 <disk_write>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	73fb      	strb	r3, [r7, #15]
 800c702:	e022      	b.n	800c74a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	1ad2      	subs	r2, r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	429a      	cmp	r2, r3
 800c718:	d217      	bcs.n	800c74a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	789b      	ldrb	r3, [r3, #2]
 800c71e:	613b      	str	r3, [r7, #16]
 800c720:	e010      	b.n	800c744 <sync_window+0x78>
					wsect += fs->fsize;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	69db      	ldr	r3, [r3, #28]
 800c726:	697a      	ldr	r2, [r7, #20]
 800c728:	4413      	add	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	7858      	ldrb	r0, [r3, #1]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c736:	2301      	movs	r3, #1
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	f7ff fd1d 	bl	800c178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	3b01      	subs	r3, #1
 800c742:	613b      	str	r3, [r7, #16]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d8eb      	bhi.n	800c722 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d01b      	beq.n	800c7a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff ffad 	bl	800c6cc <sync_window>
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d113      	bne.n	800c7a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7858      	ldrb	r0, [r3, #1]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c786:	2301      	movs	r3, #1
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	f7ff fcd5 	bl	800c138 <disk_read>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c794:	f04f 33ff 	mov.w	r3, #4294967295
 800c798:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff87 	bl	800c6cc <sync_window>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d158      	bne.n	800c87a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	d148      	bne.n	800c862 <sync_fs+0xb2>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	791b      	ldrb	r3, [r3, #4]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d144      	bne.n	800c862 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	3334      	adds	r3, #52	@ 0x34
 800c7dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff fda9 	bl	800c33a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3334      	adds	r3, #52	@ 0x34
 800c7ec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c7f0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff fd38 	bl	800c26a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3334      	adds	r3, #52	@ 0x34
 800c7fe:	4921      	ldr	r1, [pc, #132]	@ (800c884 <sync_fs+0xd4>)
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff fd4d 	bl	800c2a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3334      	adds	r3, #52	@ 0x34
 800c80a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c80e:	491e      	ldr	r1, [pc, #120]	@ (800c888 <sync_fs+0xd8>)
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff fd45 	bl	800c2a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3334      	adds	r3, #52	@ 0x34
 800c81a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	4619      	mov	r1, r3
 800c824:	4610      	mov	r0, r2
 800c826:	f7ff fd3b 	bl	800c2a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3334      	adds	r3, #52	@ 0x34
 800c82e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	4619      	mov	r1, r3
 800c838:	4610      	mov	r0, r2
 800c83a:	f7ff fd31 	bl	800c2a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7858      	ldrb	r0, [r3, #1]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c856:	2301      	movs	r3, #1
 800c858:	f7ff fc8e 	bl	800c178 <disk_write>
			fs->fsi_flag = 0;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	785b      	ldrb	r3, [r3, #1]
 800c866:	2200      	movs	r2, #0
 800c868:	2100      	movs	r1, #0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff fca4 	bl	800c1b8 <disk_ioctl>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <sync_fs+0xca>
 800c876:	2301      	movs	r3, #1
 800c878:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	41615252 	.word	0x41615252
 800c888:	61417272 	.word	0x61417272

0800c88c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	3b02      	subs	r3, #2
 800c89a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	3b02      	subs	r3, #2
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d301      	bcc.n	800c8ac <clust2sect+0x20>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	e008      	b.n	800c8be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	895b      	ldrh	r3, [r3, #10]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	fb03 f202 	mul.w	r2, r3, r2
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8bc:	4413      	add	r3, r2
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d904      	bls.n	800c8ea <get_fat+0x20>
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d302      	bcc.n	800c8f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	617b      	str	r3, [r7, #20]
 800c8ee:	e08e      	b.n	800ca0e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	2b03      	cmp	r3, #3
 800c8fc:	d061      	beq.n	800c9c2 <get_fat+0xf8>
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	dc7b      	bgt.n	800c9fa <get_fat+0x130>
 800c902:	2b01      	cmp	r3, #1
 800c904:	d002      	beq.n	800c90c <get_fat+0x42>
 800c906:	2b02      	cmp	r3, #2
 800c908:	d041      	beq.n	800c98e <get_fat+0xc4>
 800c90a:	e076      	b.n	800c9fa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	085b      	lsrs	r3, r3, #1
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	4413      	add	r3, r2
 800c918:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	0a5b      	lsrs	r3, r3, #9
 800c922:	4413      	add	r3, r2
 800c924:	4619      	mov	r1, r3
 800c926:	6938      	ldr	r0, [r7, #16]
 800c928:	f7ff ff14 	bl	800c754 <move_window>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d166      	bne.n	800ca00 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	60fa      	str	r2, [r7, #12]
 800c938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4413      	add	r3, r2
 800c940:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c944:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	0a5b      	lsrs	r3, r3, #9
 800c94e:	4413      	add	r3, r2
 800c950:	4619      	mov	r1, r3
 800c952:	6938      	ldr	r0, [r7, #16]
 800c954:	f7ff fefe 	bl	800c754 <move_window>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d152      	bne.n	800ca04 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c964:	693a      	ldr	r2, [r7, #16]
 800c966:	4413      	add	r3, r2
 800c968:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c96c:	021b      	lsls	r3, r3, #8
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	4313      	orrs	r3, r2
 800c972:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d002      	beq.n	800c984 <get_fat+0xba>
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	091b      	lsrs	r3, r3, #4
 800c982:	e002      	b.n	800c98a <get_fat+0xc0>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c98a:	617b      	str	r3, [r7, #20]
			break;
 800c98c:	e03f      	b.n	800ca0e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	0a1b      	lsrs	r3, r3, #8
 800c996:	4413      	add	r3, r2
 800c998:	4619      	mov	r1, r3
 800c99a:	6938      	ldr	r0, [r7, #16]
 800c99c:	f7ff feda 	bl	800c754 <move_window>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d130      	bne.n	800ca08 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c9b4:	4413      	add	r3, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff fc1c 	bl	800c1f4 <ld_word>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	617b      	str	r3, [r7, #20]
			break;
 800c9c0:	e025      	b.n	800ca0e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	09db      	lsrs	r3, r3, #7
 800c9ca:	4413      	add	r3, r2
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	6938      	ldr	r0, [r7, #16]
 800c9d0:	f7ff fec0 	bl	800c754 <move_window>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d118      	bne.n	800ca0c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c9e8:	4413      	add	r3, r2
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fc1a 	bl	800c224 <ld_dword>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c9f6:	617b      	str	r3, [r7, #20]
			break;
 800c9f8:	e009      	b.n	800ca0e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	617b      	str	r3, [r7, #20]
 800c9fe:	e006      	b.n	800ca0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca00:	bf00      	nop
 800ca02:	e004      	b.n	800ca0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca04:	bf00      	nop
 800ca06:	e002      	b.n	800ca0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca08:	bf00      	nop
 800ca0a:	e000      	b.n	800ca0e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca0c:	bf00      	nop
		}
	}

	return val;
 800ca0e:	697b      	ldr	r3, [r7, #20]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3718      	adds	r7, #24
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ca18:	b590      	push	{r4, r7, lr}
 800ca1a:	b089      	sub	sp, #36	@ 0x24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ca24:	2302      	movs	r3, #2
 800ca26:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	f240 80d9 	bls.w	800cbe2 <put_fat+0x1ca>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	f080 80d3 	bcs.w	800cbe2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	f000 8096 	beq.w	800cb72 <put_fat+0x15a>
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	f300 80cb 	bgt.w	800cbe2 <put_fat+0x1ca>
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d002      	beq.n	800ca56 <put_fat+0x3e>
 800ca50:	2b02      	cmp	r3, #2
 800ca52:	d06e      	beq.n	800cb32 <put_fat+0x11a>
 800ca54:	e0c5      	b.n	800cbe2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	61bb      	str	r3, [r7, #24]
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	085b      	lsrs	r3, r3, #1
 800ca5e:	69ba      	ldr	r2, [r7, #24]
 800ca60:	4413      	add	r3, r2
 800ca62:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	0a5b      	lsrs	r3, r3, #9
 800ca6c:	4413      	add	r3, r2
 800ca6e:	4619      	mov	r1, r3
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f7ff fe6f 	bl	800c754 <move_window>
 800ca76:	4603      	mov	r3, r0
 800ca78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca7a:	7ffb      	ldrb	r3, [r7, #31]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f040 80a9 	bne.w	800cbd4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	1c59      	adds	r1, r3, #1
 800ca8c:	61b9      	str	r1, [r7, #24]
 800ca8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca92:	4413      	add	r3, r2
 800ca94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f003 0301 	and.w	r3, r3, #1
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00d      	beq.n	800cabc <put_fat+0xa4>
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	b25b      	sxtb	r3, r3
 800caa6:	f003 030f 	and.w	r3, r3, #15
 800caaa:	b25a      	sxtb	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	011b      	lsls	r3, r3, #4
 800cab2:	b25b      	sxtb	r3, r3
 800cab4:	4313      	orrs	r3, r2
 800cab6:	b25b      	sxtb	r3, r3
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	e001      	b.n	800cac0 <put_fat+0xa8>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	697a      	ldr	r2, [r7, #20]
 800cac2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2201      	movs	r2, #1
 800cac8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	0a5b      	lsrs	r3, r3, #9
 800cad2:	4413      	add	r3, r2
 800cad4:	4619      	mov	r1, r3
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f7ff fe3c 	bl	800c754 <move_window>
 800cadc:	4603      	mov	r3, r0
 800cade:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cae0:	7ffb      	ldrb	r3, [r7, #31]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d178      	bne.n	800cbd8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf2:	4413      	add	r3, r2
 800caf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <put_fat+0xf0>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	091b      	lsrs	r3, r3, #4
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	e00e      	b.n	800cb26 <put_fat+0x10e>
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	b25b      	sxtb	r3, r3
 800cb0e:	f023 030f 	bic.w	r3, r3, #15
 800cb12:	b25a      	sxtb	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	b25b      	sxtb	r3, r3
 800cb1a:	f003 030f 	and.w	r3, r3, #15
 800cb1e:	b25b      	sxtb	r3, r3
 800cb20:	4313      	orrs	r3, r2
 800cb22:	b25b      	sxtb	r3, r3
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	70da      	strb	r2, [r3, #3]
			break;
 800cb30:	e057      	b.n	800cbe2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	0a1b      	lsrs	r3, r3, #8
 800cb3a:	4413      	add	r3, r2
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	f7ff fe08 	bl	800c754 <move_window>
 800cb44:	4603      	mov	r3, r0
 800cb46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb48:	7ffb      	ldrb	r3, [r7, #31]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d146      	bne.n	800cbdc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cb5c:	4413      	add	r3, r2
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	b292      	uxth	r2, r2
 800cb62:	4611      	mov	r1, r2
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7ff fb80 	bl	800c26a <st_word>
			fs->wflag = 1;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	70da      	strb	r2, [r3, #3]
			break;
 800cb70:	e037      	b.n	800cbe2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	09db      	lsrs	r3, r3, #7
 800cb7a:	4413      	add	r3, r2
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f7ff fde8 	bl	800c754 <move_window>
 800cb84:	4603      	mov	r3, r0
 800cb86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb88:	7ffb      	ldrb	r3, [r7, #31]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d128      	bne.n	800cbe0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cba2:	4413      	add	r3, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff fb3d 	bl	800c224 <ld_dword>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cbb0:	4323      	orrs	r3, r4
 800cbb2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cbc2:	4413      	add	r3, r2
 800cbc4:	6879      	ldr	r1, [r7, #4]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7ff fb6a 	bl	800c2a0 <st_dword>
			fs->wflag = 1;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	70da      	strb	r2, [r3, #3]
			break;
 800cbd2:	e006      	b.n	800cbe2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cbd4:	bf00      	nop
 800cbd6:	e004      	b.n	800cbe2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cbd8:	bf00      	nop
 800cbda:	e002      	b.n	800cbe2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cbdc:	bf00      	nop
 800cbde:	e000      	b.n	800cbe2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cbe0:	bf00      	nop
		}
	}
	return res;
 800cbe2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3724      	adds	r7, #36	@ 0x24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd90      	pop	{r4, r7, pc}

0800cbec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d904      	bls.n	800cc12 <remove_chain+0x26>
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d301      	bcc.n	800cc16 <remove_chain+0x2a>
 800cc12:	2302      	movs	r3, #2
 800cc14:	e04b      	b.n	800ccae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00c      	beq.n	800cc36 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	69b8      	ldr	r0, [r7, #24]
 800cc24:	f7ff fef8 	bl	800ca18 <put_fat>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cc2c:	7ffb      	ldrb	r3, [r7, #31]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <remove_chain+0x4a>
 800cc32:	7ffb      	ldrb	r3, [r7, #31]
 800cc34:	e03b      	b.n	800ccae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cc36:	68b9      	ldr	r1, [r7, #8]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f7ff fe46 	bl	800c8ca <get_fat>
 800cc3e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d031      	beq.n	800ccaa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d101      	bne.n	800cc50 <remove_chain+0x64>
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	e02e      	b.n	800ccae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc56:	d101      	bne.n	800cc5c <remove_chain+0x70>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e028      	b.n	800ccae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	69b8      	ldr	r0, [r7, #24]
 800cc62:	f7ff fed9 	bl	800ca18 <put_fat>
 800cc66:	4603      	mov	r3, r0
 800cc68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cc6a:	7ffb      	ldrb	r3, [r7, #31]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <remove_chain+0x88>
 800cc70:	7ffb      	ldrb	r3, [r7, #31]
 800cc72:	e01c      	b.n	800ccae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	695a      	ldr	r2, [r3, #20]
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	3b02      	subs	r3, #2
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d20b      	bcs.n	800cc9a <remove_chain+0xae>
			fs->free_clst++;
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	791b      	ldrb	r3, [r3, #4]
 800cc90:	f043 0301 	orr.w	r3, r3, #1
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d3c6      	bcc.n	800cc36 <remove_chain+0x4a>
 800cca8:	e000      	b.n	800ccac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ccaa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3720      	adds	r7, #32
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b088      	sub	sp, #32
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10d      	bne.n	800cce8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d004      	beq.n	800cce2 <create_chain+0x2c>
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	69ba      	ldr	r2, [r7, #24]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d31b      	bcc.n	800cd1a <create_chain+0x64>
 800cce2:	2301      	movs	r3, #1
 800cce4:	61bb      	str	r3, [r7, #24]
 800cce6:	e018      	b.n	800cd1a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff fded 	bl	800c8ca <get_fat>
 800ccf0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d801      	bhi.n	800ccfc <create_chain+0x46>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e070      	b.n	800cdde <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd02:	d101      	bne.n	800cd08 <create_chain+0x52>
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	e06a      	b.n	800cdde <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d201      	bcs.n	800cd16 <create_chain+0x60>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	e063      	b.n	800cdde <create_chain+0x128>
		scl = clst;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	3301      	adds	r3, #1
 800cd22:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	699b      	ldr	r3, [r3, #24]
 800cd28:	69fa      	ldr	r2, [r7, #28]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d307      	bcc.n	800cd3e <create_chain+0x88>
				ncl = 2;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cd32:	69fa      	ldr	r2, [r7, #28]
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d901      	bls.n	800cd3e <create_chain+0x88>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e04f      	b.n	800cdde <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cd3e:	69f9      	ldr	r1, [r7, #28]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff fdc2 	bl	800c8ca <get_fat>
 800cd46:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00e      	beq.n	800cd6c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d003      	beq.n	800cd5c <create_chain+0xa6>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5a:	d101      	bne.n	800cd60 <create_chain+0xaa>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	e03e      	b.n	800cdde <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cd60:	69fa      	ldr	r2, [r7, #28]
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d1da      	bne.n	800cd1e <create_chain+0x68>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	e038      	b.n	800cdde <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cd6c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd72:	69f9      	ldr	r1, [r7, #28]
 800cd74:	6938      	ldr	r0, [r7, #16]
 800cd76:	f7ff fe4f 	bl	800ca18 <put_fat>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d109      	bne.n	800cd98 <create_chain+0xe2>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d006      	beq.n	800cd98 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cd8a:	69fa      	ldr	r2, [r7, #28]
 800cd8c:	6839      	ldr	r1, [r7, #0]
 800cd8e:	6938      	ldr	r0, [r7, #16]
 800cd90:	f7ff fe42 	bl	800ca18 <put_fat>
 800cd94:	4603      	mov	r3, r0
 800cd96:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d116      	bne.n	800cdcc <create_chain+0x116>
		fs->last_clst = ncl;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	69fa      	ldr	r2, [r7, #28]
 800cda2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	695a      	ldr	r2, [r3, #20]
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	3b02      	subs	r3, #2
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d804      	bhi.n	800cdbc <create_chain+0x106>
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	695b      	ldr	r3, [r3, #20]
 800cdb6:	1e5a      	subs	r2, r3, #1
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	791b      	ldrb	r3, [r3, #4]
 800cdc0:	f043 0301 	orr.w	r3, r3, #1
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	711a      	strb	r2, [r3, #4]
 800cdca:	e007      	b.n	800cddc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d102      	bne.n	800cdd8 <create_chain+0x122>
 800cdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd6:	e000      	b.n	800cdda <create_chain+0x124>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cddc:	69fb      	ldr	r3, [r7, #28]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3720      	adds	r7, #32
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b087      	sub	sp, #28
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	0a5b      	lsrs	r3, r3, #9
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	8952      	ldrh	r2, [r2, #10]
 800ce06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce0a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	1d1a      	adds	r2, r3, #4
 800ce10:	613a      	str	r2, [r7, #16]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <clmt_clust+0x3a>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	e010      	b.n	800ce42 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d307      	bcc.n	800ce38 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	617b      	str	r3, [r7, #20]
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	3304      	adds	r3, #4
 800ce34:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ce36:	e7e9      	b.n	800ce0c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ce38:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	4413      	add	r3, r2
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	371c      	adds	r7, #28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b086      	sub	sp, #24
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce64:	d204      	bcs.n	800ce70 <dir_sdi+0x22>
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	f003 031f 	and.w	r3, r3, #31
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ce70:	2302      	movs	r3, #2
 800ce72:	e063      	b.n	800cf3c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d106      	bne.n	800ce94 <dir_sdi+0x46>
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d902      	bls.n	800ce94 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce92:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d10c      	bne.n	800ceb4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	095b      	lsrs	r3, r3, #5
 800ce9e:	693a      	ldr	r2, [r7, #16]
 800cea0:	8912      	ldrh	r2, [r2, #8]
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d301      	bcc.n	800ceaa <dir_sdi+0x5c>
 800cea6:	2302      	movs	r3, #2
 800cea8:	e048      	b.n	800cf3c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	61da      	str	r2, [r3, #28]
 800ceb2:	e029      	b.n	800cf08 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	895b      	ldrh	r3, [r3, #10]
 800ceb8:	025b      	lsls	r3, r3, #9
 800ceba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cebc:	e019      	b.n	800cef2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6979      	ldr	r1, [r7, #20]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff fd01 	bl	800c8ca <get_fat>
 800cec8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced0:	d101      	bne.n	800ced6 <dir_sdi+0x88>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e032      	b.n	800cf3c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d904      	bls.n	800cee6 <dir_sdi+0x98>
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d301      	bcc.n	800ceea <dir_sdi+0x9c>
 800cee6:	2302      	movs	r3, #2
 800cee8:	e028      	b.n	800cf3c <dir_sdi+0xee>
			ofs -= csz;
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d2e1      	bcs.n	800cebe <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cefa:	6979      	ldr	r1, [r7, #20]
 800cefc:	6938      	ldr	r0, [r7, #16]
 800cefe:	f7ff fcc5 	bl	800c88c <clust2sect>
 800cf02:	4602      	mov	r2, r0
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <dir_sdi+0xcc>
 800cf16:	2302      	movs	r3, #2
 800cf18:	e010      	b.n	800cf3c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	69da      	ldr	r2, [r3, #28]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	0a5b      	lsrs	r3, r3, #9
 800cf22:	441a      	add	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf34:	441a      	add	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	3320      	adds	r3, #32
 800cf5a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	69db      	ldr	r3, [r3, #28]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d003      	beq.n	800cf6c <dir_next+0x28>
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf6a:	d301      	bcc.n	800cf70 <dir_next+0x2c>
 800cf6c:	2304      	movs	r3, #4
 800cf6e:	e0aa      	b.n	800d0c6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f040 8098 	bne.w	800d0ac <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	69db      	ldr	r3, [r3, #28]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	095b      	lsrs	r3, r3, #5
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	8912      	ldrh	r2, [r2, #8]
 800cf96:	4293      	cmp	r3, r2
 800cf98:	f0c0 8088 	bcc.w	800d0ac <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	61da      	str	r2, [r3, #28]
 800cfa2:	2304      	movs	r3, #4
 800cfa4:	e08f      	b.n	800d0c6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	0a5b      	lsrs	r3, r3, #9
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	8952      	ldrh	r2, [r2, #10]
 800cfae:	3a01      	subs	r2, #1
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d17a      	bne.n	800d0ac <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	f7ff fc83 	bl	800c8ca <get_fat>
 800cfc4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d801      	bhi.n	800cfd0 <dir_next+0x8c>
 800cfcc:	2302      	movs	r3, #2
 800cfce:	e07a      	b.n	800d0c6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd6:	d101      	bne.n	800cfdc <dir_next+0x98>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e074      	b.n	800d0c6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	697a      	ldr	r2, [r7, #20]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d358      	bcc.n	800d098 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d104      	bne.n	800cff6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	61da      	str	r2, [r3, #28]
 800cff2:	2304      	movs	r3, #4
 800cff4:	e067      	b.n	800d0c6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	4619      	mov	r1, r3
 800cffe:	4610      	mov	r0, r2
 800d000:	f7ff fe59 	bl	800ccb6 <create_chain>
 800d004:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d101      	bne.n	800d010 <dir_next+0xcc>
 800d00c:	2307      	movs	r3, #7
 800d00e:	e05a      	b.n	800d0c6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d101      	bne.n	800d01a <dir_next+0xd6>
 800d016:	2302      	movs	r3, #2
 800d018:	e055      	b.n	800d0c6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d020:	d101      	bne.n	800d026 <dir_next+0xe2>
 800d022:	2301      	movs	r3, #1
 800d024:	e04f      	b.n	800d0c6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f7ff fb50 	bl	800c6cc <sync_window>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <dir_next+0xf2>
 800d032:	2301      	movs	r3, #1
 800d034:	e047      	b.n	800d0c6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3334      	adds	r3, #52	@ 0x34
 800d03a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d03e:	2100      	movs	r1, #0
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff f97a 	bl	800c33a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d046:	2300      	movs	r3, #0
 800d048:	613b      	str	r3, [r7, #16]
 800d04a:	6979      	ldr	r1, [r7, #20]
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f7ff fc1d 	bl	800c88c <clust2sect>
 800d052:	4602      	mov	r2, r0
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	631a      	str	r2, [r3, #48]	@ 0x30
 800d058:	e012      	b.n	800d080 <dir_next+0x13c>
						fs->wflag = 1;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2201      	movs	r2, #1
 800d05e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f7ff fb33 	bl	800c6cc <sync_window>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <dir_next+0x12c>
 800d06c:	2301      	movs	r3, #1
 800d06e:	e02a      	b.n	800d0c6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	3301      	adds	r3, #1
 800d074:	613b      	str	r3, [r7, #16]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	895b      	ldrh	r3, [r3, #10]
 800d084:	461a      	mov	r2, r3
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	4293      	cmp	r3, r2
 800d08a:	d3e6      	bcc.n	800d05a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	1ad2      	subs	r2, r2, r3
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	697a      	ldr	r2, [r7, #20]
 800d09c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d09e:	6979      	ldr	r1, [r7, #20]
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7ff fbf3 	bl	800c88c <clust2sect>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0be:	441a      	add	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3718      	adds	r7, #24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b086      	sub	sp, #24
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d0de:	2100      	movs	r1, #0
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff feb4 	bl	800ce4e <dir_sdi>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d12b      	bne.n	800d148 <dir_alloc+0x7a>
		n = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	69db      	ldr	r3, [r3, #28]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff fb2a 	bl	800c754 <move_window>
 800d100:	4603      	mov	r3, r0
 800d102:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d104:	7dfb      	ldrb	r3, [r7, #23]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d11d      	bne.n	800d146 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2be5      	cmp	r3, #229	@ 0xe5
 800d112:	d004      	beq.n	800d11e <dir_alloc+0x50>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a1b      	ldr	r3, [r3, #32]
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d107      	bne.n	800d12e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	3301      	adds	r3, #1
 800d122:	613b      	str	r3, [r7, #16]
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d102      	bne.n	800d132 <dir_alloc+0x64>
 800d12c:	e00c      	b.n	800d148 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d12e:	2300      	movs	r3, #0
 800d130:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d132:	2101      	movs	r1, #1
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7ff ff05 	bl	800cf44 <dir_next>
 800d13a:	4603      	mov	r3, r0
 800d13c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d13e:	7dfb      	ldrb	r3, [r7, #23]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0d7      	beq.n	800d0f4 <dir_alloc+0x26>
 800d144:	e000      	b.n	800d148 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d146:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d148:	7dfb      	ldrb	r3, [r7, #23]
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d101      	bne.n	800d152 <dir_alloc+0x84>
 800d14e:	2307      	movs	r3, #7
 800d150:	75fb      	strb	r3, [r7, #23]
	return res;
 800d152:	7dfb      	ldrb	r3, [r7, #23]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3718      	adds	r7, #24
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	331a      	adds	r3, #26
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7ff f842 	bl	800c1f4 <ld_word>
 800d170:	4603      	mov	r3, r0
 800d172:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d109      	bne.n	800d190 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	3314      	adds	r3, #20
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff f837 	bl	800c1f4 <ld_word>
 800d186:	4603      	mov	r3, r0
 800d188:	041b      	lsls	r3, r3, #16
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d190:	68fb      	ldr	r3, [r7, #12]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	60f8      	str	r0, [r7, #12]
 800d1a2:	60b9      	str	r1, [r7, #8]
 800d1a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	331a      	adds	r3, #26
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	b292      	uxth	r2, r2
 800d1ae:	4611      	mov	r1, r2
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff f85a 	bl	800c26a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b03      	cmp	r3, #3
 800d1bc:	d109      	bne.n	800d1d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f103 0214 	add.w	r2, r3, #20
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	0c1b      	lsrs	r3, r3, #16
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	f7ff f84c 	bl	800c26a <st_word>
	}
}
 800d1d2:	bf00      	nop
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
	...

0800d1dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d1dc:	b590      	push	{r4, r7, lr}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	331a      	adds	r3, #26
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7ff f802 	bl	800c1f4 <ld_word>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d001      	beq.n	800d1fa <cmp_lfn+0x1e>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e059      	b.n	800d2ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d202:	1e5a      	subs	r2, r3, #1
 800d204:	4613      	mov	r3, r2
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d210:	2301      	movs	r3, #1
 800d212:	81fb      	strh	r3, [r7, #14]
 800d214:	2300      	movs	r3, #0
 800d216:	613b      	str	r3, [r7, #16]
 800d218:	e033      	b.n	800d282 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d21a:	4a27      	ldr	r2, [pc, #156]	@ (800d2b8 <cmp_lfn+0xdc>)
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	4413      	add	r3, r2
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	4413      	add	r3, r2
 800d228:	4618      	mov	r0, r3
 800d22a:	f7fe ffe3 	bl	800c1f4 <ld_word>
 800d22e:	4603      	mov	r3, r0
 800d230:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d232:	89fb      	ldrh	r3, [r7, #14]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01a      	beq.n	800d26e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d23c:	d812      	bhi.n	800d264 <cmp_lfn+0x88>
 800d23e:	89bb      	ldrh	r3, [r7, #12]
 800d240:	4618      	mov	r0, r3
 800d242:	f002 f99b 	bl	800f57c <ff_wtoupper>
 800d246:	4603      	mov	r3, r0
 800d248:	461c      	mov	r4, r3
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	617a      	str	r2, [r7, #20]
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	4413      	add	r3, r2
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	4618      	mov	r0, r3
 800d25a:	f002 f98f 	bl	800f57c <ff_wtoupper>
 800d25e:	4603      	mov	r3, r0
 800d260:	429c      	cmp	r4, r3
 800d262:	d001      	beq.n	800d268 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d264:	2300      	movs	r3, #0
 800d266:	e022      	b.n	800d2ae <cmp_lfn+0xd2>
			}
			wc = uc;
 800d268:	89bb      	ldrh	r3, [r7, #12]
 800d26a:	81fb      	strh	r3, [r7, #14]
 800d26c:	e006      	b.n	800d27c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d26e:	89bb      	ldrh	r3, [r7, #12]
 800d270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d274:	4293      	cmp	r3, r2
 800d276:	d001      	beq.n	800d27c <cmp_lfn+0xa0>
 800d278:	2300      	movs	r3, #0
 800d27a:	e018      	b.n	800d2ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	3301      	adds	r3, #1
 800d280:	613b      	str	r3, [r7, #16]
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	2b0c      	cmp	r3, #12
 800d286:	d9c8      	bls.n	800d21a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00b      	beq.n	800d2ac <cmp_lfn+0xd0>
 800d294:	89fb      	ldrh	r3, [r7, #14]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d008      	beq.n	800d2ac <cmp_lfn+0xd0>
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <cmp_lfn+0xd0>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	e000      	b.n	800d2ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d2ac:	2301      	movs	r3, #1
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	371c      	adds	r7, #28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd90      	pop	{r4, r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	08010194 	.word	0x08010194

0800d2bc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	331a      	adds	r3, #26
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fe ff92 	bl	800c1f4 <ld_word>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <pick_lfn+0x1e>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	e04d      	b.n	800d376 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2e2:	1e5a      	subs	r2, r3, #1
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	005b      	lsls	r3, r3, #1
 800d2e8:	4413      	add	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	4413      	add	r3, r2
 800d2ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	81fb      	strh	r3, [r7, #14]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	613b      	str	r3, [r7, #16]
 800d2f8:	e028      	b.n	800d34c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d2fa:	4a21      	ldr	r2, [pc, #132]	@ (800d380 <pick_lfn+0xc4>)
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	4413      	add	r3, r2
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	461a      	mov	r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	4413      	add	r3, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe ff73 	bl	800c1f4 <ld_word>
 800d30e:	4603      	mov	r3, r0
 800d310:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d312:	89fb      	ldrh	r3, [r7, #14]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00f      	beq.n	800d338 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d31c:	d901      	bls.n	800d322 <pick_lfn+0x66>
 800d31e:	2300      	movs	r3, #0
 800d320:	e029      	b.n	800d376 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d322:	89bb      	ldrh	r3, [r7, #12]
 800d324:	81fb      	strh	r3, [r7, #14]
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	617a      	str	r2, [r7, #20]
 800d32c:	005b      	lsls	r3, r3, #1
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	4413      	add	r3, r2
 800d332:	89fa      	ldrh	r2, [r7, #14]
 800d334:	801a      	strh	r2, [r3, #0]
 800d336:	e006      	b.n	800d346 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d338:	89bb      	ldrh	r3, [r7, #12]
 800d33a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d33e:	4293      	cmp	r3, r2
 800d340:	d001      	beq.n	800d346 <pick_lfn+0x8a>
 800d342:	2300      	movs	r3, #0
 800d344:	e017      	b.n	800d376 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	3301      	adds	r3, #1
 800d34a:	613b      	str	r3, [r7, #16]
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	2b0c      	cmp	r3, #12
 800d350:	d9d3      	bls.n	800d2fa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00a      	beq.n	800d374 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2bfe      	cmp	r3, #254	@ 0xfe
 800d362:	d901      	bls.n	800d368 <pick_lfn+0xac>
 800d364:	2300      	movs	r3, #0
 800d366:	e006      	b.n	800d376 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	4413      	add	r3, r2
 800d370:	2200      	movs	r2, #0
 800d372:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d374:	2301      	movs	r3, #1
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	08010194 	.word	0x08010194

0800d384 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	4611      	mov	r1, r2
 800d390:	461a      	mov	r2, r3
 800d392:	460b      	mov	r3, r1
 800d394:	71fb      	strb	r3, [r7, #7]
 800d396:	4613      	mov	r3, r2
 800d398:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	330d      	adds	r3, #13
 800d39e:	79ba      	ldrb	r2, [r7, #6]
 800d3a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	330b      	adds	r3, #11
 800d3a6:	220f      	movs	r2, #15
 800d3a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	330c      	adds	r3, #12
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	331a      	adds	r3, #26
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe ff56 	bl	800c26a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d3be:	79fb      	ldrb	r3, [r7, #7]
 800d3c0:	1e5a      	subs	r2, r3, #1
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	82fb      	strh	r3, [r7, #22]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d3d6:	8afb      	ldrh	r3, [r7, #22]
 800d3d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d007      	beq.n	800d3f0 <put_lfn+0x6c>
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	61fa      	str	r2, [r7, #28]
 800d3e6:	005b      	lsls	r3, r3, #1
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	881b      	ldrh	r3, [r3, #0]
 800d3ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d3f0:	4a17      	ldr	r2, [pc, #92]	@ (800d450 <put_lfn+0xcc>)
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	8afa      	ldrh	r2, [r7, #22]
 800d400:	4611      	mov	r1, r2
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe ff31 	bl	800c26a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d408:	8afb      	ldrh	r3, [r7, #22]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <put_lfn+0x90>
 800d40e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d412:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	3301      	adds	r3, #1
 800d418:	61bb      	str	r3, [r7, #24]
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	2b0c      	cmp	r3, #12
 800d41e:	d9da      	bls.n	800d3d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d420:	8afb      	ldrh	r3, [r7, #22]
 800d422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d426:	4293      	cmp	r3, r2
 800d428:	d006      	beq.n	800d438 <put_lfn+0xb4>
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	4413      	add	r3, r2
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d103      	bne.n	800d440 <put_lfn+0xbc>
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d43e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	79fa      	ldrb	r2, [r7, #7]
 800d444:	701a      	strb	r2, [r3, #0]
}
 800d446:	bf00      	nop
 800d448:	3720      	adds	r7, #32
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	08010194 	.word	0x08010194

0800d454 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08c      	sub	sp, #48	@ 0x30
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d462:	220b      	movs	r2, #11
 800d464:	68b9      	ldr	r1, [r7, #8]
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7fe ff46 	bl	800c2f8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2b05      	cmp	r3, #5
 800d470:	d92b      	bls.n	800d4ca <gen_numname+0x76>
		sr = seq;
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d476:	e022      	b.n	800d4be <gen_numname+0x6a>
			wc = *lfn++;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	1c9a      	adds	r2, r3, #2
 800d47c:	607a      	str	r2, [r7, #4]
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d482:	2300      	movs	r3, #0
 800d484:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d486:	e017      	b.n	800d4b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	005a      	lsls	r2, r3, #1
 800d48c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	4413      	add	r3, r2
 800d494:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d496:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d498:	085b      	lsrs	r3, r3, #1
 800d49a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d005      	beq.n	800d4b2 <gen_numname+0x5e>
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800d4ac:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800d4b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ba:	2b0f      	cmp	r3, #15
 800d4bc:	d9e4      	bls.n	800d488 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1d8      	bne.n	800d478 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d4ca:	2307      	movs	r3, #7
 800d4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	f003 030f 	and.w	r3, r3, #15
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	3330      	adds	r3, #48	@ 0x30
 800d4da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d4de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4e2:	2b39      	cmp	r3, #57	@ 0x39
 800d4e4:	d904      	bls.n	800d4f0 <gen_numname+0x9c>
 800d4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4ea:	3307      	adds	r3, #7
 800d4ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f2:	1e5a      	subs	r2, r3, #1
 800d4f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d4f6:	3330      	adds	r3, #48	@ 0x30
 800d4f8:	443b      	add	r3, r7
 800d4fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d4fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	091b      	lsrs	r3, r3, #4
 800d506:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1df      	bne.n	800d4ce <gen_numname+0x7a>
	ns[i] = '~';
 800d50e:	f107 0214 	add.w	r2, r7, #20
 800d512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d514:	4413      	add	r3, r2
 800d516:	227e      	movs	r2, #126	@ 0x7e
 800d518:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d51a:	2300      	movs	r3, #0
 800d51c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d51e:	e002      	b.n	800d526 <gen_numname+0xd2>
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	3301      	adds	r3, #1
 800d524:	627b      	str	r3, [r7, #36]	@ 0x24
 800d526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d205      	bcs.n	800d53a <gen_numname+0xe6>
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d532:	4413      	add	r3, r2
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	2b20      	cmp	r3, #32
 800d538:	d1f2      	bne.n	800d520 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d53c:	2b07      	cmp	r3, #7
 800d53e:	d807      	bhi.n	800d550 <gen_numname+0xfc>
 800d540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d546:	3330      	adds	r3, #48	@ 0x30
 800d548:	443b      	add	r3, r7
 800d54a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d54e:	e000      	b.n	800d552 <gen_numname+0xfe>
 800d550:	2120      	movs	r1, #32
 800d552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	627a      	str	r2, [r7, #36]	@ 0x24
 800d558:	68fa      	ldr	r2, [r7, #12]
 800d55a:	4413      	add	r3, r2
 800d55c:	460a      	mov	r2, r1
 800d55e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d562:	2b07      	cmp	r3, #7
 800d564:	d9e9      	bls.n	800d53a <gen_numname+0xe6>
}
 800d566:	bf00      	nop
 800d568:	bf00      	nop
 800d56a:	3730      	adds	r7, #48	@ 0x30
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d57c:	230b      	movs	r3, #11
 800d57e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
 800d582:	b2da      	uxtb	r2, r3
 800d584:	0852      	lsrs	r2, r2, #1
 800d586:	01db      	lsls	r3, r3, #7
 800d588:	4313      	orrs	r3, r2
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	1c59      	adds	r1, r3, #1
 800d590:	6079      	str	r1, [r7, #4]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	4413      	add	r3, r2
 800d596:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	60bb      	str	r3, [r7, #8]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1ed      	bne.n	800d580 <sum_sfn+0x10>
	return sum;
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3714      	adds	r7, #20
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b086      	sub	sp, #24
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d5bc:	2304      	movs	r3, #4
 800d5be:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d5c6:	23ff      	movs	r3, #255	@ 0xff
 800d5c8:	757b      	strb	r3, [r7, #21]
 800d5ca:	23ff      	movs	r3, #255	@ 0xff
 800d5cc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d5ce:	e081      	b.n	800d6d4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	69db      	ldr	r3, [r3, #28]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6938      	ldr	r0, [r7, #16]
 800d5d8:	f7ff f8bc 	bl	800c754 <move_window>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d17c      	bne.n	800d6e0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d5ee:	7dbb      	ldrb	r3, [r7, #22]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d102      	bne.n	800d5fa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d5f4:	2304      	movs	r3, #4
 800d5f6:	75fb      	strb	r3, [r7, #23]
 800d5f8:	e077      	b.n	800d6ea <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	330b      	adds	r3, #11
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d606:	73fb      	strb	r3, [r7, #15]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	7bfa      	ldrb	r2, [r7, #15]
 800d60c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d60e:	7dbb      	ldrb	r3, [r7, #22]
 800d610:	2be5      	cmp	r3, #229	@ 0xe5
 800d612:	d00e      	beq.n	800d632 <dir_read+0x80>
 800d614:	7dbb      	ldrb	r3, [r7, #22]
 800d616:	2b2e      	cmp	r3, #46	@ 0x2e
 800d618:	d00b      	beq.n	800d632 <dir_read+0x80>
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	f023 0320 	bic.w	r3, r3, #32
 800d620:	2b08      	cmp	r3, #8
 800d622:	bf0c      	ite	eq
 800d624:	2301      	moveq	r3, #1
 800d626:	2300      	movne	r3, #0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	461a      	mov	r2, r3
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	4293      	cmp	r3, r2
 800d630:	d002      	beq.n	800d638 <dir_read+0x86>
				ord = 0xFF;
 800d632:	23ff      	movs	r3, #255	@ 0xff
 800d634:	757b      	strb	r3, [r7, #21]
 800d636:	e044      	b.n	800d6c2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	2b0f      	cmp	r3, #15
 800d63c:	d12f      	bne.n	800d69e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d63e:	7dbb      	ldrb	r3, [r7, #22]
 800d640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00d      	beq.n	800d664 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a1b      	ldr	r3, [r3, #32]
 800d64c:	7b5b      	ldrb	r3, [r3, #13]
 800d64e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d650:	7dbb      	ldrb	r3, [r7, #22]
 800d652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d656:	75bb      	strb	r3, [r7, #22]
 800d658:	7dbb      	ldrb	r3, [r7, #22]
 800d65a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	695a      	ldr	r2, [r3, #20]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d664:	7dba      	ldrb	r2, [r7, #22]
 800d666:	7d7b      	ldrb	r3, [r7, #21]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d115      	bne.n	800d698 <dir_read+0xe6>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a1b      	ldr	r3, [r3, #32]
 800d670:	330d      	adds	r3, #13
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	7d3a      	ldrb	r2, [r7, #20]
 800d676:	429a      	cmp	r2, r3
 800d678:	d10e      	bne.n	800d698 <dir_read+0xe6>
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	68da      	ldr	r2, [r3, #12]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	4619      	mov	r1, r3
 800d684:	4610      	mov	r0, r2
 800d686:	f7ff fe19 	bl	800d2bc <pick_lfn>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d003      	beq.n	800d698 <dir_read+0xe6>
 800d690:	7d7b      	ldrb	r3, [r7, #21]
 800d692:	3b01      	subs	r3, #1
 800d694:	b2db      	uxtb	r3, r3
 800d696:	e000      	b.n	800d69a <dir_read+0xe8>
 800d698:	23ff      	movs	r3, #255	@ 0xff
 800d69a:	757b      	strb	r3, [r7, #21]
 800d69c:	e011      	b.n	800d6c2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d69e:	7d7b      	ldrb	r3, [r7, #21]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d109      	bne.n	800d6b8 <dir_read+0x106>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff ff61 	bl	800d570 <sum_sfn>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	7d3b      	ldrb	r3, [r7, #20]
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d015      	beq.n	800d6e4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d6be:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800d6c0:	e010      	b.n	800d6e4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff fc3d 	bl	800cf44 <dir_next>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <dir_read+0x136>
	while (dp->sect) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	69db      	ldr	r3, [r3, #28]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f47f af79 	bne.w	800d5d0 <dir_read+0x1e>
 800d6de:	e004      	b.n	800d6ea <dir_read+0x138>
		if (res != FR_OK) break;
 800d6e0:	bf00      	nop
 800d6e2:	e002      	b.n	800d6ea <dir_read+0x138>
					break;
 800d6e4:	bf00      	nop
 800d6e6:	e000      	b.n	800d6ea <dir_read+0x138>
		if (res != FR_OK) break;
 800d6e8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <dir_read+0x144>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	61da      	str	r2, [r3, #28]
	return res;
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d70e:	2100      	movs	r1, #0
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7ff fb9c 	bl	800ce4e <dir_sdi>
 800d716:	4603      	mov	r3, r0
 800d718:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <dir_find+0x24>
 800d720:	7dfb      	ldrb	r3, [r7, #23]
 800d722:	e0a9      	b.n	800d878 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d724:	23ff      	movs	r3, #255	@ 0xff
 800d726:	753b      	strb	r3, [r7, #20]
 800d728:	7d3b      	ldrb	r3, [r7, #20]
 800d72a:	757b      	strb	r3, [r7, #21]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f04f 32ff 	mov.w	r2, #4294967295
 800d732:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	69db      	ldr	r3, [r3, #28]
 800d738:	4619      	mov	r1, r3
 800d73a:	6938      	ldr	r0, [r7, #16]
 800d73c:	f7ff f80a 	bl	800c754 <move_window>
 800d740:	4603      	mov	r3, r0
 800d742:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d744:	7dfb      	ldrb	r3, [r7, #23]
 800d746:	2b00      	cmp	r3, #0
 800d748:	f040 8090 	bne.w	800d86c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d754:	7dbb      	ldrb	r3, [r7, #22]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d102      	bne.n	800d760 <dir_find+0x60>
 800d75a:	2304      	movs	r3, #4
 800d75c:	75fb      	strb	r3, [r7, #23]
 800d75e:	e08a      	b.n	800d876 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	330b      	adds	r3, #11
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d76c:	73fb      	strb	r3, [r7, #15]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	7bfa      	ldrb	r2, [r7, #15]
 800d772:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d774:	7dbb      	ldrb	r3, [r7, #22]
 800d776:	2be5      	cmp	r3, #229	@ 0xe5
 800d778:	d007      	beq.n	800d78a <dir_find+0x8a>
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
 800d77c:	f003 0308 	and.w	r3, r3, #8
 800d780:	2b00      	cmp	r3, #0
 800d782:	d009      	beq.n	800d798 <dir_find+0x98>
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	2b0f      	cmp	r3, #15
 800d788:	d006      	beq.n	800d798 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d78a:	23ff      	movs	r3, #255	@ 0xff
 800d78c:	757b      	strb	r3, [r7, #21]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f04f 32ff 	mov.w	r2, #4294967295
 800d794:	631a      	str	r2, [r3, #48]	@ 0x30
 800d796:	e05e      	b.n	800d856 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	2b0f      	cmp	r3, #15
 800d79c:	d136      	bne.n	800d80c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d7a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d154      	bne.n	800d856 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d7ac:	7dbb      	ldrb	r3, [r7, #22]
 800d7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00d      	beq.n	800d7d2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a1b      	ldr	r3, [r3, #32]
 800d7ba:	7b5b      	ldrb	r3, [r3, #13]
 800d7bc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d7be:	7dbb      	ldrb	r3, [r7, #22]
 800d7c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7c4:	75bb      	strb	r3, [r7, #22]
 800d7c6:	7dbb      	ldrb	r3, [r7, #22]
 800d7c8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	695a      	ldr	r2, [r3, #20]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d7d2:	7dba      	ldrb	r2, [r7, #22]
 800d7d4:	7d7b      	ldrb	r3, [r7, #21]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d115      	bne.n	800d806 <dir_find+0x106>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a1b      	ldr	r3, [r3, #32]
 800d7de:	330d      	adds	r3, #13
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	7d3a      	ldrb	r2, [r7, #20]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d10e      	bne.n	800d806 <dir_find+0x106>
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	68da      	ldr	r2, [r3, #12]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a1b      	ldr	r3, [r3, #32]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	4610      	mov	r0, r2
 800d7f4:	f7ff fcf2 	bl	800d1dc <cmp_lfn>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <dir_find+0x106>
 800d7fe:	7d7b      	ldrb	r3, [r7, #21]
 800d800:	3b01      	subs	r3, #1
 800d802:	b2db      	uxtb	r3, r3
 800d804:	e000      	b.n	800d808 <dir_find+0x108>
 800d806:	23ff      	movs	r3, #255	@ 0xff
 800d808:	757b      	strb	r3, [r7, #21]
 800d80a:	e024      	b.n	800d856 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d80c:	7d7b      	ldrb	r3, [r7, #21]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d109      	bne.n	800d826 <dir_find+0x126>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff feaa 	bl	800d570 <sum_sfn>
 800d81c:	4603      	mov	r3, r0
 800d81e:	461a      	mov	r2, r3
 800d820:	7d3b      	ldrb	r3, [r7, #20]
 800d822:	4293      	cmp	r3, r2
 800d824:	d024      	beq.n	800d870 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d82c:	f003 0301 	and.w	r3, r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10a      	bne.n	800d84a <dir_find+0x14a>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a18      	ldr	r0, [r3, #32]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	3324      	adds	r3, #36	@ 0x24
 800d83c:	220b      	movs	r2, #11
 800d83e:	4619      	mov	r1, r3
 800d840:	f7fe fd96 	bl	800c370 <mem_cmp>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d014      	beq.n	800d874 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d84a:	23ff      	movs	r3, #255	@ 0xff
 800d84c:	757b      	strb	r3, [r7, #21]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f04f 32ff 	mov.w	r2, #4294967295
 800d854:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d856:	2100      	movs	r1, #0
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff fb73 	bl	800cf44 <dir_next>
 800d85e:	4603      	mov	r3, r0
 800d860:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d862:	7dfb      	ldrb	r3, [r7, #23]
 800d864:	2b00      	cmp	r3, #0
 800d866:	f43f af65 	beq.w	800d734 <dir_find+0x34>
 800d86a:	e004      	b.n	800d876 <dir_find+0x176>
		if (res != FR_OK) break;
 800d86c:	bf00      	nop
 800d86e:	e002      	b.n	800d876 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d870:	bf00      	nop
 800d872:	e000      	b.n	800d876 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d874:	bf00      	nop

	return res;
 800d876:	7dfb      	ldrb	r3, [r7, #23]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08c      	sub	sp, #48	@ 0x30
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d894:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d001      	beq.n	800d8a0 <dir_register+0x20>
 800d89c:	2306      	movs	r3, #6
 800d89e:	e0e0      	b.n	800da62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8a4:	e002      	b.n	800d8ac <dir_register+0x2c>
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	68da      	ldr	r2, [r3, #12]
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	4413      	add	r3, r2
 800d8b6:	881b      	ldrh	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1f4      	bne.n	800d8a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d8c2:	f107 030c 	add.w	r3, r7, #12
 800d8c6:	220c      	movs	r2, #12
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe fd15 	bl	800c2f8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d8ce:	7dfb      	ldrb	r3, [r7, #23]
 800d8d0:	f003 0301 	and.w	r3, r3, #1
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d032      	beq.n	800d93e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2240      	movs	r2, #64	@ 0x40
 800d8dc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8e4:	e016      	b.n	800d914 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	68da      	ldr	r2, [r3, #12]
 800d8f0:	f107 010c 	add.w	r1, r7, #12
 800d8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f6:	f7ff fdad 	bl	800d454 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7ff ff00 	bl	800d700 <dir_find>
 800d900:	4603      	mov	r3, r0
 800d902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d106      	bne.n	800d91c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d910:	3301      	adds	r3, #1
 800d912:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d916:	2b63      	cmp	r3, #99	@ 0x63
 800d918:	d9e5      	bls.n	800d8e6 <dir_register+0x66>
 800d91a:	e000      	b.n	800d91e <dir_register+0x9e>
			if (res != FR_OK) break;
 800d91c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d920:	2b64      	cmp	r3, #100	@ 0x64
 800d922:	d101      	bne.n	800d928 <dir_register+0xa8>
 800d924:	2307      	movs	r3, #7
 800d926:	e09c      	b.n	800da62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d002      	beq.n	800d936 <dir_register+0xb6>
 800d930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d934:	e095      	b.n	800da62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d936:	7dfa      	ldrb	r2, [r7, #23]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	f003 0302 	and.w	r3, r3, #2
 800d944:	2b00      	cmp	r3, #0
 800d946:	d007      	beq.n	800d958 <dir_register+0xd8>
 800d948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94a:	330c      	adds	r3, #12
 800d94c:	4a47      	ldr	r2, [pc, #284]	@ (800da6c <dir_register+0x1ec>)
 800d94e:	fba2 2303 	umull	r2, r3, r2, r3
 800d952:	089b      	lsrs	r3, r3, #2
 800d954:	3301      	adds	r3, #1
 800d956:	e000      	b.n	800d95a <dir_register+0xda>
 800d958:	2301      	movs	r3, #1
 800d95a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d95c:	6a39      	ldr	r1, [r7, #32]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff fbb5 	bl	800d0ce <dir_alloc>
 800d964:	4603      	mov	r3, r0
 800d966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d96a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d148      	bne.n	800da04 <dir_register+0x184>
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	3b01      	subs	r3, #1
 800d976:	623b      	str	r3, [r7, #32]
 800d978:	6a3b      	ldr	r3, [r7, #32]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d042      	beq.n	800da04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	695a      	ldr	r2, [r3, #20]
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	015b      	lsls	r3, r3, #5
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	4619      	mov	r1, r3
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff fa5f 	bl	800ce4e <dir_sdi>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d132      	bne.n	800da04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	3324      	adds	r3, #36	@ 0x24
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff fde4 	bl	800d570 <sum_sfn>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	69f8      	ldr	r0, [r7, #28]
 800d9b4:	f7fe fece 	bl	800c754 <move_window>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d9be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d11d      	bne.n	800da02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	68d8      	ldr	r0, [r3, #12]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a19      	ldr	r1, [r3, #32]
 800d9ce:	6a3b      	ldr	r3, [r7, #32]
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	7efb      	ldrb	r3, [r7, #27]
 800d9d4:	f7ff fcd6 	bl	800d384 <put_lfn>
				fs->wflag = 1;
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d9de:	2100      	movs	r1, #0
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff faaf 	bl	800cf44 <dir_next>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d9ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d107      	bne.n	800da04 <dir_register+0x184>
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	623b      	str	r3, [r7, #32]
 800d9fa:	6a3b      	ldr	r3, [r7, #32]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1d5      	bne.n	800d9ac <dir_register+0x12c>
 800da00:	e000      	b.n	800da04 <dir_register+0x184>
				if (res != FR_OK) break;
 800da02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800da04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d128      	bne.n	800da5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	69db      	ldr	r3, [r3, #28]
 800da10:	4619      	mov	r1, r3
 800da12:	69f8      	ldr	r0, [r7, #28]
 800da14:	f7fe fe9e 	bl	800c754 <move_window>
 800da18:	4603      	mov	r3, r0
 800da1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800da1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da22:	2b00      	cmp	r3, #0
 800da24:	d11b      	bne.n	800da5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	2220      	movs	r2, #32
 800da2c:	2100      	movs	r1, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe fc83 	bl	800c33a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a18      	ldr	r0, [r3, #32]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3324      	adds	r3, #36	@ 0x24
 800da3c:	220b      	movs	r2, #11
 800da3e:	4619      	mov	r1, r3
 800da40:	f7fe fc5a 	bl	800c2f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a1b      	ldr	r3, [r3, #32]
 800da4e:	330c      	adds	r3, #12
 800da50:	f002 0218 	and.w	r2, r2, #24
 800da54:	b2d2      	uxtb	r2, r2
 800da56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	2201      	movs	r2, #1
 800da5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800da5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800da62:	4618      	mov	r0, r3
 800da64:	3730      	adds	r7, #48	@ 0x30
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	4ec4ec4f 	.word	0x4ec4ec4f

0800da70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2200      	movs	r2, #0
 800da84:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	69db      	ldr	r3, [r3, #28]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 80ca 	beq.w	800dc24 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da98:	d032      	beq.n	800db00 <get_fileinfo+0x90>
			i = j = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	61bb      	str	r3, [r7, #24]
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800daa2:	e01b      	b.n	800dadc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800daa4:	89fb      	ldrh	r3, [r7, #14]
 800daa6:	2100      	movs	r1, #0
 800daa8:	4618      	mov	r0, r3
 800daaa:	f001 fd2b 	bl	800f504 <ff_convert>
 800daae:	4603      	mov	r3, r0
 800dab0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800dab2:	89fb      	ldrh	r3, [r7, #14]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <get_fileinfo+0x4e>
 800dab8:	2300      	movs	r3, #0
 800daba:	61fb      	str	r3, [r7, #28]
 800dabc:	e01a      	b.n	800daf4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	2bfe      	cmp	r3, #254	@ 0xfe
 800dac2:	d902      	bls.n	800daca <get_fileinfo+0x5a>
 800dac4:	2300      	movs	r3, #0
 800dac6:	61fb      	str	r3, [r7, #28]
 800dac8:	e014      	b.n	800daf4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	1c5a      	adds	r2, r3, #1
 800dace:	61fa      	str	r2, [r7, #28]
 800dad0:	89fa      	ldrh	r2, [r7, #14]
 800dad2:	b2d1      	uxtb	r1, r2
 800dad4:	683a      	ldr	r2, [r7, #0]
 800dad6:	4413      	add	r3, r2
 800dad8:	460a      	mov	r2, r1
 800dada:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	68da      	ldr	r2, [r3, #12]
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	1c59      	adds	r1, r3, #1
 800dae4:	61b9      	str	r1, [r7, #24]
 800dae6:	005b      	lsls	r3, r3, #1
 800dae8:	4413      	add	r3, r2
 800daea:	881b      	ldrh	r3, [r3, #0]
 800daec:	81fb      	strh	r3, [r7, #14]
 800daee:	89fb      	ldrh	r3, [r7, #14]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1d7      	bne.n	800daa4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	4413      	add	r3, r2
 800dafa:	3316      	adds	r3, #22
 800dafc:	2200      	movs	r2, #0
 800dafe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800db00:	2300      	movs	r3, #0
 800db02:	61bb      	str	r3, [r7, #24]
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	4413      	add	r3, r2
 800db0e:	3316      	adds	r3, #22
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800db14:	e04d      	b.n	800dbb2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a1a      	ldr	r2, [r3, #32]
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	1c59      	adds	r1, r3, #1
 800db1e:	61f9      	str	r1, [r7, #28]
 800db20:	4413      	add	r3, r2
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800db26:	7dfb      	ldrb	r3, [r7, #23]
 800db28:	2b20      	cmp	r3, #32
 800db2a:	d041      	beq.n	800dbb0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	2b05      	cmp	r3, #5
 800db30:	d101      	bne.n	800db36 <get_fileinfo+0xc6>
 800db32:	23e5      	movs	r3, #229	@ 0xe5
 800db34:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	2b09      	cmp	r3, #9
 800db3a:	d10f      	bne.n	800db5c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800db3c:	89bb      	ldrh	r3, [r7, #12]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d105      	bne.n	800db4e <get_fileinfo+0xde>
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	4413      	add	r3, r2
 800db48:	3316      	adds	r3, #22
 800db4a:	222e      	movs	r2, #46	@ 0x2e
 800db4c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	61ba      	str	r2, [r7, #24]
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	4413      	add	r3, r2
 800db58:	222e      	movs	r2, #46	@ 0x2e
 800db5a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	4413      	add	r3, r2
 800db62:	3309      	adds	r3, #9
 800db64:	7dfa      	ldrb	r2, [r7, #23]
 800db66:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800db68:	89bb      	ldrh	r3, [r7, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d11c      	bne.n	800dba8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800db6e:	7dfb      	ldrb	r3, [r7, #23]
 800db70:	2b40      	cmp	r3, #64	@ 0x40
 800db72:	d913      	bls.n	800db9c <get_fileinfo+0x12c>
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	2b5a      	cmp	r3, #90	@ 0x5a
 800db78:	d810      	bhi.n	800db9c <get_fileinfo+0x12c>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	330c      	adds	r3, #12
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	2b08      	cmp	r3, #8
 800db88:	d901      	bls.n	800db8e <get_fileinfo+0x11e>
 800db8a:	2310      	movs	r3, #16
 800db8c:	e000      	b.n	800db90 <get_fileinfo+0x120>
 800db8e:	2308      	movs	r3, #8
 800db90:	4013      	ands	r3, r2
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	3320      	adds	r3, #32
 800db9a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800db9c:	683a      	ldr	r2, [r7, #0]
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	4413      	add	r3, r2
 800dba2:	3316      	adds	r3, #22
 800dba4:	7dfa      	ldrb	r2, [r7, #23]
 800dba6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	e000      	b.n	800dbb2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800dbb0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	2b0a      	cmp	r3, #10
 800dbb6:	d9ae      	bls.n	800db16 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800dbb8:	89bb      	ldrh	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10d      	bne.n	800dbda <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	3316      	adds	r3, #22
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	330c      	adds	r3, #12
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <get_fileinfo+0x16a>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	4413      	add	r3, r2
 800dbe0:	3309      	adds	r3, #9
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	7ada      	ldrb	r2, [r3, #11]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a1b      	ldr	r3, [r3, #32]
 800dbf4:	331c      	adds	r3, #28
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fe fb14 	bl	800c224 <ld_dword>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	3316      	adds	r3, #22
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fb0b 	bl	800c224 <ld_dword>
 800dc0e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	80da      	strh	r2, [r3, #6]
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	0c1b      	lsrs	r3, r3, #16
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	809a      	strh	r2, [r3, #4]
 800dc22:	e000      	b.n	800dc26 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dc24:	bf00      	nop
}
 800dc26:	3720      	adds	r7, #32
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08a      	sub	sp, #40	@ 0x28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	613b      	str	r3, [r7, #16]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	60fb      	str	r3, [r7, #12]
 800dc44:	2300      	movs	r3, #0
 800dc46:	617b      	str	r3, [r7, #20]
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	1c5a      	adds	r2, r3, #1
 800dc50:	61ba      	str	r2, [r7, #24]
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	4413      	add	r3, r2
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dc5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc5c:	2b1f      	cmp	r3, #31
 800dc5e:	d940      	bls.n	800dce2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dc60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc62:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc64:	d006      	beq.n	800dc74 <create_name+0x48>
 800dc66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc68:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc6a:	d110      	bne.n	800dc8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dc6c:	e002      	b.n	800dc74 <create_name+0x48>
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	3301      	adds	r3, #1
 800dc72:	61bb      	str	r3, [r7, #24]
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	4413      	add	r3, r2
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc7e:	d0f6      	beq.n	800dc6e <create_name+0x42>
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	4413      	add	r3, r2
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc8a:	d0f0      	beq.n	800dc6e <create_name+0x42>
			break;
 800dc8c:	e02a      	b.n	800dce4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	2bfe      	cmp	r3, #254	@ 0xfe
 800dc92:	d901      	bls.n	800dc98 <create_name+0x6c>
 800dc94:	2306      	movs	r3, #6
 800dc96:	e17d      	b.n	800df94 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dc98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dc9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dca0:	2101      	movs	r1, #1
 800dca2:	4618      	mov	r0, r3
 800dca4:	f001 fc2e 	bl	800f504 <ff_convert>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dcac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d101      	bne.n	800dcb6 <create_name+0x8a>
 800dcb2:	2306      	movs	r3, #6
 800dcb4:	e16e      	b.n	800df94 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dcb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcb8:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcba:	d809      	bhi.n	800dcd0 <create_name+0xa4>
 800dcbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	488d      	ldr	r0, [pc, #564]	@ (800def8 <create_name+0x2cc>)
 800dcc2:	f7fe fb7c 	bl	800c3be <chk_chr>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <create_name+0xa4>
 800dccc:	2306      	movs	r3, #6
 800dcce:	e161      	b.n	800df94 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	1c5a      	adds	r2, r3, #1
 800dcd4:	617a      	str	r2, [r7, #20]
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	4413      	add	r3, r2
 800dcdc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dcde:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dce0:	e7b4      	b.n	800dc4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dce2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	441a      	add	r2, r3
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dcee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcf0:	2b1f      	cmp	r3, #31
 800dcf2:	d801      	bhi.n	800dcf8 <create_name+0xcc>
 800dcf4:	2304      	movs	r3, #4
 800dcf6:	e000      	b.n	800dcfa <create_name+0xce>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dcfe:	e011      	b.n	800dd24 <create_name+0xf8>
		w = lfn[di - 1];
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dd06:	3b01      	subs	r3, #1
 800dd08:	005b      	lsls	r3, r3, #1
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800dd12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd14:	2b20      	cmp	r3, #32
 800dd16:	d002      	beq.n	800dd1e <create_name+0xf2>
 800dd18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd1c:	d106      	bne.n	800dd2c <create_name+0x100>
		di--;
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1ea      	bne.n	800dd00 <create_name+0xd4>
 800dd2a:	e000      	b.n	800dd2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dd2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	4413      	add	r3, r2
 800dd36:	2200      	movs	r2, #0
 800dd38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <create_name+0x118>
 800dd40:	2306      	movs	r3, #6
 800dd42:	e127      	b.n	800df94 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3324      	adds	r3, #36	@ 0x24
 800dd48:	220b      	movs	r2, #11
 800dd4a:	2120      	movs	r1, #32
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe faf4 	bl	800c33a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dd52:	2300      	movs	r3, #0
 800dd54:	61bb      	str	r3, [r7, #24]
 800dd56:	e002      	b.n	800dd5e <create_name+0x132>
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	61bb      	str	r3, [r7, #24]
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	005b      	lsls	r3, r3, #1
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	4413      	add	r3, r2
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	2b20      	cmp	r3, #32
 800dd6a:	d0f5      	beq.n	800dd58 <create_name+0x12c>
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	4413      	add	r3, r2
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd78:	d0ee      	beq.n	800dd58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d009      	beq.n	800dd94 <create_name+0x168>
 800dd80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd84:	f043 0303 	orr.w	r3, r3, #3
 800dd88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dd8c:	e002      	b.n	800dd94 <create_name+0x168>
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	617b      	str	r3, [r7, #20]
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d009      	beq.n	800ddae <create_name+0x182>
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dda0:	3b01      	subs	r3, #1
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	4413      	add	r3, r2
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddac:	d1ef      	bne.n	800dd8e <create_name+0x162>

	i = b = 0; ni = 8;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	623b      	str	r3, [r7, #32]
 800ddb8:	2308      	movs	r3, #8
 800ddba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	61ba      	str	r2, [r7, #24]
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	881b      	ldrh	r3, [r3, #0]
 800ddca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ddcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8090 	beq.w	800def4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ddd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ddd6:	2b20      	cmp	r3, #32
 800ddd8:	d006      	beq.n	800dde8 <create_name+0x1bc>
 800ddda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dddc:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddde:	d10a      	bne.n	800ddf6 <create_name+0x1ca>
 800dde0:	69ba      	ldr	r2, [r7, #24]
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d006      	beq.n	800ddf6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dde8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddec:	f043 0303 	orr.w	r3, r3, #3
 800ddf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ddf4:	e07d      	b.n	800def2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ddf6:	6a3a      	ldr	r2, [r7, #32]
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d203      	bcs.n	800de06 <create_name+0x1da>
 800ddfe:	69ba      	ldr	r2, [r7, #24]
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	429a      	cmp	r2, r3
 800de04:	d123      	bne.n	800de4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	2b0b      	cmp	r3, #11
 800de0a:	d106      	bne.n	800de1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800de0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de10:	f043 0303 	orr.w	r3, r3, #3
 800de14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800de18:	e075      	b.n	800df06 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800de1a:	69ba      	ldr	r2, [r7, #24]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d005      	beq.n	800de2e <create_name+0x202>
 800de22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de26:	f043 0303 	orr.w	r3, r3, #3
 800de2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800de2e:	69ba      	ldr	r2, [r7, #24]
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	429a      	cmp	r2, r3
 800de34:	d866      	bhi.n	800df04 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	61bb      	str	r3, [r7, #24]
 800de3a:	2308      	movs	r3, #8
 800de3c:	623b      	str	r3, [r7, #32]
 800de3e:	230b      	movs	r3, #11
 800de40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800de42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800de4c:	e051      	b.n	800def2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800de4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de50:	2b7f      	cmp	r3, #127	@ 0x7f
 800de52:	d914      	bls.n	800de7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800de54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de56:	2100      	movs	r1, #0
 800de58:	4618      	mov	r0, r3
 800de5a:	f001 fb53 	bl	800f504 <ff_convert>
 800de5e:	4603      	mov	r3, r0
 800de60:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800de62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <create_name+0x246>
 800de68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de6a:	3b80      	subs	r3, #128	@ 0x80
 800de6c:	4a23      	ldr	r2, [pc, #140]	@ (800defc <create_name+0x2d0>)
 800de6e:	5cd3      	ldrb	r3, [r2, r3]
 800de70:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800de72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de76:	f043 0302 	orr.w	r3, r3, #2
 800de7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800de7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de80:	2b00      	cmp	r3, #0
 800de82:	d007      	beq.n	800de94 <create_name+0x268>
 800de84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de86:	4619      	mov	r1, r3
 800de88:	481d      	ldr	r0, [pc, #116]	@ (800df00 <create_name+0x2d4>)
 800de8a:	f7fe fa98 	bl	800c3be <chk_chr>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d008      	beq.n	800dea6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800de94:	235f      	movs	r3, #95	@ 0x5f
 800de96:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800de98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de9c:	f043 0303 	orr.w	r3, r3, #3
 800dea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dea4:	e01b      	b.n	800dede <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dea8:	2b40      	cmp	r3, #64	@ 0x40
 800deaa:	d909      	bls.n	800dec0 <create_name+0x294>
 800deac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800deae:	2b5a      	cmp	r3, #90	@ 0x5a
 800deb0:	d806      	bhi.n	800dec0 <create_name+0x294>
					b |= 2;
 800deb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800deb6:	f043 0302 	orr.w	r3, r3, #2
 800deba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800debe:	e00e      	b.n	800dede <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dec0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dec2:	2b60      	cmp	r3, #96	@ 0x60
 800dec4:	d90b      	bls.n	800dede <create_name+0x2b2>
 800dec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dec8:	2b7a      	cmp	r3, #122	@ 0x7a
 800deca:	d808      	bhi.n	800dede <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800decc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ded0:	f043 0301 	orr.w	r3, r3, #1
 800ded4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ded8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800deda:	3b20      	subs	r3, #32
 800dedc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	1c5a      	adds	r2, r3, #1
 800dee2:	623a      	str	r2, [r7, #32]
 800dee4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dee6:	b2d1      	uxtb	r1, r2
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	4413      	add	r3, r2
 800deec:	460a      	mov	r2, r1
 800deee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800def2:	e763      	b.n	800ddbc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800def4:	bf00      	nop
 800def6:	e006      	b.n	800df06 <create_name+0x2da>
 800def8:	08010038 	.word	0x08010038
 800defc:	08010114 	.word	0x08010114
 800df00:	08010044 	.word	0x08010044
			if (si > di) break;			/* No extension */
 800df04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800df0c:	2be5      	cmp	r3, #229	@ 0xe5
 800df0e:	d103      	bne.n	800df18 <create_name+0x2ec>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2205      	movs	r2, #5
 800df14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	2b08      	cmp	r3, #8
 800df1c:	d104      	bne.n	800df28 <create_name+0x2fc>
 800df1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800df28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df2c:	f003 030c 	and.w	r3, r3, #12
 800df30:	2b0c      	cmp	r3, #12
 800df32:	d005      	beq.n	800df40 <create_name+0x314>
 800df34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df38:	f003 0303 	and.w	r3, r3, #3
 800df3c:	2b03      	cmp	r3, #3
 800df3e:	d105      	bne.n	800df4c <create_name+0x320>
 800df40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df44:	f043 0302 	orr.w	r3, r3, #2
 800df48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800df4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df50:	f003 0302 	and.w	r3, r3, #2
 800df54:	2b00      	cmp	r3, #0
 800df56:	d117      	bne.n	800df88 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800df58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df5c:	f003 0303 	and.w	r3, r3, #3
 800df60:	2b01      	cmp	r3, #1
 800df62:	d105      	bne.n	800df70 <create_name+0x344>
 800df64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df68:	f043 0310 	orr.w	r3, r3, #16
 800df6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800df70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df74:	f003 030c 	and.w	r3, r3, #12
 800df78:	2b04      	cmp	r3, #4
 800df7a:	d105      	bne.n	800df88 <create_name+0x35c>
 800df7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df80:	f043 0308 	orr.w	r3, r3, #8
 800df84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800df8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800df92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800df94:	4618      	mov	r0, r3
 800df96:	3728      	adds	r7, #40	@ 0x28
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dfb0:	e002      	b.n	800dfb8 <follow_path+0x1c>
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	603b      	str	r3, [r7, #0]
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b2f      	cmp	r3, #47	@ 0x2f
 800dfbe:	d0f8      	beq.n	800dfb2 <follow_path+0x16>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2b5c      	cmp	r3, #92	@ 0x5c
 800dfc6:	d0f4      	beq.n	800dfb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2b1f      	cmp	r3, #31
 800dfd4:	d80a      	bhi.n	800dfec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2280      	movs	r2, #128	@ 0x80
 800dfda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800dfde:	2100      	movs	r1, #0
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7fe ff34 	bl	800ce4e <dir_sdi>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	75fb      	strb	r3, [r7, #23]
 800dfea:	e043      	b.n	800e074 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfec:	463b      	mov	r3, r7
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7ff fe1b 	bl	800dc2c <create_name>
 800dff6:	4603      	mov	r3, r0
 800dff8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dffa:	7dfb      	ldrb	r3, [r7, #23]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d134      	bne.n	800e06a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7ff fb7d 	bl	800d700 <dir_find>
 800e006:	4603      	mov	r3, r0
 800e008:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e010:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e012:	7dfb      	ldrb	r3, [r7, #23]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00a      	beq.n	800e02e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	2b04      	cmp	r3, #4
 800e01c:	d127      	bne.n	800e06e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e01e:	7afb      	ldrb	r3, [r7, #11]
 800e020:	f003 0304 	and.w	r3, r3, #4
 800e024:	2b00      	cmp	r3, #0
 800e026:	d122      	bne.n	800e06e <follow_path+0xd2>
 800e028:	2305      	movs	r3, #5
 800e02a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e02c:	e01f      	b.n	800e06e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e02e:	7afb      	ldrb	r3, [r7, #11]
 800e030:	f003 0304 	and.w	r3, r3, #4
 800e034:	2b00      	cmp	r3, #0
 800e036:	d11c      	bne.n	800e072 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	799b      	ldrb	r3, [r3, #6]
 800e03c:	f003 0310 	and.w	r3, r3, #16
 800e040:	2b00      	cmp	r3, #0
 800e042:	d102      	bne.n	800e04a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e044:	2305      	movs	r3, #5
 800e046:	75fb      	strb	r3, [r7, #23]
 800e048:	e014      	b.n	800e074 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e058:	4413      	add	r3, r2
 800e05a:	4619      	mov	r1, r3
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7ff f87d 	bl	800d15c <ld_clust>
 800e062:	4602      	mov	r2, r0
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e068:	e7c0      	b.n	800dfec <follow_path+0x50>
			if (res != FR_OK) break;
 800e06a:	bf00      	nop
 800e06c:	e002      	b.n	800e074 <follow_path+0xd8>
				break;
 800e06e:	bf00      	nop
 800e070:	e000      	b.n	800e074 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e072:	bf00      	nop
			}
		}
	}

	return res;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e07e:	b480      	push	{r7}
 800e080:	b087      	sub	sp, #28
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e086:	f04f 33ff 	mov.w	r3, #4294967295
 800e08a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d031      	beq.n	800e0f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	617b      	str	r3, [r7, #20]
 800e09a:	e002      	b.n	800e0a2 <get_ldnumber+0x24>
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	2b1f      	cmp	r3, #31
 800e0a8:	d903      	bls.n	800e0b2 <get_ldnumber+0x34>
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2b3a      	cmp	r3, #58	@ 0x3a
 800e0b0:	d1f4      	bne.n	800e09c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	2b3a      	cmp	r3, #58	@ 0x3a
 800e0b8:	d11c      	bne.n	800e0f4 <get_ldnumber+0x76>
			tp = *path;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	60fa      	str	r2, [r7, #12]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	3b30      	subs	r3, #48	@ 0x30
 800e0ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2b09      	cmp	r3, #9
 800e0d0:	d80e      	bhi.n	800e0f0 <get_ldnumber+0x72>
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d10a      	bne.n	800e0f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d107      	bne.n	800e0f0 <get_ldnumber+0x72>
					vol = (int)i;
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	617b      	str	r3, [r7, #20]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	697a      	ldr	r2, [r7, #20]
 800e0ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	e002      	b.n	800e0fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e0f8:	693b      	ldr	r3, [r7, #16]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	371c      	adds	r7, #28
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
	...

0800e108 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	70da      	strb	r2, [r3, #3]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f04f 32ff 	mov.w	r2, #4294967295
 800e11e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e120:	6839      	ldr	r1, [r7, #0]
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7fe fb16 	bl	800c754 <move_window>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <check_fs+0x2a>
 800e12e:	2304      	movs	r3, #4
 800e130:	e038      	b.n	800e1a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	3334      	adds	r3, #52	@ 0x34
 800e136:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe f85a 	bl	800c1f4 <ld_word>
 800e140:	4603      	mov	r3, r0
 800e142:	461a      	mov	r2, r3
 800e144:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e148:	429a      	cmp	r2, r3
 800e14a:	d001      	beq.n	800e150 <check_fs+0x48>
 800e14c:	2303      	movs	r3, #3
 800e14e:	e029      	b.n	800e1a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e156:	2be9      	cmp	r3, #233	@ 0xe9
 800e158:	d009      	beq.n	800e16e <check_fs+0x66>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e160:	2beb      	cmp	r3, #235	@ 0xeb
 800e162:	d11e      	bne.n	800e1a2 <check_fs+0x9a>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e16a:	2b90      	cmp	r3, #144	@ 0x90
 800e16c:	d119      	bne.n	800e1a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	3334      	adds	r3, #52	@ 0x34
 800e172:	3336      	adds	r3, #54	@ 0x36
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe f855 	bl	800c224 <ld_dword>
 800e17a:	4603      	mov	r3, r0
 800e17c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e180:	4a0a      	ldr	r2, [pc, #40]	@ (800e1ac <check_fs+0xa4>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d101      	bne.n	800e18a <check_fs+0x82>
 800e186:	2300      	movs	r3, #0
 800e188:	e00c      	b.n	800e1a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	3334      	adds	r3, #52	@ 0x34
 800e18e:	3352      	adds	r3, #82	@ 0x52
 800e190:	4618      	mov	r0, r3
 800e192:	f7fe f847 	bl	800c224 <ld_dword>
 800e196:	4603      	mov	r3, r0
 800e198:	4a05      	ldr	r2, [pc, #20]	@ (800e1b0 <check_fs+0xa8>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d101      	bne.n	800e1a2 <check_fs+0x9a>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e000      	b.n	800e1a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e1a2:	2302      	movs	r3, #2
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	00544146 	.word	0x00544146
 800e1b0:	33544146 	.word	0x33544146

0800e1b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b096      	sub	sp, #88	@ 0x58
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7ff ff58 	bl	800e07e <get_ldnumber>
 800e1ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	da01      	bge.n	800e1da <find_volume+0x26>
 800e1d6:	230b      	movs	r3, #11
 800e1d8:	e230      	b.n	800e63c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e1da:	4aa1      	ldr	r2, [pc, #644]	@ (800e460 <find_volume+0x2ac>)
 800e1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d101      	bne.n	800e1ee <find_volume+0x3a>
 800e1ea:	230c      	movs	r3, #12
 800e1ec:	e226      	b.n	800e63c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	f023 0301 	bic.w	r3, r3, #1
 800e1fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d01a      	beq.n	800e23a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e206:	785b      	ldrb	r3, [r3, #1]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fd ff55 	bl	800c0b8 <disk_status>
 800e20e:	4603      	mov	r3, r0
 800e210:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e214:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e218:	f003 0301 	and.w	r3, r3, #1
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10c      	bne.n	800e23a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e220:	79fb      	ldrb	r3, [r7, #7]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d007      	beq.n	800e236 <find_volume+0x82>
 800e226:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e22a:	f003 0304 	and.w	r3, r3, #4
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e232:	230a      	movs	r3, #10
 800e234:	e202      	b.n	800e63c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e236:	2300      	movs	r3, #0
 800e238:	e200      	b.n	800e63c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23c:	2200      	movs	r2, #0
 800e23e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e242:	b2da      	uxtb	r2, r3
 800e244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e246:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24a:	785b      	ldrb	r3, [r3, #1]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fd ff4d 	bl	800c0ec <disk_initialize>
 800e252:	4603      	mov	r3, r0
 800e254:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e258:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	2b00      	cmp	r3, #0
 800e262:	d001      	beq.n	800e268 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e264:	2303      	movs	r3, #3
 800e266:	e1e9      	b.n	800e63c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e268:	79fb      	ldrb	r3, [r7, #7]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d007      	beq.n	800e27e <find_volume+0xca>
 800e26e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e272:	f003 0304 	and.w	r3, r3, #4
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e27a:	230a      	movs	r3, #10
 800e27c:	e1de      	b.n	800e63c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e282:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e284:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e286:	f7ff ff3f 	bl	800e108 <check_fs>
 800e28a:	4603      	mov	r3, r0
 800e28c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e290:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e294:	2b02      	cmp	r3, #2
 800e296:	d149      	bne.n	800e32c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e298:	2300      	movs	r3, #0
 800e29a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e29c:	e01e      	b.n	800e2dc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e2a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2a6:	011b      	lsls	r3, r3, #4
 800e2a8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e2ac:	4413      	add	r3, r2
 800e2ae:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d006      	beq.n	800e2c8 <find_volume+0x114>
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	3308      	adds	r3, #8
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fd ffb0 	bl	800c224 <ld_dword>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	e000      	b.n	800e2ca <find_volume+0x116>
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	3358      	adds	r3, #88	@ 0x58
 800e2d0:	443b      	add	r3, r7
 800e2d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e2d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2d8:	3301      	adds	r3, #1
 800e2da:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2de:	2b03      	cmp	r3, #3
 800e2e0:	d9dd      	bls.n	800e29e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e2e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <find_volume+0x13e>
 800e2ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e2f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	3358      	adds	r3, #88	@ 0x58
 800e2f8:	443b      	add	r3, r7
 800e2fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e2fe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e302:	2b00      	cmp	r3, #0
 800e304:	d005      	beq.n	800e312 <find_volume+0x15e>
 800e306:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e308:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e30a:	f7ff fefd 	bl	800e108 <check_fs>
 800e30e:	4603      	mov	r3, r0
 800e310:	e000      	b.n	800e314 <find_volume+0x160>
 800e312:	2303      	movs	r3, #3
 800e314:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e318:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d905      	bls.n	800e32c <find_volume+0x178>
 800e320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e322:	3301      	adds	r3, #1
 800e324:	643b      	str	r3, [r7, #64]	@ 0x40
 800e326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d9e2      	bls.n	800e2f2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e32c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e330:	2b04      	cmp	r3, #4
 800e332:	d101      	bne.n	800e338 <find_volume+0x184>
 800e334:	2301      	movs	r3, #1
 800e336:	e181      	b.n	800e63c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e338:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d901      	bls.n	800e344 <find_volume+0x190>
 800e340:	230d      	movs	r3, #13
 800e342:	e17b      	b.n	800e63c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e346:	3334      	adds	r3, #52	@ 0x34
 800e348:	330b      	adds	r3, #11
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fd ff52 	bl	800c1f4 <ld_word>
 800e350:	4603      	mov	r3, r0
 800e352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e356:	d001      	beq.n	800e35c <find_volume+0x1a8>
 800e358:	230d      	movs	r3, #13
 800e35a:	e16f      	b.n	800e63c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35e:	3334      	adds	r3, #52	@ 0x34
 800e360:	3316      	adds	r3, #22
 800e362:	4618      	mov	r0, r3
 800e364:	f7fd ff46 	bl	800c1f4 <ld_word>
 800e368:	4603      	mov	r3, r0
 800e36a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e36c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d106      	bne.n	800e380 <find_volume+0x1cc>
 800e372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e374:	3334      	adds	r3, #52	@ 0x34
 800e376:	3324      	adds	r3, #36	@ 0x24
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fd ff53 	bl	800c224 <ld_dword>
 800e37e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e384:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e388:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e392:	789b      	ldrb	r3, [r3, #2]
 800e394:	2b01      	cmp	r3, #1
 800e396:	d005      	beq.n	800e3a4 <find_volume+0x1f0>
 800e398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e39a:	789b      	ldrb	r3, [r3, #2]
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d001      	beq.n	800e3a4 <find_volume+0x1f0>
 800e3a0:	230d      	movs	r3, #13
 800e3a2:	e14b      	b.n	800e63c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a6:	789b      	ldrb	r3, [r3, #2]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3ac:	fb02 f303 	mul.w	r3, r2, r3
 800e3b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c0:	895b      	ldrh	r3, [r3, #10]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d008      	beq.n	800e3d8 <find_volume+0x224>
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c8:	895b      	ldrh	r3, [r3, #10]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ce:	895b      	ldrh	r3, [r3, #10]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	4013      	ands	r3, r2
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <find_volume+0x228>
 800e3d8:	230d      	movs	r3, #13
 800e3da:	e12f      	b.n	800e63c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3de:	3334      	adds	r3, #52	@ 0x34
 800e3e0:	3311      	adds	r3, #17
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fd ff06 	bl	800c1f4 <ld_word>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	891b      	ldrh	r3, [r3, #8]
 800e3f4:	f003 030f 	and.w	r3, r3, #15
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <find_volume+0x24e>
 800e3fe:	230d      	movs	r3, #13
 800e400:	e11c      	b.n	800e63c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e404:	3334      	adds	r3, #52	@ 0x34
 800e406:	3313      	adds	r3, #19
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fd fef3 	bl	800c1f4 <ld_word>
 800e40e:	4603      	mov	r3, r0
 800e410:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e414:	2b00      	cmp	r3, #0
 800e416:	d106      	bne.n	800e426 <find_volume+0x272>
 800e418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e41a:	3334      	adds	r3, #52	@ 0x34
 800e41c:	3320      	adds	r3, #32
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fd ff00 	bl	800c224 <ld_dword>
 800e424:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e428:	3334      	adds	r3, #52	@ 0x34
 800e42a:	330e      	adds	r3, #14
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fd fee1 	bl	800c1f4 <ld_word>
 800e432:	4603      	mov	r3, r0
 800e434:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e436:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d101      	bne.n	800e440 <find_volume+0x28c>
 800e43c:	230d      	movs	r3, #13
 800e43e:	e0fd      	b.n	800e63c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e440:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e444:	4413      	add	r3, r2
 800e446:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e448:	8912      	ldrh	r2, [r2, #8]
 800e44a:	0912      	lsrs	r2, r2, #4
 800e44c:	b292      	uxth	r2, r2
 800e44e:	4413      	add	r3, r2
 800e450:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e456:	429a      	cmp	r2, r3
 800e458:	d204      	bcs.n	800e464 <find_volume+0x2b0>
 800e45a:	230d      	movs	r3, #13
 800e45c:	e0ee      	b.n	800e63c <find_volume+0x488>
 800e45e:	bf00      	nop
 800e460:	20001bb4 	.word	0x20001bb4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e46c:	8952      	ldrh	r2, [r2, #10]
 800e46e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e472:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e476:	2b00      	cmp	r3, #0
 800e478:	d101      	bne.n	800e47e <find_volume+0x2ca>
 800e47a:	230d      	movs	r3, #13
 800e47c:	e0de      	b.n	800e63c <find_volume+0x488>
		fmt = FS_FAT32;
 800e47e:	2303      	movs	r3, #3
 800e480:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e486:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d802      	bhi.n	800e494 <find_volume+0x2e0>
 800e48e:	2302      	movs	r3, #2
 800e490:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e496:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d802      	bhi.n	800e4a4 <find_volume+0x2f0>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a6:	1c9a      	adds	r2, r3, #2
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4aa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e4b0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e4b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e4b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4b6:	441a      	add	r2, r3
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ba:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e4bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c0:	441a      	add	r2, r3
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e4c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d11e      	bne.n	800e50c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d0:	3334      	adds	r3, #52	@ 0x34
 800e4d2:	332a      	adds	r3, #42	@ 0x2a
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fd fe8d 	bl	800c1f4 <ld_word>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <find_volume+0x330>
 800e4e0:	230d      	movs	r3, #13
 800e4e2:	e0ab      	b.n	800e63c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e6:	891b      	ldrh	r3, [r3, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <find_volume+0x33c>
 800e4ec:	230d      	movs	r3, #13
 800e4ee:	e0a5      	b.n	800e63c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f2:	3334      	adds	r3, #52	@ 0x34
 800e4f4:	332c      	adds	r3, #44	@ 0x2c
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fd fe94 	bl	800c224 <ld_dword>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e500:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	647b      	str	r3, [r7, #68]	@ 0x44
 800e50a:	e01f      	b.n	800e54c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50e:	891b      	ldrh	r3, [r3, #8]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <find_volume+0x364>
 800e514:	230d      	movs	r3, #13
 800e516:	e091      	b.n	800e63c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e51e:	441a      	add	r2, r3
 800e520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e522:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e524:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d103      	bne.n	800e534 <find_volume+0x380>
 800e52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	005b      	lsls	r3, r3, #1
 800e532:	e00a      	b.n	800e54a <find_volume+0x396>
 800e534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e536:	699a      	ldr	r2, [r3, #24]
 800e538:	4613      	mov	r3, r2
 800e53a:	005b      	lsls	r3, r3, #1
 800e53c:	4413      	add	r3, r2
 800e53e:	085a      	lsrs	r2, r3, #1
 800e540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e542:	699b      	ldr	r3, [r3, #24]
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e54a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54e:	69da      	ldr	r2, [r3, #28]
 800e550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e552:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e556:	0a5b      	lsrs	r3, r3, #9
 800e558:	429a      	cmp	r2, r3
 800e55a:	d201      	bcs.n	800e560 <find_volume+0x3ac>
 800e55c:	230d      	movs	r3, #13
 800e55e:	e06d      	b.n	800e63c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e562:	f04f 32ff 	mov.w	r2, #4294967295
 800e566:	615a      	str	r2, [r3, #20]
 800e568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56a:	695a      	ldr	r2, [r3, #20]
 800e56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e572:	2280      	movs	r2, #128	@ 0x80
 800e574:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e576:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d149      	bne.n	800e612 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e580:	3334      	adds	r3, #52	@ 0x34
 800e582:	3330      	adds	r3, #48	@ 0x30
 800e584:	4618      	mov	r0, r3
 800e586:	f7fd fe35 	bl	800c1f4 <ld_word>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d140      	bne.n	800e612 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e592:	3301      	adds	r3, #1
 800e594:	4619      	mov	r1, r3
 800e596:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e598:	f7fe f8dc 	bl	800c754 <move_window>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d137      	bne.n	800e612 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5aa:	3334      	adds	r3, #52	@ 0x34
 800e5ac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fd fe1f 	bl	800c1f4 <ld_word>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d127      	bne.n	800e612 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c4:	3334      	adds	r3, #52	@ 0x34
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fd fe2c 	bl	800c224 <ld_dword>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	4a1d      	ldr	r2, [pc, #116]	@ (800e644 <find_volume+0x490>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d11e      	bne.n	800e612 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	3334      	adds	r3, #52	@ 0x34
 800e5d8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7fd fe21 	bl	800c224 <ld_dword>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	4a18      	ldr	r2, [pc, #96]	@ (800e648 <find_volume+0x494>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d113      	bne.n	800e612 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ec:	3334      	adds	r3, #52	@ 0x34
 800e5ee:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fd fe16 	bl	800c224 <ld_dword>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e600:	3334      	adds	r3, #52	@ 0x34
 800e602:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e606:	4618      	mov	r0, r3
 800e608:	f7fd fe0c 	bl	800c224 <ld_dword>
 800e60c:	4602      	mov	r2, r0
 800e60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e610:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e614:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e618:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e61a:	4b0c      	ldr	r3, [pc, #48]	@ (800e64c <find_volume+0x498>)
 800e61c:	881b      	ldrh	r3, [r3, #0]
 800e61e:	3301      	adds	r3, #1
 800e620:	b29a      	uxth	r2, r3
 800e622:	4b0a      	ldr	r3, [pc, #40]	@ (800e64c <find_volume+0x498>)
 800e624:	801a      	strh	r2, [r3, #0]
 800e626:	4b09      	ldr	r3, [pc, #36]	@ (800e64c <find_volume+0x498>)
 800e628:	881a      	ldrh	r2, [r3, #0]
 800e62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e62c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e630:	4a07      	ldr	r2, [pc, #28]	@ (800e650 <find_volume+0x49c>)
 800e632:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e634:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e636:	f7fe f825 	bl	800c684 <clear_lock>
#endif
	return FR_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3758      	adds	r7, #88	@ 0x58
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	41615252 	.word	0x41615252
 800e648:	61417272 	.word	0x61417272
 800e64c:	20001bb8 	.word	0x20001bb8
 800e650:	20001bdc 	.word	0x20001bdc

0800e654 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e65e:	2309      	movs	r3, #9
 800e660:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d01c      	beq.n	800e6a2 <validate+0x4e>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d018      	beq.n	800e6a2 <validate+0x4e>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d013      	beq.n	800e6a2 <validate+0x4e>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	889a      	ldrh	r2, [r3, #4]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	88db      	ldrh	r3, [r3, #6]
 800e684:	429a      	cmp	r2, r3
 800e686:	d10c      	bne.n	800e6a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	785b      	ldrb	r3, [r3, #1]
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fd fd12 	bl	800c0b8 <disk_status>
 800e694:	4603      	mov	r3, r0
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <validate+0x4e>
			res = FR_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e6a2:	7bfb      	ldrb	r3, [r7, #15]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d102      	bne.n	800e6ae <validate+0x5a>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	e000      	b.n	800e6b0 <validate+0x5c>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	683a      	ldr	r2, [r7, #0]
 800e6b2:	6013      	str	r3, [r2, #0]
	return res;
 800e6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
	...

0800e6c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b088      	sub	sp, #32
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e6d2:	f107 0310 	add.w	r3, r7, #16
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7ff fcd1 	bl	800e07e <get_ldnumber>
 800e6dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	da01      	bge.n	800e6e8 <f_mount+0x28>
 800e6e4:	230b      	movs	r3, #11
 800e6e6:	e02b      	b.n	800e740 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e6e8:	4a17      	ldr	r2, [pc, #92]	@ (800e748 <f_mount+0x88>)
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d005      	beq.n	800e704 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e6f8:	69b8      	ldr	r0, [r7, #24]
 800e6fa:	f7fd ffc3 	bl	800c684 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	2200      	movs	r2, #0
 800e702:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	490d      	ldr	r1, [pc, #52]	@ (800e748 <f_mount+0x88>)
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <f_mount+0x66>
 800e720:	79fb      	ldrb	r3, [r7, #7]
 800e722:	2b01      	cmp	r3, #1
 800e724:	d001      	beq.n	800e72a <f_mount+0x6a>
 800e726:	2300      	movs	r3, #0
 800e728:	e00a      	b.n	800e740 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e72a:	f107 010c 	add.w	r1, r7, #12
 800e72e:	f107 0308 	add.w	r3, r7, #8
 800e732:	2200      	movs	r2, #0
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff fd3d 	bl	800e1b4 <find_volume>
 800e73a:	4603      	mov	r3, r0
 800e73c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3720      	adds	r7, #32
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20001bb4 	.word	0x20001bb4

0800e74c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b09a      	sub	sp, #104	@ 0x68
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	4613      	mov	r3, r2
 800e758:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <f_open+0x18>
 800e760:	2309      	movs	r3, #9
 800e762:	e1a9      	b.n	800eab8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e764:	79fb      	ldrb	r3, [r7, #7]
 800e766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e76a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e76c:	79fa      	ldrb	r2, [r7, #7]
 800e76e:	f107 0114 	add.w	r1, r7, #20
 800e772:	f107 0308 	add.w	r3, r7, #8
 800e776:	4618      	mov	r0, r3
 800e778:	f7ff fd1c 	bl	800e1b4 <find_volume>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e782:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e786:	2b00      	cmp	r3, #0
 800e788:	f040 818d 	bne.w	800eaa6 <f_open+0x35a>
		dj.obj.fs = fs;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	f107 0318 	add.w	r3, r7, #24
 800e796:	4611      	mov	r1, r2
 800e798:	4618      	mov	r0, r3
 800e79a:	f7ff fbff 	bl	800df9c <follow_path>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e7a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d118      	bne.n	800e7de <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e7ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e7b0:	b25b      	sxtb	r3, r3
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	da03      	bge.n	800e7be <f_open+0x72>
				res = FR_INVALID_NAME;
 800e7b6:	2306      	movs	r3, #6
 800e7b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e7bc:	e00f      	b.n	800e7de <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	bf8c      	ite	hi
 800e7c4:	2301      	movhi	r3, #1
 800e7c6:	2300      	movls	r3, #0
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	f107 0318 	add.w	r3, r7, #24
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fd fe0e 	bl	800c3f4 <chk_lock>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	f003 031c 	and.w	r3, r3, #28
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d07f      	beq.n	800e8e8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e7e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d017      	beq.n	800e820 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e7f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7f4:	2b04      	cmp	r3, #4
 800e7f6:	d10e      	bne.n	800e816 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e7f8:	f7fd fe58 	bl	800c4ac <enq_lock>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d006      	beq.n	800e810 <f_open+0xc4>
 800e802:	f107 0318 	add.w	r3, r7, #24
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff f83a 	bl	800d880 <dir_register>
 800e80c:	4603      	mov	r3, r0
 800e80e:	e000      	b.n	800e812 <f_open+0xc6>
 800e810:	2312      	movs	r3, #18
 800e812:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e816:	79fb      	ldrb	r3, [r7, #7]
 800e818:	f043 0308 	orr.w	r3, r3, #8
 800e81c:	71fb      	strb	r3, [r7, #7]
 800e81e:	e010      	b.n	800e842 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e820:	7fbb      	ldrb	r3, [r7, #30]
 800e822:	f003 0311 	and.w	r3, r3, #17
 800e826:	2b00      	cmp	r3, #0
 800e828:	d003      	beq.n	800e832 <f_open+0xe6>
					res = FR_DENIED;
 800e82a:	2307      	movs	r3, #7
 800e82c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e830:	e007      	b.n	800e842 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	f003 0304 	and.w	r3, r3, #4
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d002      	beq.n	800e842 <f_open+0xf6>
 800e83c:	2308      	movs	r3, #8
 800e83e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e842:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e846:	2b00      	cmp	r3, #0
 800e848:	d168      	bne.n	800e91c <f_open+0x1d0>
 800e84a:	79fb      	ldrb	r3, [r7, #7]
 800e84c:	f003 0308 	and.w	r3, r3, #8
 800e850:	2b00      	cmp	r3, #0
 800e852:	d063      	beq.n	800e91c <f_open+0x1d0>
				dw = GET_FATTIME();
 800e854:	f7fa fc42 	bl	80090dc <get_fattime>
 800e858:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e85c:	330e      	adds	r3, #14
 800e85e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e860:	4618      	mov	r0, r3
 800e862:	f7fd fd1d 	bl	800c2a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e868:	3316      	adds	r3, #22
 800e86a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fd fd17 	bl	800c2a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e874:	330b      	adds	r3, #11
 800e876:	2220      	movs	r2, #32
 800e878:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e87e:	4611      	mov	r1, r2
 800e880:	4618      	mov	r0, r3
 800e882:	f7fe fc6b 	bl	800d15c <ld_clust>
 800e886:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e88c:	2200      	movs	r2, #0
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fe fc83 	bl	800d19a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e896:	331c      	adds	r3, #28
 800e898:	2100      	movs	r1, #0
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fd fd00 	bl	800c2a0 <st_dword>
					fs->wflag = 1;
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d037      	beq.n	800e91c <f_open+0x1d0>
						dw = fs->winsect;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8b0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e8b2:	f107 0318 	add.w	r3, r7, #24
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe f996 	bl	800cbec <remove_chain>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e8c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d126      	bne.n	800e91c <f_open+0x1d0>
							res = move_window(fs, dw);
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fd ff3e 	bl	800c754 <move_window>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e8e2:	3a01      	subs	r2, #1
 800e8e4:	611a      	str	r2, [r3, #16]
 800e8e6:	e019      	b.n	800e91c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e8e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d115      	bne.n	800e91c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e8f0:	7fbb      	ldrb	r3, [r7, #30]
 800e8f2:	f003 0310 	and.w	r3, r3, #16
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d003      	beq.n	800e902 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e8fa:	2304      	movs	r3, #4
 800e8fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e900:	e00c      	b.n	800e91c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	f003 0302 	and.w	r3, r3, #2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d007      	beq.n	800e91c <f_open+0x1d0>
 800e90c:	7fbb      	ldrb	r3, [r7, #30]
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	2b00      	cmp	r3, #0
 800e914:	d002      	beq.n	800e91c <f_open+0x1d0>
						res = FR_DENIED;
 800e916:	2307      	movs	r3, #7
 800e918:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e91c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e920:	2b00      	cmp	r3, #0
 800e922:	d126      	bne.n	800e972 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	f003 0308 	and.w	r3, r3, #8
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d003      	beq.n	800e936 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e92e:	79fb      	ldrb	r3, [r7, #7]
 800e930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e934:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e93e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e944:	79fb      	ldrb	r3, [r7, #7]
 800e946:	2b01      	cmp	r3, #1
 800e948:	bf8c      	ite	hi
 800e94a:	2301      	movhi	r3, #1
 800e94c:	2300      	movls	r3, #0
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	461a      	mov	r2, r3
 800e952:	f107 0318 	add.w	r3, r7, #24
 800e956:	4611      	mov	r1, r2
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fd fdc9 	bl	800c4f0 <inc_lock>
 800e95e:	4602      	mov	r2, r0
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d102      	bne.n	800e972 <f_open+0x226>
 800e96c:	2302      	movs	r3, #2
 800e96e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e972:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e976:	2b00      	cmp	r3, #0
 800e978:	f040 8095 	bne.w	800eaa6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e980:	4611      	mov	r1, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe fbea 	bl	800d15c <ld_clust>
 800e988:	4602      	mov	r2, r0
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e990:	331c      	adds	r3, #28
 800e992:	4618      	mov	r0, r3
 800e994:	f7fd fc46 	bl	800c224 <ld_dword>
 800e998:	4602      	mov	r2, r0
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e9a4:	697a      	ldr	r2, [r7, #20]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	88da      	ldrh	r2, [r3, #6]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	79fa      	ldrb	r2, [r7, #7]
 800e9b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3330      	adds	r3, #48	@ 0x30
 800e9ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7fd fcb0 	bl	800c33a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e9da:	79fb      	ldrb	r3, [r7, #7]
 800e9dc:	f003 0320 	and.w	r3, r3, #32
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d060      	beq.n	800eaa6 <f_open+0x35a>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d05c      	beq.n	800eaa6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	895b      	ldrh	r3, [r3, #10]
 800e9f8:	025b      	lsls	r3, r3, #9
 800e9fa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea08:	e016      	b.n	800ea38 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fd ff5b 	bl	800c8ca <get_fat>
 800ea14:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ea16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d802      	bhi.n	800ea22 <f_open+0x2d6>
 800ea1c:	2302      	movs	r3, #2
 800ea1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea28:	d102      	bne.n	800ea30 <f_open+0x2e4>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d103      	bne.n	800ea48 <f_open+0x2fc>
 800ea40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d8e0      	bhi.n	800ea0a <f_open+0x2be>
				}
				fp->clust = clst;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ea4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d127      	bne.n	800eaa6 <f_open+0x35a>
 800ea56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d022      	beq.n	800eaa6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fd ff11 	bl	800c88c <clust2sect>
 800ea6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ea6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d103      	bne.n	800ea7a <f_open+0x32e>
						res = FR_INT_ERR;
 800ea72:	2302      	movs	r3, #2
 800ea74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ea78:	e015      	b.n	800eaa6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea7c:	0a5a      	lsrs	r2, r3, #9
 800ea7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea80:	441a      	add	r2, r3
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	7858      	ldrb	r0, [r3, #1]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6a1a      	ldr	r2, [r3, #32]
 800ea94:	2301      	movs	r3, #1
 800ea96:	f7fd fb4f 	bl	800c138 <disk_read>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <f_open+0x35a>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eaa6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d002      	beq.n	800eab4 <f_open+0x368>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eab4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3768      	adds	r7, #104	@ 0x68
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08e      	sub	sp, #56	@ 0x38
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f107 0214 	add.w	r2, r7, #20
 800eade:	4611      	mov	r1, r2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7ff fdb7 	bl	800e654 <validate>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eaec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d107      	bne.n	800eb04 <f_read+0x44>
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	7d5b      	ldrb	r3, [r3, #21]
 800eaf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eafc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <f_read+0x4a>
 800eb04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb08:	e115      	b.n	800ed36 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	7d1b      	ldrb	r3, [r3, #20]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d101      	bne.n	800eb1a <f_read+0x5a>
 800eb16:	2307      	movs	r3, #7
 800eb18:	e10d      	b.n	800ed36 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	6a3b      	ldr	r3, [r7, #32]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	f240 80fe 	bls.w	800ed2c <f_read+0x26c>
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eb34:	e0fa      	b.n	800ed2c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	699b      	ldr	r3, [r3, #24]
 800eb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f040 80c6 	bne.w	800ecd0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	699b      	ldr	r3, [r3, #24]
 800eb48:	0a5b      	lsrs	r3, r3, #9
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	8952      	ldrh	r2, [r2, #10]
 800eb4e:	3a01      	subs	r2, #1
 800eb50:	4013      	ands	r3, r2
 800eb52:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d12f      	bne.n	800ebba <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb68:	e013      	b.n	800eb92 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	4619      	mov	r1, r3
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7fe f934 	bl	800cde6 <clmt_clust>
 800eb7e:	6338      	str	r0, [r7, #48]	@ 0x30
 800eb80:	e007      	b.n	800eb92 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	69db      	ldr	r3, [r3, #28]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4610      	mov	r0, r2
 800eb8c:	f7fd fe9d 	bl	800c8ca <get_fat>
 800eb90:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d804      	bhi.n	800eba2 <f_read+0xe2>
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	755a      	strb	r2, [r3, #21]
 800eb9e:	2302      	movs	r3, #2
 800eba0:	e0c9      	b.n	800ed36 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba8:	d104      	bne.n	800ebb4 <f_read+0xf4>
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	755a      	strb	r2, [r3, #21]
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e0c0      	b.n	800ed36 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebb8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ebba:	697a      	ldr	r2, [r7, #20]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	69db      	ldr	r3, [r3, #28]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	f7fd fe62 	bl	800c88c <clust2sect>
 800ebc8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d104      	bne.n	800ebda <f_read+0x11a>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	755a      	strb	r2, [r3, #21]
 800ebd6:	2302      	movs	r3, #2
 800ebd8:	e0ad      	b.n	800ed36 <f_read+0x276>
			sect += csect;
 800ebda:	69ba      	ldr	r2, [r7, #24]
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	4413      	add	r3, r2
 800ebe0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	0a5b      	lsrs	r3, r3, #9
 800ebe6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d039      	beq.n	800ec62 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf2:	4413      	add	r3, r2
 800ebf4:	697a      	ldr	r2, [r7, #20]
 800ebf6:	8952      	ldrh	r2, [r2, #10]
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d905      	bls.n	800ec08 <f_read+0x148>
					cc = fs->csize - csect;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	895b      	ldrh	r3, [r3, #10]
 800ec00:	461a      	mov	r2, r3
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	7858      	ldrb	r0, [r3, #1]
 800ec0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0e:	69ba      	ldr	r2, [r7, #24]
 800ec10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec12:	f7fd fa91 	bl	800c138 <disk_read>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d004      	beq.n	800ec26 <f_read+0x166>
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	755a      	strb	r2, [r3, #21]
 800ec22:	2301      	movs	r3, #1
 800ec24:	e087      	b.n	800ed36 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	7d1b      	ldrb	r3, [r3, #20]
 800ec2a:	b25b      	sxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	da14      	bge.n	800ec5a <f_read+0x19a>
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6a1a      	ldr	r2, [r3, #32]
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d90d      	bls.n	800ec5a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6a1a      	ldr	r2, [r3, #32]
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	025b      	lsls	r3, r3, #9
 800ec48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec4a:	18d0      	adds	r0, r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	3330      	adds	r3, #48	@ 0x30
 800ec50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec54:	4619      	mov	r1, r3
 800ec56:	f7fd fb4f 	bl	800c2f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ec5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec5c:	025b      	lsls	r3, r3, #9
 800ec5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ec60:	e050      	b.n	800ed04 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	69ba      	ldr	r2, [r7, #24]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d02e      	beq.n	800ecca <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	7d1b      	ldrb	r3, [r3, #20]
 800ec70:	b25b      	sxtb	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	da18      	bge.n	800eca8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	7858      	ldrb	r0, [r3, #1]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6a1a      	ldr	r2, [r3, #32]
 800ec84:	2301      	movs	r3, #1
 800ec86:	f7fd fa77 	bl	800c178 <disk_write>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d004      	beq.n	800ec9a <f_read+0x1da>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2201      	movs	r2, #1
 800ec94:	755a      	strb	r2, [r3, #21]
 800ec96:	2301      	movs	r3, #1
 800ec98:	e04d      	b.n	800ed36 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	7d1b      	ldrb	r3, [r3, #20]
 800ec9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	7858      	ldrb	r0, [r3, #1]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	f7fd fa3f 	bl	800c138 <disk_read>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <f_read+0x20a>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	755a      	strb	r2, [r3, #21]
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e035      	b.n	800ed36 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	69ba      	ldr	r2, [r7, #24]
 800ecce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecd8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ecdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ecde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d901      	bls.n	800ecea <f_read+0x22a>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecf8:	4413      	add	r3, r2
 800ecfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed00:	f7fd fafa 	bl	800c2f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	4413      	add	r3, r2
 800ed0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	699a      	ldr	r2, [r3, #24]
 800ed10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed12:	441a      	add	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	619a      	str	r2, [r3, #24]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed1e:	441a      	add	r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f47f af01 	bne.w	800eb36 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3738      	adds	r7, #56	@ 0x38
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b086      	sub	sp, #24
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f107 0208 	add.w	r2, r7, #8
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff fc80 	bl	800e654 <validate>
 800ed54:	4603      	mov	r3, r0
 800ed56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d168      	bne.n	800ee30 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	7d1b      	ldrb	r3, [r3, #20]
 800ed62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d062      	beq.n	800ee30 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	7d1b      	ldrb	r3, [r3, #20]
 800ed6e:	b25b      	sxtb	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	da15      	bge.n	800eda0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	7858      	ldrb	r0, [r3, #1]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a1a      	ldr	r2, [r3, #32]
 800ed82:	2301      	movs	r3, #1
 800ed84:	f7fd f9f8 	bl	800c178 <disk_write>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <f_sync+0x54>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e04f      	b.n	800ee32 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	7d1b      	ldrb	r3, [r3, #20]
 800ed96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eda0:	f7fa f99c 	bl	80090dc <get_fattime>
 800eda4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edac:	4619      	mov	r1, r3
 800edae:	4610      	mov	r0, r2
 800edb0:	f7fd fcd0 	bl	800c754 <move_window>
 800edb4:	4603      	mov	r3, r0
 800edb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800edb8:	7dfb      	ldrb	r3, [r7, #23]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d138      	bne.n	800ee30 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	330b      	adds	r3, #11
 800edc8:	781a      	ldrb	r2, [r3, #0]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	330b      	adds	r3, #11
 800edce:	f042 0220 	orr.w	r2, r2, #32
 800edd2:	b2d2      	uxtb	r2, r2
 800edd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6818      	ldr	r0, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	461a      	mov	r2, r3
 800ede0:	68f9      	ldr	r1, [r7, #12]
 800ede2:	f7fe f9da 	bl	800d19a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f103 021c 	add.w	r2, r3, #28
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	4619      	mov	r1, r3
 800edf2:	4610      	mov	r0, r2
 800edf4:	f7fd fa54 	bl	800c2a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3316      	adds	r3, #22
 800edfc:	6939      	ldr	r1, [r7, #16]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fd fa4e 	bl	800c2a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3312      	adds	r3, #18
 800ee08:	2100      	movs	r1, #0
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fd fa2d 	bl	800c26a <st_word>
					fs->wflag = 1;
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	2201      	movs	r2, #1
 800ee14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fd fcc9 	bl	800c7b0 <sync_fs>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	7d1b      	ldrb	r3, [r3, #20]
 800ee26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ee30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b084      	sub	sp, #16
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7ff ff7b 	bl	800ed3e <f_sync>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ee4c:	7bfb      	ldrb	r3, [r7, #15]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d118      	bne.n	800ee84 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f107 0208 	add.w	r2, r7, #8
 800ee58:	4611      	mov	r1, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fbfa 	bl	800e654 <validate>
 800ee60:	4603      	mov	r3, r0
 800ee62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10c      	bne.n	800ee84 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fd fbcc 	bl	800c60c <dec_lock>
 800ee74:	4603      	mov	r3, r0
 800ee76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d102      	bne.n	800ee84 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b090      	sub	sp, #64	@ 0x40
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f107 0208 	add.w	r2, r7, #8
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7ff fbd7 	bl	800e654 <validate>
 800eea6:	4603      	mov	r3, r0
 800eea8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800eeac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d103      	bne.n	800eebc <f_lseek+0x2e>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	7d5b      	ldrb	r3, [r3, #21]
 800eeb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800eebc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <f_lseek+0x3c>
 800eec4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800eec8:	e1e6      	b.n	800f298 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eece:	2b00      	cmp	r3, #0
 800eed0:	f000 80d1 	beq.w	800f076 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeda:	d15a      	bne.n	800ef92 <f_lseek+0x104>
			tbl = fp->cltbl;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800eee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee4:	1d1a      	adds	r2, r3, #4
 800eee6:	627a      	str	r2, [r7, #36]	@ 0x24
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	617b      	str	r3, [r7, #20]
 800eeec:	2302      	movs	r3, #2
 800eeee:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800eef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d03a      	beq.n	800ef72 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800eefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eefe:	613b      	str	r3, [r7, #16]
 800ef00:	2300      	movs	r3, #0
 800ef02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef06:	3302      	adds	r3, #2
 800ef08:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0c:	60fb      	str	r3, [r7, #12]
 800ef0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef10:	3301      	adds	r3, #1
 800ef12:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fd fcd6 	bl	800c8ca <get_fat>
 800ef1e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ef20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d804      	bhi.n	800ef30 <f_lseek+0xa2>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2202      	movs	r2, #2
 800ef2a:	755a      	strb	r2, [r3, #21]
 800ef2c:	2302      	movs	r3, #2
 800ef2e:	e1b3      	b.n	800f298 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef36:	d104      	bne.n	800ef42 <f_lseek+0xb4>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	755a      	strb	r2, [r3, #21]
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e1aa      	b.n	800f298 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3301      	adds	r3, #1
 800ef46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d0de      	beq.n	800ef0a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ef4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d809      	bhi.n	800ef68 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ef54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef56:	1d1a      	adds	r2, r3, #4
 800ef58:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef5c:	601a      	str	r2, [r3, #0]
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef60:	1d1a      	adds	r2, r3, #4
 800ef62:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	699b      	ldr	r3, [r3, #24]
 800ef6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d3c4      	bcc.n	800eefc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef78:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ef7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d803      	bhi.n	800ef8a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ef82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef84:	2200      	movs	r2, #0
 800ef86:	601a      	str	r2, [r3, #0]
 800ef88:	e184      	b.n	800f294 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ef8a:	2311      	movs	r3, #17
 800ef8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ef90:	e180      	b.n	800f294 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d902      	bls.n	800efa2 <f_lseek+0x114>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f000 8172 	beq.w	800f294 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	3b01      	subs	r3, #1
 800efb4:	4619      	mov	r1, r3
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f7fd ff15 	bl	800cde6 <clmt_clust>
 800efbc:	4602      	mov	r2, r0
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	69db      	ldr	r3, [r3, #28]
 800efc8:	4619      	mov	r1, r3
 800efca:	4610      	mov	r0, r2
 800efcc:	f7fd fc5e 	bl	800c88c <clust2sect>
 800efd0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d104      	bne.n	800efe2 <f_lseek+0x154>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2202      	movs	r2, #2
 800efdc:	755a      	strb	r2, [r3, #21]
 800efde:	2302      	movs	r3, #2
 800efe0:	e15a      	b.n	800f298 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	3b01      	subs	r3, #1
 800efe6:	0a5b      	lsrs	r3, r3, #9
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	8952      	ldrh	r2, [r2, #10]
 800efec:	3a01      	subs	r2, #1
 800efee:	4013      	ands	r3, r2
 800eff0:	69ba      	ldr	r2, [r7, #24]
 800eff2:	4413      	add	r3, r2
 800eff4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800effe:	2b00      	cmp	r3, #0
 800f000:	f000 8148 	beq.w	800f294 <f_lseek+0x406>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a1b      	ldr	r3, [r3, #32]
 800f008:	69ba      	ldr	r2, [r7, #24]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	f000 8142 	beq.w	800f294 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	7d1b      	ldrb	r3, [r3, #20]
 800f014:	b25b      	sxtb	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	da18      	bge.n	800f04c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	7858      	ldrb	r0, [r3, #1]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6a1a      	ldr	r2, [r3, #32]
 800f028:	2301      	movs	r3, #1
 800f02a:	f7fd f8a5 	bl	800c178 <disk_write>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d004      	beq.n	800f03e <f_lseek+0x1b0>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	755a      	strb	r2, [r3, #21]
 800f03a:	2301      	movs	r3, #1
 800f03c:	e12c      	b.n	800f298 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	7d1b      	ldrb	r3, [r3, #20]
 800f042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f046:	b2da      	uxtb	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	7858      	ldrb	r0, [r3, #1]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f056:	2301      	movs	r3, #1
 800f058:	69ba      	ldr	r2, [r7, #24]
 800f05a:	f7fd f86d 	bl	800c138 <disk_read>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d004      	beq.n	800f06e <f_lseek+0x1e0>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	755a      	strb	r2, [r3, #21]
 800f06a:	2301      	movs	r3, #1
 800f06c:	e114      	b.n	800f298 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	69ba      	ldr	r2, [r7, #24]
 800f072:	621a      	str	r2, [r3, #32]
 800f074:	e10e      	b.n	800f294 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d908      	bls.n	800f092 <f_lseek+0x204>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	7d1b      	ldrb	r3, [r3, #20]
 800f084:	f003 0302 	and.w	r3, r3, #2
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d102      	bne.n	800f092 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	699b      	ldr	r3, [r3, #24]
 800f096:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f098:	2300      	movs	r3, #0
 800f09a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0a0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 80a7 	beq.w	800f1f8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	895b      	ldrh	r3, [r3, #10]
 800f0ae:	025b      	lsls	r3, r3, #9
 800f0b0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d01b      	beq.n	800f0f0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	1e5a      	subs	r2, r3, #1
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	fbb2 f2f3 	udiv	r2, r2, r3
 800f0c2:	6a3b      	ldr	r3, [r7, #32]
 800f0c4:	1e59      	subs	r1, r3, #1
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d30f      	bcc.n	800f0f0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f0d0:	6a3b      	ldr	r3, [r7, #32]
 800f0d2:	1e5a      	subs	r2, r3, #1
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	425b      	negs	r3, r3
 800f0d8:	401a      	ands	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	699b      	ldr	r3, [r3, #24]
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	69db      	ldr	r3, [r3, #28]
 800f0ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0ee:	e022      	b.n	800f136 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d119      	bne.n	800f130 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2100      	movs	r1, #0
 800f100:	4618      	mov	r0, r3
 800f102:	f7fd fdd8 	bl	800ccb6 <create_chain>
 800f106:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d104      	bne.n	800f118 <f_lseek+0x28a>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2202      	movs	r2, #2
 800f112:	755a      	strb	r2, [r3, #21]
 800f114:	2302      	movs	r3, #2
 800f116:	e0bf      	b.n	800f298 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11e:	d104      	bne.n	800f12a <f_lseek+0x29c>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2201      	movs	r2, #1
 800f124:	755a      	strb	r2, [r3, #21]
 800f126:	2301      	movs	r3, #1
 800f128:	e0b6      	b.n	800f298 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f12e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f134:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d05d      	beq.n	800f1f8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f13c:	e03a      	b.n	800f1b4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	1ad3      	subs	r3, r2, r3
 800f144:	603b      	str	r3, [r7, #0]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	699a      	ldr	r2, [r3, #24]
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	441a      	add	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	7d1b      	ldrb	r3, [r3, #20]
 800f156:	f003 0302 	and.w	r3, r3, #2
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00b      	beq.n	800f176 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f162:	4618      	mov	r0, r3
 800f164:	f7fd fda7 	bl	800ccb6 <create_chain>
 800f168:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d108      	bne.n	800f182 <f_lseek+0x2f4>
							ofs = 0; break;
 800f170:	2300      	movs	r3, #0
 800f172:	603b      	str	r3, [r7, #0]
 800f174:	e022      	b.n	800f1bc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fd fba5 	bl	800c8ca <get_fat>
 800f180:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f188:	d104      	bne.n	800f194 <f_lseek+0x306>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2201      	movs	r2, #1
 800f18e:	755a      	strb	r2, [r3, #21]
 800f190:	2301      	movs	r3, #1
 800f192:	e081      	b.n	800f298 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f196:	2b01      	cmp	r3, #1
 800f198:	d904      	bls.n	800f1a4 <f_lseek+0x316>
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	699b      	ldr	r3, [r3, #24]
 800f19e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d304      	bcc.n	800f1ae <f_lseek+0x320>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	755a      	strb	r2, [r3, #21]
 800f1aa:	2302      	movs	r3, #2
 800f1ac:	e074      	b.n	800f298 <f_lseek+0x40a>
					fp->clust = clst;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1b2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d8c0      	bhi.n	800f13e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	699a      	ldr	r2, [r3, #24]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	441a      	add	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d012      	beq.n	800f1f8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fd fb58 	bl	800c88c <clust2sect>
 800f1dc:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d104      	bne.n	800f1ee <f_lseek+0x360>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	755a      	strb	r2, [r3, #21]
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	e054      	b.n	800f298 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	0a5b      	lsrs	r3, r3, #9
 800f1f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1f4:	4413      	add	r3, r2
 800f1f6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	699a      	ldr	r2, [r3, #24]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	429a      	cmp	r2, r3
 800f202:	d90a      	bls.n	800f21a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	7d1b      	ldrb	r3, [r3, #20]
 800f210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f214:	b2da      	uxtb	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f222:	2b00      	cmp	r3, #0
 800f224:	d036      	beq.n	800f294 <f_lseek+0x406>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d031      	beq.n	800f294 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	7d1b      	ldrb	r3, [r3, #20]
 800f234:	b25b      	sxtb	r3, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	da18      	bge.n	800f26c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	7858      	ldrb	r0, [r3, #1]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6a1a      	ldr	r2, [r3, #32]
 800f248:	2301      	movs	r3, #1
 800f24a:	f7fc ff95 	bl	800c178 <disk_write>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d004      	beq.n	800f25e <f_lseek+0x3d0>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2201      	movs	r2, #1
 800f258:	755a      	strb	r2, [r3, #21]
 800f25a:	2301      	movs	r3, #1
 800f25c:	e01c      	b.n	800f298 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	7d1b      	ldrb	r3, [r3, #20]
 800f262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f266:	b2da      	uxtb	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	7858      	ldrb	r0, [r3, #1]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f276:	2301      	movs	r3, #1
 800f278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f27a:	f7fc ff5d 	bl	800c138 <disk_read>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d004      	beq.n	800f28e <f_lseek+0x400>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2201      	movs	r2, #1
 800f288:	755a      	strb	r2, [r3, #21]
 800f28a:	2301      	movs	r3, #1
 800f28c:	e004      	b.n	800f298 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f292:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f294:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3740      	adds	r7, #64	@ 0x40
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b086      	sub	sp, #24
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d101      	bne.n	800f2b4 <f_opendir+0x14>
 800f2b0:	2309      	movs	r3, #9
 800f2b2:	e064      	b.n	800f37e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f2b8:	f107 010c 	add.w	r1, r7, #12
 800f2bc:	463b      	mov	r3, r7
 800f2be:	2200      	movs	r2, #0
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fe ff77 	bl	800e1b4 <find_volume>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d14f      	bne.n	800f370 <f_opendir+0xd0>
		obj->fs = fs;
 800f2d0:	68fa      	ldr	r2, [r7, #12]
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7fe fe5e 	bl	800df9c <follow_path>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d13d      	bne.n	800f366 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f2f0:	b25b      	sxtb	r3, r3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	db12      	blt.n	800f31c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	799b      	ldrb	r3, [r3, #6]
 800f2fa:	f003 0310 	and.w	r3, r3, #16
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00a      	beq.n	800f318 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6a1b      	ldr	r3, [r3, #32]
 800f308:	4619      	mov	r1, r3
 800f30a:	4610      	mov	r0, r2
 800f30c:	f7fd ff26 	bl	800d15c <ld_clust>
 800f310:	4602      	mov	r2, r0
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	609a      	str	r2, [r3, #8]
 800f316:	e001      	b.n	800f31c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f318:	2305      	movs	r3, #5
 800f31a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f31c:	7dfb      	ldrb	r3, [r7, #23]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d121      	bne.n	800f366 <f_opendir+0xc6>
				obj->id = fs->id;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	88da      	ldrh	r2, [r3, #6]
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f32a:	2100      	movs	r1, #0
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7fd fd8e 	bl	800ce4e <dir_sdi>
 800f332:	4603      	mov	r3, r0
 800f334:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d114      	bne.n	800f366 <f_opendir+0xc6>
					if (obj->sclust) {
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d00d      	beq.n	800f360 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f344:	2100      	movs	r1, #0
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7fd f8d2 	bl	800c4f0 <inc_lock>
 800f34c:	4602      	mov	r2, r0
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d105      	bne.n	800f366 <f_opendir+0xc6>
 800f35a:	2312      	movs	r3, #18
 800f35c:	75fb      	strb	r3, [r7, #23]
 800f35e:	e002      	b.n	800f366 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	2200      	movs	r2, #0
 800f364:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f366:	7dfb      	ldrb	r3, [r7, #23]
 800f368:	2b04      	cmp	r3, #4
 800f36a:	d101      	bne.n	800f370 <f_opendir+0xd0>
 800f36c:	2305      	movs	r3, #5
 800f36e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f370:	7dfb      	ldrb	r3, [r7, #23]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d002      	beq.n	800f37c <f_opendir+0xdc>
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	2200      	movs	r2, #0
 800f37a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3718      	adds	r7, #24
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b084      	sub	sp, #16
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f107 0208 	add.w	r2, r7, #8
 800f394:	4611      	mov	r1, r2
 800f396:	4618      	mov	r0, r3
 800f398:	f7ff f95c 	bl	800e654 <validate>
 800f39c:	4603      	mov	r3, r0
 800f39e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f3a0:	7bfb      	ldrb	r3, [r7, #15]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d110      	bne.n	800f3c8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d006      	beq.n	800f3bc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fd f92a 	bl	800c60c <dec_lock>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f3bc:	7bfb      	ldrb	r3, [r7, #15]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d102      	bne.n	800f3c8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b084      	sub	sp, #16
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
 800f3da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f107 0208 	add.w	r2, r7, #8
 800f3e2:	4611      	mov	r1, r2
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff f935 	bl	800e654 <validate>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f3ee:	7bfb      	ldrb	r3, [r7, #15]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d126      	bne.n	800f442 <f_readdir+0x70>
		if (!fno) {
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d106      	bne.n	800f408 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7fd fd26 	bl	800ce4e <dir_sdi>
 800f402:	4603      	mov	r3, r0
 800f404:	73fb      	strb	r3, [r7, #15]
 800f406:	e01c      	b.n	800f442 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f408:	2100      	movs	r1, #0
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7fe f8d1 	bl	800d5b2 <dir_read>
 800f410:	4603      	mov	r3, r0
 800f412:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f414:	7bfb      	ldrb	r3, [r7, #15]
 800f416:	2b04      	cmp	r3, #4
 800f418:	d101      	bne.n	800f41e <f_readdir+0x4c>
 800f41a:	2300      	movs	r3, #0
 800f41c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f41e:	7bfb      	ldrb	r3, [r7, #15]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10e      	bne.n	800f442 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f424:	6839      	ldr	r1, [r7, #0]
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7fe fb22 	bl	800da70 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f42c:	2100      	movs	r1, #0
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7fd fd88 	bl	800cf44 <dir_next>
 800f434:	4603      	mov	r3, r0
 800f436:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f438:	7bfb      	ldrb	r3, [r7, #15]
 800f43a:	2b04      	cmp	r3, #4
 800f43c:	d101      	bne.n	800f442 <f_readdir+0x70>
 800f43e:	2300      	movs	r3, #0
 800f440:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f442:	7bfb      	ldrb	r3, [r7, #15]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b087      	sub	sp, #28
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	4613      	mov	r3, r2
 800f458:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f45a:	2301      	movs	r3, #1
 800f45c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f45e:	2300      	movs	r3, #0
 800f460:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f462:	4b1f      	ldr	r3, [pc, #124]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f464:	7a5b      	ldrb	r3, [r3, #9]
 800f466:	b2db      	uxtb	r3, r3
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d131      	bne.n	800f4d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f46c:	4b1c      	ldr	r3, [pc, #112]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f46e:	7a5b      	ldrb	r3, [r3, #9]
 800f470:	b2db      	uxtb	r3, r3
 800f472:	461a      	mov	r2, r3
 800f474:	4b1a      	ldr	r3, [pc, #104]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f476:	2100      	movs	r1, #0
 800f478:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f47a:	4b19      	ldr	r3, [pc, #100]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f47c:	7a5b      	ldrb	r3, [r3, #9]
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	4a17      	ldr	r2, [pc, #92]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	4413      	add	r3, r2
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f48a:	4b15      	ldr	r3, [pc, #84]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f48c:	7a5b      	ldrb	r3, [r3, #9]
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	461a      	mov	r2, r3
 800f492:	4b13      	ldr	r3, [pc, #76]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f494:	4413      	add	r3, r2
 800f496:	79fa      	ldrb	r2, [r7, #7]
 800f498:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f49a:	4b11      	ldr	r3, [pc, #68]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f49c:	7a5b      	ldrb	r3, [r3, #9]
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	1c5a      	adds	r2, r3, #1
 800f4a2:	b2d1      	uxtb	r1, r2
 800f4a4:	4a0e      	ldr	r2, [pc, #56]	@ (800f4e0 <FATFS_LinkDriverEx+0x94>)
 800f4a6:	7251      	strb	r1, [r2, #9]
 800f4a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f4aa:	7dbb      	ldrb	r3, [r7, #22]
 800f4ac:	3330      	adds	r3, #48	@ 0x30
 800f4ae:	b2da      	uxtb	r2, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	223a      	movs	r2, #58	@ 0x3a
 800f4ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	3302      	adds	r3, #2
 800f4c0:	222f      	movs	r2, #47	@ 0x2f
 800f4c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	3303      	adds	r3, #3
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	371c      	adds	r7, #28
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	20001ddc 	.word	0x20001ddc

0800f4e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	6839      	ldr	r1, [r7, #0]
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff ffaa 	bl	800f44c <FATFS_LinkDriverEx>
 800f4f8:	4603      	mov	r3, r0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	6039      	str	r1, [r7, #0]
 800f50e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f510:	88fb      	ldrh	r3, [r7, #6]
 800f512:	2b7f      	cmp	r3, #127	@ 0x7f
 800f514:	d802      	bhi.n	800f51c <ff_convert+0x18>
		c = chr;
 800f516:	88fb      	ldrh	r3, [r7, #6]
 800f518:	81fb      	strh	r3, [r7, #14]
 800f51a:	e025      	b.n	800f568 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00b      	beq.n	800f53a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f522:	88fb      	ldrh	r3, [r7, #6]
 800f524:	2bff      	cmp	r3, #255	@ 0xff
 800f526:	d805      	bhi.n	800f534 <ff_convert+0x30>
 800f528:	88fb      	ldrh	r3, [r7, #6]
 800f52a:	3b80      	subs	r3, #128	@ 0x80
 800f52c:	4a12      	ldr	r2, [pc, #72]	@ (800f578 <ff_convert+0x74>)
 800f52e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f532:	e000      	b.n	800f536 <ff_convert+0x32>
 800f534:	2300      	movs	r3, #0
 800f536:	81fb      	strh	r3, [r7, #14]
 800f538:	e016      	b.n	800f568 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f53a:	2300      	movs	r3, #0
 800f53c:	81fb      	strh	r3, [r7, #14]
 800f53e:	e009      	b.n	800f554 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f540:	89fb      	ldrh	r3, [r7, #14]
 800f542:	4a0d      	ldr	r2, [pc, #52]	@ (800f578 <ff_convert+0x74>)
 800f544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f548:	88fa      	ldrh	r2, [r7, #6]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d006      	beq.n	800f55c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f54e:	89fb      	ldrh	r3, [r7, #14]
 800f550:	3301      	adds	r3, #1
 800f552:	81fb      	strh	r3, [r7, #14]
 800f554:	89fb      	ldrh	r3, [r7, #14]
 800f556:	2b7f      	cmp	r3, #127	@ 0x7f
 800f558:	d9f2      	bls.n	800f540 <ff_convert+0x3c>
 800f55a:	e000      	b.n	800f55e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f55c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f55e:	89fb      	ldrh	r3, [r7, #14]
 800f560:	3380      	adds	r3, #128	@ 0x80
 800f562:	b29b      	uxth	r3, r3
 800f564:	b2db      	uxtb	r3, r3
 800f566:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f568:	89fb      	ldrh	r3, [r7, #14]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3714      	adds	r7, #20
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	080101a4 	.word	0x080101a4

0800f57c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b087      	sub	sp, #28
 800f580:	af00      	add	r7, sp, #0
 800f582:	4603      	mov	r3, r0
 800f584:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f586:	88fb      	ldrh	r3, [r7, #6]
 800f588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f58c:	d201      	bcs.n	800f592 <ff_wtoupper+0x16>
 800f58e:	4b3e      	ldr	r3, [pc, #248]	@ (800f688 <ff_wtoupper+0x10c>)
 800f590:	e000      	b.n	800f594 <ff_wtoupper+0x18>
 800f592:	4b3e      	ldr	r3, [pc, #248]	@ (800f68c <ff_wtoupper+0x110>)
 800f594:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	1c9a      	adds	r2, r3, #2
 800f59a:	617a      	str	r2, [r7, #20]
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f5a0:	8a7b      	ldrh	r3, [r7, #18]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d068      	beq.n	800f678 <ff_wtoupper+0xfc>
 800f5a6:	88fa      	ldrh	r2, [r7, #6]
 800f5a8:	8a7b      	ldrh	r3, [r7, #18]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d364      	bcc.n	800f678 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	1c9a      	adds	r2, r3, #2
 800f5b2:	617a      	str	r2, [r7, #20]
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	823b      	strh	r3, [r7, #16]
 800f5b8:	8a3b      	ldrh	r3, [r7, #16]
 800f5ba:	0a1b      	lsrs	r3, r3, #8
 800f5bc:	81fb      	strh	r3, [r7, #14]
 800f5be:	8a3b      	ldrh	r3, [r7, #16]
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f5c4:	88fa      	ldrh	r2, [r7, #6]
 800f5c6:	8a79      	ldrh	r1, [r7, #18]
 800f5c8:	8a3b      	ldrh	r3, [r7, #16]
 800f5ca:	440b      	add	r3, r1
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	da49      	bge.n	800f664 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f5d0:	89fb      	ldrh	r3, [r7, #14]
 800f5d2:	2b08      	cmp	r3, #8
 800f5d4:	d84f      	bhi.n	800f676 <ff_wtoupper+0xfa>
 800f5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5dc <ff_wtoupper+0x60>)
 800f5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5dc:	0800f601 	.word	0x0800f601
 800f5e0:	0800f613 	.word	0x0800f613
 800f5e4:	0800f629 	.word	0x0800f629
 800f5e8:	0800f631 	.word	0x0800f631
 800f5ec:	0800f639 	.word	0x0800f639
 800f5f0:	0800f641 	.word	0x0800f641
 800f5f4:	0800f649 	.word	0x0800f649
 800f5f8:	0800f651 	.word	0x0800f651
 800f5fc:	0800f659 	.word	0x0800f659
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f600:	88fa      	ldrh	r2, [r7, #6]
 800f602:	8a7b      	ldrh	r3, [r7, #18]
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	005b      	lsls	r3, r3, #1
 800f608:	697a      	ldr	r2, [r7, #20]
 800f60a:	4413      	add	r3, r2
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	80fb      	strh	r3, [r7, #6]
 800f610:	e027      	b.n	800f662 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f612:	88fa      	ldrh	r2, [r7, #6]
 800f614:	8a7b      	ldrh	r3, [r7, #18]
 800f616:	1ad3      	subs	r3, r2, r3
 800f618:	b29b      	uxth	r3, r3
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	b29b      	uxth	r3, r3
 800f620:	88fa      	ldrh	r2, [r7, #6]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	80fb      	strh	r3, [r7, #6]
 800f626:	e01c      	b.n	800f662 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f628:	88fb      	ldrh	r3, [r7, #6]
 800f62a:	3b10      	subs	r3, #16
 800f62c:	80fb      	strh	r3, [r7, #6]
 800f62e:	e018      	b.n	800f662 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f630:	88fb      	ldrh	r3, [r7, #6]
 800f632:	3b20      	subs	r3, #32
 800f634:	80fb      	strh	r3, [r7, #6]
 800f636:	e014      	b.n	800f662 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f638:	88fb      	ldrh	r3, [r7, #6]
 800f63a:	3b30      	subs	r3, #48	@ 0x30
 800f63c:	80fb      	strh	r3, [r7, #6]
 800f63e:	e010      	b.n	800f662 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f640:	88fb      	ldrh	r3, [r7, #6]
 800f642:	3b1a      	subs	r3, #26
 800f644:	80fb      	strh	r3, [r7, #6]
 800f646:	e00c      	b.n	800f662 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f648:	88fb      	ldrh	r3, [r7, #6]
 800f64a:	3308      	adds	r3, #8
 800f64c:	80fb      	strh	r3, [r7, #6]
 800f64e:	e008      	b.n	800f662 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f650:	88fb      	ldrh	r3, [r7, #6]
 800f652:	3b50      	subs	r3, #80	@ 0x50
 800f654:	80fb      	strh	r3, [r7, #6]
 800f656:	e004      	b.n	800f662 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f658:	88fb      	ldrh	r3, [r7, #6]
 800f65a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f65e:	80fb      	strh	r3, [r7, #6]
 800f660:	bf00      	nop
			}
			break;
 800f662:	e008      	b.n	800f676 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f664:	89fb      	ldrh	r3, [r7, #14]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d195      	bne.n	800f596 <ff_wtoupper+0x1a>
 800f66a:	8a3b      	ldrh	r3, [r7, #16]
 800f66c:	005b      	lsls	r3, r3, #1
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	4413      	add	r3, r2
 800f672:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f674:	e78f      	b.n	800f596 <ff_wtoupper+0x1a>
			break;
 800f676:	bf00      	nop
	}

	return chr;
 800f678:	88fb      	ldrh	r3, [r7, #6]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	371c      	adds	r7, #28
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	080102a4 	.word	0x080102a4
 800f68c:	08010498 	.word	0x08010498

0800f690 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f694:	2201      	movs	r2, #1
 800f696:	490e      	ldr	r1, [pc, #56]	@ (800f6d0 <MX_USB_HOST_Init+0x40>)
 800f698:	480e      	ldr	r0, [pc, #56]	@ (800f6d4 <MX_USB_HOST_Init+0x44>)
 800f69a:	f7fb f9c0 	bl	800aa1e <USBH_Init>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d001      	beq.n	800f6a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f6a4:	f7f2 f902 	bl	80018ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f6a8:	490b      	ldr	r1, [pc, #44]	@ (800f6d8 <MX_USB_HOST_Init+0x48>)
 800f6aa:	480a      	ldr	r0, [pc, #40]	@ (800f6d4 <MX_USB_HOST_Init+0x44>)
 800f6ac:	f7fb fa45 	bl	800ab3a <USBH_RegisterClass>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d001      	beq.n	800f6ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f6b6:	f7f2 f8f9 	bl	80018ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f6ba:	4806      	ldr	r0, [pc, #24]	@ (800f6d4 <MX_USB_HOST_Init+0x44>)
 800f6bc:	f7fb fac9 	bl	800ac52 <USBH_Start>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f6c6:	f7f2 f8f1 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f6ca:	bf00      	nop
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	0800f6f1 	.word	0x0800f6f1
 800f6d4:	20001de8 	.word	0x20001de8
 800f6d8:	20000048 	.word	0x20000048

0800f6dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f6e0:	4802      	ldr	r0, [pc, #8]	@ (800f6ec <MX_USB_HOST_Process+0x10>)
 800f6e2:	f7fb fac7 	bl	800ac74 <USBH_Process>
}
 800f6e6:	bf00      	nop
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	20001de8 	.word	0x20001de8

0800f6f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f6fc:	78fb      	ldrb	r3, [r7, #3]
 800f6fe:	3b01      	subs	r3, #1
 800f700:	2b04      	cmp	r3, #4
 800f702:	d819      	bhi.n	800f738 <USBH_UserProcess+0x48>
 800f704:	a201      	add	r2, pc, #4	@ (adr r2, 800f70c <USBH_UserProcess+0x1c>)
 800f706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70a:	bf00      	nop
 800f70c:	0800f739 	.word	0x0800f739
 800f710:	0800f729 	.word	0x0800f729
 800f714:	0800f739 	.word	0x0800f739
 800f718:	0800f731 	.word	0x0800f731
 800f71c:	0800f721 	.word	0x0800f721
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f720:	4b09      	ldr	r3, [pc, #36]	@ (800f748 <USBH_UserProcess+0x58>)
 800f722:	2203      	movs	r2, #3
 800f724:	701a      	strb	r2, [r3, #0]
  break;
 800f726:	e008      	b.n	800f73a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f728:	4b07      	ldr	r3, [pc, #28]	@ (800f748 <USBH_UserProcess+0x58>)
 800f72a:	2202      	movs	r2, #2
 800f72c:	701a      	strb	r2, [r3, #0]
  break;
 800f72e:	e004      	b.n	800f73a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f730:	4b05      	ldr	r3, [pc, #20]	@ (800f748 <USBH_UserProcess+0x58>)
 800f732:	2201      	movs	r2, #1
 800f734:	701a      	strb	r2, [r3, #0]
  break;
 800f736:	e000      	b.n	800f73a <USBH_UserProcess+0x4a>

  default:
  break;
 800f738:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f73a:	bf00      	nop
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	200021c0 	.word	0x200021c0

0800f74c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08a      	sub	sp, #40	@ 0x28
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f754:	f107 0314 	add.w	r3, r7, #20
 800f758:	2200      	movs	r2, #0
 800f75a:	601a      	str	r2, [r3, #0]
 800f75c:	605a      	str	r2, [r3, #4]
 800f75e:	609a      	str	r2, [r3, #8]
 800f760:	60da      	str	r2, [r3, #12]
 800f762:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f76c:	d147      	bne.n	800f7fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f76e:	2300      	movs	r3, #0
 800f770:	613b      	str	r3, [r7, #16]
 800f772:	4b25      	ldr	r3, [pc, #148]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f776:	4a24      	ldr	r2, [pc, #144]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f778:	f043 0301 	orr.w	r3, r3, #1
 800f77c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f77e:	4b22      	ldr	r3, [pc, #136]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f782:	f003 0301 	and.w	r3, r3, #1
 800f786:	613b      	str	r3, [r7, #16]
 800f788:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f78a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f78e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f790:	2300      	movs	r3, #0
 800f792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f794:	2300      	movs	r3, #0
 800f796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f798:	f107 0314 	add.w	r3, r7, #20
 800f79c:	4619      	mov	r1, r3
 800f79e:	481b      	ldr	r0, [pc, #108]	@ (800f80c <HAL_HCD_MspInit+0xc0>)
 800f7a0:	f7f3 ff06 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f7a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f7a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7aa:	2302      	movs	r3, #2
 800f7ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7b2:	2303      	movs	r3, #3
 800f7b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f7b6:	230a      	movs	r3, #10
 800f7b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7ba:	f107 0314 	add.w	r3, r7, #20
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4812      	ldr	r0, [pc, #72]	@ (800f80c <HAL_HCD_MspInit+0xc0>)
 800f7c2:	f7f3 fef5 	bl	80035b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f7c6:	4b10      	ldr	r3, [pc, #64]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7ca:	4a0f      	ldr	r2, [pc, #60]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f7cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7d0:	6353      	str	r3, [r2, #52]	@ 0x34
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	60fb      	str	r3, [r7, #12]
 800f7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7da:	4a0b      	ldr	r2, [pc, #44]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f7dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f7e0:	6453      	str	r3, [r2, #68]	@ 0x44
 800f7e2:	4b09      	ldr	r3, [pc, #36]	@ (800f808 <HAL_HCD_MspInit+0xbc>)
 800f7e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f7ea:	60fb      	str	r3, [r7, #12]
 800f7ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	2043      	movs	r0, #67	@ 0x43
 800f7f4:	f7f3 fa67 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f7f8:	2043      	movs	r0, #67	@ 0x43
 800f7fa:	f7f3 fa80 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f7fe:	bf00      	nop
 800f800:	3728      	adds	r7, #40	@ 0x28
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	40023800 	.word	0x40023800
 800f80c:	40020000 	.word	0x40020000

0800f810 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fb fdf5 	bl	800b40e <USBH_LL_IncTimer>
}
 800f824:	bf00      	nop
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fb fe2d 	bl	800b49a <USBH_LL_Connect>
}
 800f840:	bf00      	nop
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f856:	4618      	mov	r0, r3
 800f858:	f7fb fe36 	bl	800b4c8 <USBH_LL_Disconnect>
}
 800f85c:	bf00      	nop
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	460b      	mov	r3, r1
 800f86e:	70fb      	strb	r3, [r7, #3]
 800f870:	4613      	mov	r3, r2
 800f872:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f874:	bf00      	nop
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fb fde7 	bl	800b462 <USBH_LL_PortEnabled>
}
 800f894:	bf00      	nop
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fb fde7 	bl	800b47e <USBH_LL_PortDisabled>
}
 800f8b0:	bf00      	nop
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d12a      	bne.n	800f920 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f8ca:	4a18      	ldr	r2, [pc, #96]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a15      	ldr	r2, [pc, #84]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8d6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f8da:	4b14      	ldr	r3, [pc, #80]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f8e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f8e2:	4b12      	ldr	r3, [pc, #72]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8e4:	2208      	movs	r2, #8
 800f8e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f8e8:	4b10      	ldr	r3, [pc, #64]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f8ee:	4b0f      	ldr	r3, [pc, #60]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f8f4:	4b0d      	ldr	r3, [pc, #52]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8f6:	2202      	movs	r2, #2
 800f8f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f8fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f92c <USBH_LL_Init+0x74>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f900:	480a      	ldr	r0, [pc, #40]	@ (800f92c <USBH_LL_Init+0x74>)
 800f902:	f7f4 f8ef 	bl	8003ae4 <HAL_HCD_Init>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f90c:	f7f1 ffce 	bl	80018ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f910:	4806      	ldr	r0, [pc, #24]	@ (800f92c <USBH_LL_Init+0x74>)
 800f912:	f7f4 fcf3 	bl	80042fc <HAL_HCD_GetCurrentFrame>
 800f916:	4603      	mov	r3, r0
 800f918:	4619      	mov	r1, r3
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7fb fd68 	bl	800b3f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f920:	2300      	movs	r3, #0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	200021c4 	.word	0x200021c4

0800f930 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f93c:	2300      	movs	r3, #0
 800f93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f946:	4618      	mov	r0, r3
 800f948:	f7f4 fc60 	bl	800420c <HAL_HCD_Start>
 800f94c:	4603      	mov	r3, r0
 800f94e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	4618      	mov	r0, r3
 800f954:	f000 f992 	bl	800fc7c <USBH_Get_USB_Status>
 800f958:	4603      	mov	r3, r0
 800f95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b084      	sub	sp, #16
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f96e:	2300      	movs	r3, #0
 800f970:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f972:	2300      	movs	r3, #0
 800f974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7f4 fc68 	bl	8004252 <HAL_HCD_Stop>
 800f982:	4603      	mov	r3, r0
 800f984:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f986:	7bfb      	ldrb	r3, [r7, #15]
 800f988:	4618      	mov	r0, r3
 800f98a:	f000 f977 	bl	800fc7c <USBH_Get_USB_Status>
 800f98e:	4603      	mov	r3, r0
 800f990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f992:	7bbb      	ldrb	r3, [r7, #14]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3710      	adds	r7, #16
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7f4 fcb2 	bl	8004318 <HAL_HCD_GetCurrentSpeed>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b02      	cmp	r3, #2
 800f9b8:	d00c      	beq.n	800f9d4 <USBH_LL_GetSpeed+0x38>
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d80d      	bhi.n	800f9da <USBH_LL_GetSpeed+0x3e>
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d002      	beq.n	800f9c8 <USBH_LL_GetSpeed+0x2c>
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d003      	beq.n	800f9ce <USBH_LL_GetSpeed+0x32>
 800f9c6:	e008      	b.n	800f9da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f9cc:	e008      	b.n	800f9e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d2:	e005      	b.n	800f9e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f9d4:	2302      	movs	r3, #2
 800f9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d8:	e002      	b.n	800f9e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f9da:	2301      	movs	r3, #1
 800f9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800f9de:	bf00      	nop
  }
  return  speed;
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b084      	sub	sp, #16
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7f4 fc43 	bl	800428c <HAL_HCD_ResetPort>
 800fa06:	4603      	mov	r3, r0
 800fa08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa0a:	7bfb      	ldrb	r3, [r7, #15]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 f935 	bl	800fc7c <USBH_Get_USB_Status>
 800fa12:	4603      	mov	r3, r0
 800fa14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa16:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa32:	78fa      	ldrb	r2, [r7, #3]
 800fa34:	4611      	mov	r1, r2
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7f4 fc4b 	bl	80042d2 <HAL_HCD_HC_GetXferCount>
 800fa3c:	4603      	mov	r3, r0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}

0800fa46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fa46:	b590      	push	{r4, r7, lr}
 800fa48:	b089      	sub	sp, #36	@ 0x24
 800fa4a:	af04      	add	r7, sp, #16
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	4608      	mov	r0, r1
 800fa50:	4611      	mov	r1, r2
 800fa52:	461a      	mov	r2, r3
 800fa54:	4603      	mov	r3, r0
 800fa56:	70fb      	strb	r3, [r7, #3]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	70bb      	strb	r3, [r7, #2]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa60:	2300      	movs	r3, #0
 800fa62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fa6e:	787c      	ldrb	r4, [r7, #1]
 800fa70:	78ba      	ldrb	r2, [r7, #2]
 800fa72:	78f9      	ldrb	r1, [r7, #3]
 800fa74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fa76:	9302      	str	r3, [sp, #8]
 800fa78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	4623      	mov	r3, r4
 800fa86:	f7f4 f88f 	bl	8003ba8 <HAL_HCD_HC_Init>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa8e:	7bfb      	ldrb	r3, [r7, #15]
 800fa90:	4618      	mov	r0, r3
 800fa92:	f000 f8f3 	bl	800fc7c <USBH_Get_USB_Status>
 800fa96:	4603      	mov	r3, r0
 800fa98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd90      	pop	{r4, r7, pc}

0800faa4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	460b      	mov	r3, r1
 800faae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fab4:	2300      	movs	r3, #0
 800fab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fabe:	78fa      	ldrb	r2, [r7, #3]
 800fac0:	4611      	mov	r1, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f4 f908 	bl	8003cd8 <HAL_HCD_HC_Halt>
 800fac8:	4603      	mov	r3, r0
 800faca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800facc:	7bfb      	ldrb	r3, [r7, #15]
 800face:	4618      	mov	r0, r3
 800fad0:	f000 f8d4 	bl	800fc7c <USBH_Get_USB_Status>
 800fad4:	4603      	mov	r3, r0
 800fad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3710      	adds	r7, #16
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fae2:	b590      	push	{r4, r7, lr}
 800fae4:	b089      	sub	sp, #36	@ 0x24
 800fae6:	af04      	add	r7, sp, #16
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	4608      	mov	r0, r1
 800faec:	4611      	mov	r1, r2
 800faee:	461a      	mov	r2, r3
 800faf0:	4603      	mov	r3, r0
 800faf2:	70fb      	strb	r3, [r7, #3]
 800faf4:	460b      	mov	r3, r1
 800faf6:	70bb      	strb	r3, [r7, #2]
 800faf8:	4613      	mov	r3, r2
 800fafa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fafc:	2300      	movs	r3, #0
 800fafe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fb0a:	787c      	ldrb	r4, [r7, #1]
 800fb0c:	78ba      	ldrb	r2, [r7, #2]
 800fb0e:	78f9      	ldrb	r1, [r7, #3]
 800fb10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fb14:	9303      	str	r3, [sp, #12]
 800fb16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb18:	9302      	str	r3, [sp, #8]
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1c:	9301      	str	r3, [sp, #4]
 800fb1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	4623      	mov	r3, r4
 800fb26:	f7f4 f8fb 	bl	8003d20 <HAL_HCD_HC_SubmitRequest>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fb2e:	7bfb      	ldrb	r3, [r7, #15]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f000 f8a3 	bl	800fc7c <USBH_Get_USB_Status>
 800fb36:	4603      	mov	r3, r0
 800fb38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3714      	adds	r7, #20
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd90      	pop	{r4, r7, pc}

0800fb44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb56:	78fa      	ldrb	r2, [r7, #3]
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7f4 fba4 	bl	80042a8 <HAL_HCD_HC_GetURBState>
 800fb60:	4603      	mov	r3, r0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	460b      	mov	r3, r1
 800fb74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d103      	bne.n	800fb88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fb80:	78fb      	ldrb	r3, [r7, #3]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 f8a6 	bl	800fcd4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fb88:	20c8      	movs	r0, #200	@ 0xc8
 800fb8a:	f7f2 fb0f 	bl	80021ac <HAL_Delay>
  return USBH_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
 800fba4:	4613      	mov	r3, r2
 800fba6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fbae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fbb0:	78fa      	ldrb	r2, [r7, #3]
 800fbb2:	68f9      	ldr	r1, [r7, #12]
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	4413      	add	r3, r2
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	440b      	add	r3, r1
 800fbbe:	333b      	adds	r3, #59	@ 0x3b
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00a      	beq.n	800fbdc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fbc6:	78fa      	ldrb	r2, [r7, #3]
 800fbc8:	68f9      	ldr	r1, [r7, #12]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	4413      	add	r3, r2
 800fbd0:	00db      	lsls	r3, r3, #3
 800fbd2:	440b      	add	r3, r1
 800fbd4:	3350      	adds	r3, #80	@ 0x50
 800fbd6:	78ba      	ldrb	r2, [r7, #2]
 800fbd8:	701a      	strb	r2, [r3, #0]
 800fbda:	e009      	b.n	800fbf0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fbdc:	78fa      	ldrb	r2, [r7, #3]
 800fbde:	68f9      	ldr	r1, [r7, #12]
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	4413      	add	r3, r2
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	440b      	add	r3, r1
 800fbea:	3351      	adds	r3, #81	@ 0x51
 800fbec:	78ba      	ldrb	r2, [r7, #2]
 800fbee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fbf0:	2300      	movs	r3, #0
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3714      	adds	r7, #20
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b085      	sub	sp, #20
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	460b      	mov	r3, r1
 800fc08:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fc14:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800fc16:	78fa      	ldrb	r2, [r7, #3]
 800fc18:	68b9      	ldr	r1, [r7, #8]
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4413      	add	r3, r2
 800fc20:	00db      	lsls	r3, r3, #3
 800fc22:	440b      	add	r3, r1
 800fc24:	333b      	adds	r3, #59	@ 0x3b
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00a      	beq.n	800fc42 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800fc2c:	78fa      	ldrb	r2, [r7, #3]
 800fc2e:	68b9      	ldr	r1, [r7, #8]
 800fc30:	4613      	mov	r3, r2
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	4413      	add	r3, r2
 800fc36:	00db      	lsls	r3, r3, #3
 800fc38:	440b      	add	r3, r1
 800fc3a:	3350      	adds	r3, #80	@ 0x50
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	73fb      	strb	r3, [r7, #15]
 800fc40:	e009      	b.n	800fc56 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fc42:	78fa      	ldrb	r2, [r7, #3]
 800fc44:	68b9      	ldr	r1, [r7, #8]
 800fc46:	4613      	mov	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4413      	add	r3, r2
 800fc4c:	00db      	lsls	r3, r3, #3
 800fc4e:	440b      	add	r3, r1
 800fc50:	3351      	adds	r3, #81	@ 0x51
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800fc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7f2 fa9d 	bl	80021ac <HAL_Delay>
}
 800fc72:	bf00      	nop
 800fc74:	3708      	adds	r7, #8
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
	...

0800fc7c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	4603      	mov	r3, r0
 800fc84:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc86:	2300      	movs	r3, #0
 800fc88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	2b03      	cmp	r3, #3
 800fc8e:	d817      	bhi.n	800fcc0 <USBH_Get_USB_Status+0x44>
 800fc90:	a201      	add	r2, pc, #4	@ (adr r2, 800fc98 <USBH_Get_USB_Status+0x1c>)
 800fc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc96:	bf00      	nop
 800fc98:	0800fca9 	.word	0x0800fca9
 800fc9c:	0800fcaf 	.word	0x0800fcaf
 800fca0:	0800fcb5 	.word	0x0800fcb5
 800fca4:	0800fcbb 	.word	0x0800fcbb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800fcac:	e00b      	b.n	800fcc6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fcae:	2302      	movs	r3, #2
 800fcb0:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb2:	e008      	b.n	800fcc6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb8:	e005      	b.n	800fcc6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fcba:	2302      	movs	r3, #2
 800fcbc:	73fb      	strb	r3, [r7, #15]
    break;
 800fcbe:	e002      	b.n	800fcc6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fcc0:	2302      	movs	r3, #2
 800fcc2:	73fb      	strb	r3, [r7, #15]
    break;
 800fcc4:	bf00      	nop
  }
  return usb_status;
 800fcc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	4603      	mov	r3, r0
 800fcdc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fcde:	79fb      	ldrb	r3, [r7, #7]
 800fce0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fce2:	79fb      	ldrb	r3, [r7, #7]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d102      	bne.n	800fcee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800fce8:	2301      	movs	r3, #1
 800fcea:	73fb      	strb	r3, [r7, #15]
 800fcec:	e001      	b.n	800fcf2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fcf2:	7bfb      	ldrb	r3, [r7, #15]
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	2101      	movs	r1, #1
 800fcf8:	4803      	ldr	r0, [pc, #12]	@ (800fd08 <MX_DriverVbusFS+0x34>)
 800fcfa:	f7f3 fec1 	bl	8003a80 <HAL_GPIO_WritePin>
}
 800fcfe:	bf00      	nop
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	40020800 	.word	0x40020800

0800fd0c <malloc>:
 800fd0c:	4b02      	ldr	r3, [pc, #8]	@ (800fd18 <malloc+0xc>)
 800fd0e:	4601      	mov	r1, r0
 800fd10:	6818      	ldr	r0, [r3, #0]
 800fd12:	f000 b82d 	b.w	800fd70 <_malloc_r>
 800fd16:	bf00      	nop
 800fd18:	20000068 	.word	0x20000068

0800fd1c <free>:
 800fd1c:	4b02      	ldr	r3, [pc, #8]	@ (800fd28 <free+0xc>)
 800fd1e:	4601      	mov	r1, r0
 800fd20:	6818      	ldr	r0, [r3, #0]
 800fd22:	f000 b92d 	b.w	800ff80 <_free_r>
 800fd26:	bf00      	nop
 800fd28:	20000068 	.word	0x20000068

0800fd2c <sbrk_aligned>:
 800fd2c:	b570      	push	{r4, r5, r6, lr}
 800fd2e:	4e0f      	ldr	r6, [pc, #60]	@ (800fd6c <sbrk_aligned+0x40>)
 800fd30:	460c      	mov	r4, r1
 800fd32:	6831      	ldr	r1, [r6, #0]
 800fd34:	4605      	mov	r5, r0
 800fd36:	b911      	cbnz	r1, 800fd3e <sbrk_aligned+0x12>
 800fd38:	f000 f8d8 	bl	800feec <_sbrk_r>
 800fd3c:	6030      	str	r0, [r6, #0]
 800fd3e:	4621      	mov	r1, r4
 800fd40:	4628      	mov	r0, r5
 800fd42:	f000 f8d3 	bl	800feec <_sbrk_r>
 800fd46:	1c43      	adds	r3, r0, #1
 800fd48:	d103      	bne.n	800fd52 <sbrk_aligned+0x26>
 800fd4a:	f04f 34ff 	mov.w	r4, #4294967295
 800fd4e:	4620      	mov	r0, r4
 800fd50:	bd70      	pop	{r4, r5, r6, pc}
 800fd52:	1cc4      	adds	r4, r0, #3
 800fd54:	f024 0403 	bic.w	r4, r4, #3
 800fd58:	42a0      	cmp	r0, r4
 800fd5a:	d0f8      	beq.n	800fd4e <sbrk_aligned+0x22>
 800fd5c:	1a21      	subs	r1, r4, r0
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f000 f8c4 	bl	800feec <_sbrk_r>
 800fd64:	3001      	adds	r0, #1
 800fd66:	d1f2      	bne.n	800fd4e <sbrk_aligned+0x22>
 800fd68:	e7ef      	b.n	800fd4a <sbrk_aligned+0x1e>
 800fd6a:	bf00      	nop
 800fd6c:	20002488 	.word	0x20002488

0800fd70 <_malloc_r>:
 800fd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd74:	1ccd      	adds	r5, r1, #3
 800fd76:	f025 0503 	bic.w	r5, r5, #3
 800fd7a:	3508      	adds	r5, #8
 800fd7c:	2d0c      	cmp	r5, #12
 800fd7e:	bf38      	it	cc
 800fd80:	250c      	movcc	r5, #12
 800fd82:	2d00      	cmp	r5, #0
 800fd84:	4606      	mov	r6, r0
 800fd86:	db01      	blt.n	800fd8c <_malloc_r+0x1c>
 800fd88:	42a9      	cmp	r1, r5
 800fd8a:	d904      	bls.n	800fd96 <_malloc_r+0x26>
 800fd8c:	230c      	movs	r3, #12
 800fd8e:	6033      	str	r3, [r6, #0]
 800fd90:	2000      	movs	r0, #0
 800fd92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe6c <_malloc_r+0xfc>
 800fd9a:	f000 f869 	bl	800fe70 <__malloc_lock>
 800fd9e:	f8d8 3000 	ldr.w	r3, [r8]
 800fda2:	461c      	mov	r4, r3
 800fda4:	bb44      	cbnz	r4, 800fdf8 <_malloc_r+0x88>
 800fda6:	4629      	mov	r1, r5
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f7ff ffbf 	bl	800fd2c <sbrk_aligned>
 800fdae:	1c43      	adds	r3, r0, #1
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	d158      	bne.n	800fe66 <_malloc_r+0xf6>
 800fdb4:	f8d8 4000 	ldr.w	r4, [r8]
 800fdb8:	4627      	mov	r7, r4
 800fdba:	2f00      	cmp	r7, #0
 800fdbc:	d143      	bne.n	800fe46 <_malloc_r+0xd6>
 800fdbe:	2c00      	cmp	r4, #0
 800fdc0:	d04b      	beq.n	800fe5a <_malloc_r+0xea>
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	eb04 0903 	add.w	r9, r4, r3
 800fdcc:	f000 f88e 	bl	800feec <_sbrk_r>
 800fdd0:	4581      	cmp	r9, r0
 800fdd2:	d142      	bne.n	800fe5a <_malloc_r+0xea>
 800fdd4:	6821      	ldr	r1, [r4, #0]
 800fdd6:	1a6d      	subs	r5, r5, r1
 800fdd8:	4629      	mov	r1, r5
 800fdda:	4630      	mov	r0, r6
 800fddc:	f7ff ffa6 	bl	800fd2c <sbrk_aligned>
 800fde0:	3001      	adds	r0, #1
 800fde2:	d03a      	beq.n	800fe5a <_malloc_r+0xea>
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	442b      	add	r3, r5
 800fde8:	6023      	str	r3, [r4, #0]
 800fdea:	f8d8 3000 	ldr.w	r3, [r8]
 800fdee:	685a      	ldr	r2, [r3, #4]
 800fdf0:	bb62      	cbnz	r2, 800fe4c <_malloc_r+0xdc>
 800fdf2:	f8c8 7000 	str.w	r7, [r8]
 800fdf6:	e00f      	b.n	800fe18 <_malloc_r+0xa8>
 800fdf8:	6822      	ldr	r2, [r4, #0]
 800fdfa:	1b52      	subs	r2, r2, r5
 800fdfc:	d420      	bmi.n	800fe40 <_malloc_r+0xd0>
 800fdfe:	2a0b      	cmp	r2, #11
 800fe00:	d917      	bls.n	800fe32 <_malloc_r+0xc2>
 800fe02:	1961      	adds	r1, r4, r5
 800fe04:	42a3      	cmp	r3, r4
 800fe06:	6025      	str	r5, [r4, #0]
 800fe08:	bf18      	it	ne
 800fe0a:	6059      	strne	r1, [r3, #4]
 800fe0c:	6863      	ldr	r3, [r4, #4]
 800fe0e:	bf08      	it	eq
 800fe10:	f8c8 1000 	streq.w	r1, [r8]
 800fe14:	5162      	str	r2, [r4, r5]
 800fe16:	604b      	str	r3, [r1, #4]
 800fe18:	4630      	mov	r0, r6
 800fe1a:	f000 f82f 	bl	800fe7c <__malloc_unlock>
 800fe1e:	f104 000b 	add.w	r0, r4, #11
 800fe22:	1d23      	adds	r3, r4, #4
 800fe24:	f020 0007 	bic.w	r0, r0, #7
 800fe28:	1ac2      	subs	r2, r0, r3
 800fe2a:	bf1c      	itt	ne
 800fe2c:	1a1b      	subne	r3, r3, r0
 800fe2e:	50a3      	strne	r3, [r4, r2]
 800fe30:	e7af      	b.n	800fd92 <_malloc_r+0x22>
 800fe32:	6862      	ldr	r2, [r4, #4]
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	bf0c      	ite	eq
 800fe38:	f8c8 2000 	streq.w	r2, [r8]
 800fe3c:	605a      	strne	r2, [r3, #4]
 800fe3e:	e7eb      	b.n	800fe18 <_malloc_r+0xa8>
 800fe40:	4623      	mov	r3, r4
 800fe42:	6864      	ldr	r4, [r4, #4]
 800fe44:	e7ae      	b.n	800fda4 <_malloc_r+0x34>
 800fe46:	463c      	mov	r4, r7
 800fe48:	687f      	ldr	r7, [r7, #4]
 800fe4a:	e7b6      	b.n	800fdba <_malloc_r+0x4a>
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	42a3      	cmp	r3, r4
 800fe52:	d1fb      	bne.n	800fe4c <_malloc_r+0xdc>
 800fe54:	2300      	movs	r3, #0
 800fe56:	6053      	str	r3, [r2, #4]
 800fe58:	e7de      	b.n	800fe18 <_malloc_r+0xa8>
 800fe5a:	230c      	movs	r3, #12
 800fe5c:	6033      	str	r3, [r6, #0]
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f000 f80c 	bl	800fe7c <__malloc_unlock>
 800fe64:	e794      	b.n	800fd90 <_malloc_r+0x20>
 800fe66:	6005      	str	r5, [r0, #0]
 800fe68:	e7d6      	b.n	800fe18 <_malloc_r+0xa8>
 800fe6a:	bf00      	nop
 800fe6c:	2000248c 	.word	0x2000248c

0800fe70 <__malloc_lock>:
 800fe70:	4801      	ldr	r0, [pc, #4]	@ (800fe78 <__malloc_lock+0x8>)
 800fe72:	f000 b875 	b.w	800ff60 <__retarget_lock_acquire_recursive>
 800fe76:	bf00      	nop
 800fe78:	200025cc 	.word	0x200025cc

0800fe7c <__malloc_unlock>:
 800fe7c:	4801      	ldr	r0, [pc, #4]	@ (800fe84 <__malloc_unlock+0x8>)
 800fe7e:	f000 b870 	b.w	800ff62 <__retarget_lock_release_recursive>
 800fe82:	bf00      	nop
 800fe84:	200025cc 	.word	0x200025cc

0800fe88 <memset>:
 800fe88:	4402      	add	r2, r0
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d100      	bne.n	800fe92 <memset+0xa>
 800fe90:	4770      	bx	lr
 800fe92:	f803 1b01 	strb.w	r1, [r3], #1
 800fe96:	e7f9      	b.n	800fe8c <memset+0x4>

0800fe98 <strncpy>:
 800fe98:	b510      	push	{r4, lr}
 800fe9a:	3901      	subs	r1, #1
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	b132      	cbz	r2, 800feae <strncpy+0x16>
 800fea0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fea4:	f803 4b01 	strb.w	r4, [r3], #1
 800fea8:	3a01      	subs	r2, #1
 800feaa:	2c00      	cmp	r4, #0
 800feac:	d1f7      	bne.n	800fe9e <strncpy+0x6>
 800feae:	441a      	add	r2, r3
 800feb0:	2100      	movs	r1, #0
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d100      	bne.n	800feb8 <strncpy+0x20>
 800feb6:	bd10      	pop	{r4, pc}
 800feb8:	f803 1b01 	strb.w	r1, [r3], #1
 800febc:	e7f9      	b.n	800feb2 <strncpy+0x1a>

0800febe <strstr>:
 800febe:	780a      	ldrb	r2, [r1, #0]
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	b96a      	cbnz	r2, 800fee0 <strstr+0x22>
 800fec4:	bd70      	pop	{r4, r5, r6, pc}
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d109      	bne.n	800fede <strstr+0x20>
 800feca:	460c      	mov	r4, r1
 800fecc:	4605      	mov	r5, r0
 800fece:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d0f6      	beq.n	800fec4 <strstr+0x6>
 800fed6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800feda:	429e      	cmp	r6, r3
 800fedc:	d0f7      	beq.n	800fece <strstr+0x10>
 800fede:	3001      	adds	r0, #1
 800fee0:	7803      	ldrb	r3, [r0, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d1ef      	bne.n	800fec6 <strstr+0x8>
 800fee6:	4618      	mov	r0, r3
 800fee8:	e7ec      	b.n	800fec4 <strstr+0x6>
	...

0800feec <_sbrk_r>:
 800feec:	b538      	push	{r3, r4, r5, lr}
 800feee:	4d06      	ldr	r5, [pc, #24]	@ (800ff08 <_sbrk_r+0x1c>)
 800fef0:	2300      	movs	r3, #0
 800fef2:	4604      	mov	r4, r0
 800fef4:	4608      	mov	r0, r1
 800fef6:	602b      	str	r3, [r5, #0]
 800fef8:	f7f1 feb6 	bl	8001c68 <_sbrk>
 800fefc:	1c43      	adds	r3, r0, #1
 800fefe:	d102      	bne.n	800ff06 <_sbrk_r+0x1a>
 800ff00:	682b      	ldr	r3, [r5, #0]
 800ff02:	b103      	cbz	r3, 800ff06 <_sbrk_r+0x1a>
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	200025c8 	.word	0x200025c8

0800ff0c <__errno>:
 800ff0c:	4b01      	ldr	r3, [pc, #4]	@ (800ff14 <__errno+0x8>)
 800ff0e:	6818      	ldr	r0, [r3, #0]
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop
 800ff14:	20000068 	.word	0x20000068

0800ff18 <__libc_init_array>:
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	4d0d      	ldr	r5, [pc, #52]	@ (800ff50 <__libc_init_array+0x38>)
 800ff1c:	4c0d      	ldr	r4, [pc, #52]	@ (800ff54 <__libc_init_array+0x3c>)
 800ff1e:	1b64      	subs	r4, r4, r5
 800ff20:	10a4      	asrs	r4, r4, #2
 800ff22:	2600      	movs	r6, #0
 800ff24:	42a6      	cmp	r6, r4
 800ff26:	d109      	bne.n	800ff3c <__libc_init_array+0x24>
 800ff28:	4d0b      	ldr	r5, [pc, #44]	@ (800ff58 <__libc_init_array+0x40>)
 800ff2a:	4c0c      	ldr	r4, [pc, #48]	@ (800ff5c <__libc_init_array+0x44>)
 800ff2c:	f000 f872 	bl	8010014 <_init>
 800ff30:	1b64      	subs	r4, r4, r5
 800ff32:	10a4      	asrs	r4, r4, #2
 800ff34:	2600      	movs	r6, #0
 800ff36:	42a6      	cmp	r6, r4
 800ff38:	d105      	bne.n	800ff46 <__libc_init_array+0x2e>
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff40:	4798      	blx	r3
 800ff42:	3601      	adds	r6, #1
 800ff44:	e7ee      	b.n	800ff24 <__libc_init_array+0xc>
 800ff46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff4a:	4798      	blx	r3
 800ff4c:	3601      	adds	r6, #1
 800ff4e:	e7f2      	b.n	800ff36 <__libc_init_array+0x1e>
 800ff50:	0801055c 	.word	0x0801055c
 800ff54:	0801055c 	.word	0x0801055c
 800ff58:	0801055c 	.word	0x0801055c
 800ff5c:	08010560 	.word	0x08010560

0800ff60 <__retarget_lock_acquire_recursive>:
 800ff60:	4770      	bx	lr

0800ff62 <__retarget_lock_release_recursive>:
 800ff62:	4770      	bx	lr

0800ff64 <memcpy>:
 800ff64:	440a      	add	r2, r1
 800ff66:	4291      	cmp	r1, r2
 800ff68:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff6c:	d100      	bne.n	800ff70 <memcpy+0xc>
 800ff6e:	4770      	bx	lr
 800ff70:	b510      	push	{r4, lr}
 800ff72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff7a:	4291      	cmp	r1, r2
 800ff7c:	d1f9      	bne.n	800ff72 <memcpy+0xe>
 800ff7e:	bd10      	pop	{r4, pc}

0800ff80 <_free_r>:
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	4605      	mov	r5, r0
 800ff84:	2900      	cmp	r1, #0
 800ff86:	d041      	beq.n	801000c <_free_r+0x8c>
 800ff88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff8c:	1f0c      	subs	r4, r1, #4
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	bfb8      	it	lt
 800ff92:	18e4      	addlt	r4, r4, r3
 800ff94:	f7ff ff6c 	bl	800fe70 <__malloc_lock>
 800ff98:	4a1d      	ldr	r2, [pc, #116]	@ (8010010 <_free_r+0x90>)
 800ff9a:	6813      	ldr	r3, [r2, #0]
 800ff9c:	b933      	cbnz	r3, 800ffac <_free_r+0x2c>
 800ff9e:	6063      	str	r3, [r4, #4]
 800ffa0:	6014      	str	r4, [r2, #0]
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffa8:	f7ff bf68 	b.w	800fe7c <__malloc_unlock>
 800ffac:	42a3      	cmp	r3, r4
 800ffae:	d908      	bls.n	800ffc2 <_free_r+0x42>
 800ffb0:	6820      	ldr	r0, [r4, #0]
 800ffb2:	1821      	adds	r1, r4, r0
 800ffb4:	428b      	cmp	r3, r1
 800ffb6:	bf01      	itttt	eq
 800ffb8:	6819      	ldreq	r1, [r3, #0]
 800ffba:	685b      	ldreq	r3, [r3, #4]
 800ffbc:	1809      	addeq	r1, r1, r0
 800ffbe:	6021      	streq	r1, [r4, #0]
 800ffc0:	e7ed      	b.n	800ff9e <_free_r+0x1e>
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	b10b      	cbz	r3, 800ffcc <_free_r+0x4c>
 800ffc8:	42a3      	cmp	r3, r4
 800ffca:	d9fa      	bls.n	800ffc2 <_free_r+0x42>
 800ffcc:	6811      	ldr	r1, [r2, #0]
 800ffce:	1850      	adds	r0, r2, r1
 800ffd0:	42a0      	cmp	r0, r4
 800ffd2:	d10b      	bne.n	800ffec <_free_r+0x6c>
 800ffd4:	6820      	ldr	r0, [r4, #0]
 800ffd6:	4401      	add	r1, r0
 800ffd8:	1850      	adds	r0, r2, r1
 800ffda:	4283      	cmp	r3, r0
 800ffdc:	6011      	str	r1, [r2, #0]
 800ffde:	d1e0      	bne.n	800ffa2 <_free_r+0x22>
 800ffe0:	6818      	ldr	r0, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	6053      	str	r3, [r2, #4]
 800ffe6:	4408      	add	r0, r1
 800ffe8:	6010      	str	r0, [r2, #0]
 800ffea:	e7da      	b.n	800ffa2 <_free_r+0x22>
 800ffec:	d902      	bls.n	800fff4 <_free_r+0x74>
 800ffee:	230c      	movs	r3, #12
 800fff0:	602b      	str	r3, [r5, #0]
 800fff2:	e7d6      	b.n	800ffa2 <_free_r+0x22>
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	1821      	adds	r1, r4, r0
 800fff8:	428b      	cmp	r3, r1
 800fffa:	bf04      	itt	eq
 800fffc:	6819      	ldreq	r1, [r3, #0]
 800fffe:	685b      	ldreq	r3, [r3, #4]
 8010000:	6063      	str	r3, [r4, #4]
 8010002:	bf04      	itt	eq
 8010004:	1809      	addeq	r1, r1, r0
 8010006:	6021      	streq	r1, [r4, #0]
 8010008:	6054      	str	r4, [r2, #4]
 801000a:	e7ca      	b.n	800ffa2 <_free_r+0x22>
 801000c:	bd38      	pop	{r3, r4, r5, pc}
 801000e:	bf00      	nop
 8010010:	2000248c 	.word	0x2000248c

08010014 <_init>:
 8010014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010016:	bf00      	nop
 8010018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801001a:	bc08      	pop	{r3}
 801001c:	469e      	mov	lr, r3
 801001e:	4770      	bx	lr

08010020 <_fini>:
 8010020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010022:	bf00      	nop
 8010024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010026:	bc08      	pop	{r3}
 8010028:	469e      	mov	lr, r3
 801002a:	4770      	bx	lr
