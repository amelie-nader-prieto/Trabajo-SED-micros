
TUT_F4_AUDIO_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800f580  0800f580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800faa8  0800faa8  000110b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800faa8  0800faa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fab0  0800fab0  000110b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fab0  0800fab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fab4  0800fab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800fab8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024cc  200000b8  0800fb70  000110b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002584  0800fb70  00011584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000110b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcff  00000000  00000000  000110e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bb  00000000  00000000  0002ede7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  000343a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001057  00000000  00000000  00035940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c55e  00000000  00000000  00036997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237cd  00000000  00000000  00052ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eed0  00000000  00000000  000766c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a2c  00000000  00000000  001055d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010b004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b8 	.word	0x200000b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f568 	.word	0x0800f568

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000bc 	.word	0x200000bc
 80001d4:	0800f568 	.word	0x0800f568

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	603a      	str	r2, [r7, #0]
 80004d2:	80fb      	strh	r3, [r7, #6]
 80004d4:	460b      	mov	r3, r1
 80004d6:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004dc:	2200      	movs	r2, #0
 80004de:	6839      	ldr	r1, [r7, #0]
 80004e0:	481c      	ldr	r0, [pc, #112]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004e2:	f000 f8f9 	bl	80006d8 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <AUDIO_OUT_Init+0x90>)
 80004ea:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004ec:	4819      	ldr	r0, [pc, #100]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f005 ff57 	bl	80063a0 <HAL_I2S_GetState>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4816      	ldr	r0, [pc, #88]	@ (8000554 <AUDIO_OUT_Init+0x8c>)
 80004fc:	f000 f94a 	bl	8000794 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000500:	6838      	ldr	r0, [r7, #0]
 8000502:	f000 fa0f 	bl	8000924 <I2S3_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 800050c:	2301      	movs	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10e      	bne.n	8000534 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000516:	4b11      	ldr	r3, [pc, #68]	@ (800055c <AUDIO_OUT_Init+0x94>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2094      	movs	r0, #148	@ 0x94
 800051c:	4798      	blx	r3
 800051e:	4603      	mov	r3, r0
 8000520:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000524:	2be0      	cmp	r3, #224	@ 0xe0
 8000526:	d103      	bne.n	8000530 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000528:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <AUDIO_OUT_Init+0x98>)
 800052a:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <AUDIO_OUT_Init+0x94>)
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	e001      	b.n	8000534 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d107      	bne.n	800054a <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <AUDIO_OUT_Init+0x98>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681c      	ldr	r4, [r3, #0]
 8000540:	797a      	ldrb	r2, [r7, #5]
 8000542:	88f9      	ldrh	r1, [r7, #6]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	2094      	movs	r0, #148	@ 0x94
 8000548:	47a0      	blx	r4
  }
  
  return ret;
 800054a:	7bfb      	ldrb	r3, [r7, #15]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	200000d8 	.word	0x200000d8
 8000558:	40003c00 	.word	0x40003c00
 800055c:	20000004 	.word	0x20000004
 8000560:	200000d4 	.word	0x200000d4

08000564 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <AUDIO_OUT_Play+0x4c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	b292      	uxth	r2, r2
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	2094      	movs	r0, #148	@ 0x94
 800057c:	4798      	blx	r3
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000584:	2301      	movs	r3, #1
 8000586:	e00f      	b.n	80005a8 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800058e:	d203      	bcs.n	8000598 <AUDIO_OUT_Play+0x34>
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	085b      	lsrs	r3, r3, #1
 8000594:	b29b      	uxth	r3, r3
 8000596:	e001      	b.n	800059c <AUDIO_OUT_Play+0x38>
 8000598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059c:	461a      	mov	r2, r3
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <AUDIO_OUT_Play+0x50>)
 80005a2:	f005 fb7b 	bl	8005c9c <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005a6:	2300      	movs	r3, #0
  }
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000d4 	.word	0x200000d4
 80005b4:	200000d8 	.word	0x200000d8

080005b8 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <AUDIO_OUT_Pause+0x24>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	691b      	ldr	r3, [r3, #16]
 80005c2:	2094      	movs	r0, #148	@ 0x94
 80005c4:	4798      	blx	r3
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e003      	b.n	80005d8 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <AUDIO_OUT_Pause+0x28>)
 80005d2:	f005 fc0b 	bl	8005dec <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005d6:	2300      	movs	r3, #0
  }
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000d4 	.word	0x200000d4
 80005e0:	200000d8 	.word	0x200000d8

080005e4 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <AUDIO_OUT_Resume+0x24>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	2094      	movs	r0, #148	@ 0x94
 80005f0:	4798      	blx	r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e003      	b.n	8000604 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <AUDIO_OUT_Resume+0x28>)
 80005fe:	f005 fc57 	bl	8005eb0 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000602:	2300      	movs	r3, #0
  }
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000d4 	.word	0x200000d4
 800060c:	200000d8 	.word	0x200000d8

08000610 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000618:	480e      	ldr	r0, [pc, #56]	@ (8000654 <AUDIO_OUT_Stop+0x44>)
 800061a:	f005 fcdd 	bl	8005fd8 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <AUDIO_OUT_Stop+0x48>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	2094      	movs	r0, #148	@ 0x94
 8000628:	4798      	blx	r3
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e00b      	b.n	800064c <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d107      	bne.n	800064a <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f001 fcee 	bl	800201c <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4805      	ldr	r0, [pc, #20]	@ (800065c <AUDIO_OUT_Stop+0x4c>)
 8000646:	f002 fcc5 	bl	8002fd4 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800064a:	2300      	movs	r3, #0
  }
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000d8 	.word	0x200000d8
 8000658:	200000d4 	.word	0x200000d4
 800065c:	40020c00 	.word	0x40020c00

08000660 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <AUDIO_OUT_SetVolume+0x2c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	4611      	mov	r1, r2
 8000674:	2094      	movs	r0, #148	@ 0x94
 8000676:	4798      	blx	r3
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000682:	2300      	movs	r3, #0
  }
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000d4 	.word	0x200000d4

08000690 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <HAL_I2S_TxCpltCallback+0x20>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006a2:	f001 fbf7 	bl	8001e94 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40003c00 	.word	0x40003c00

080006b4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006c6:	f001 fbf9 	bl	8001ebc <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40003c00 	.word	0x40003c00

080006d8 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006ea:	23ff      	movs	r3, #255	@ 0xff
 80006ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  
  for(index = 0; index < 8; index++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006f6:	e010      	b.n	800071a <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006fc:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <AUDIO_OUT_ClockConfig+0xb0>)
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	429a      	cmp	r2, r3
 8000706:	d103      	bne.n	8000710 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800070c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(index = 0; index < 8; index++)
 8000710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000714:	3301      	adds	r3, #1
 8000716:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800071a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800071e:	2b07      	cmp	r3, #7
 8000720:	d9ea      	bls.n	80006f8 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f006 ff82 	bl	8007630 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800072c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	2b00      	cmp	r3, #0
 8000736:	d115      	bne.n	8000764 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000738:	2301      	movs	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000740:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000744:	4a11      	ldr	r2, [pc, #68]	@ (800078c <AUDIO_OUT_ClockConfig+0xb4>)
 8000746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074a:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000750:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <AUDIO_OUT_ClockConfig+0xb8>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4618      	mov	r0, r3
 800075e:	f006 fe77 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000762:	e00d      	b.n	8000780 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800076c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000770:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f006 fe68 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
}
 8000780:	bf00      	nop
 8000782:	3730      	adds	r7, #48	@ 0x30
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	0800f5d4 	.word	0x0800f5d4
 800078c:	0800f5f4 	.word	0x0800f5f4
 8000790:	0800f614 	.word	0x0800f614

08000794 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4b56      	ldr	r3, [pc, #344]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	4a55      	ldr	r2, [pc, #340]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ae:	4b53      	ldr	r3, [pc, #332]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b4f      	ldr	r3, [pc, #316]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a4e      	ldr	r2, [pc, #312]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b4c      	ldr	r3, [pc, #304]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b48      	ldr	r3, [pc, #288]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a47      	ldr	r2, [pc, #284]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b45      	ldr	r3, [pc, #276]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8000800:	2302      	movs	r3, #2
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000804:	2306      	movs	r3, #6
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	483c      	ldr	r0, [pc, #240]	@ (8000900 <AUDIO_OUT_MspInit+0x16c>)
 8000810:	f002 f978 	bl	8002b04 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000814:	2310      	movs	r3, #16
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4839      	ldr	r0, [pc, #228]	@ (8000904 <AUDIO_OUT_MspInit+0x170>)
 8000820:	f002 f970 	bl	8002b04 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b34      	ldr	r3, [pc, #208]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	4a33      	ldr	r2, [pc, #204]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6313      	str	r3, [r2, #48]	@ 0x30
 8000834:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	482d      	ldr	r0, [pc, #180]	@ (8000900 <AUDIO_OUT_MspInit+0x16c>)
 800084c:	f002 f95a 	bl	8002b04 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000858:	4a28      	ldr	r2, [pc, #160]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800085e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000860:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a25      	ldr	r2, [pc, #148]	@ (8000908 <AUDIO_OUT_MspInit+0x174>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d136      	bne.n	80008e4 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800087c:	4b23      	ldr	r3, [pc, #140]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 800087e:	2240      	movs	r2, #64	@ 0x40
 8000880:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000882:	4b22      	ldr	r3, [pc, #136]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 800088a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800088e:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 8000892:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000896:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 800089a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800089e:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008ac:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008c8:	4a11      	ldr	r2, [pc, #68]	@ (8000910 <AUDIO_OUT_MspInit+0x17c>)
 80008ca:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008da:	f001 fd83 	bl	80023e4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <AUDIO_OUT_MspInit+0x178>)
 80008e0:	f001 fcd2 	bl	8002288 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	210e      	movs	r1, #14
 80008e8:	202f      	movs	r0, #47	@ 0x2f
 80008ea:	f001 fc96 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008ee:	202f      	movs	r0, #47	@ 0x2f
 80008f0:	f001 fcaf 	bl	8002252 <HAL_NVIC_EnableIRQ>
}
 80008f4:	bf00      	nop
 80008f6:	3730      	adds	r7, #48	@ 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020800 	.word	0x40020800
 8000904:	40020000 	.word	0x40020000
 8000908:	40003c00 	.word	0x40003c00
 800090c:	20000120 	.word	0x20000120
 8000910:	400260b8 	.word	0x400260b8

08000914 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <I2S3_Init+0x68>)
 800092e:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <I2S3_Init+0x6c>)
 8000930:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <I2S3_Init+0x68>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <I2S3_Init+0x68>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000940:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <I2S3_Init+0x68>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000948:	4b10      	ldr	r3, [pc, #64]	@ (800098c <I2S3_Init+0x68>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <I2S3_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000954:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <I2S3_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <I2S3_Init+0x68>)
 800095c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000960:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <I2S3_Init+0x68>)
 8000964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000968:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <I2S3_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000970:	4806      	ldr	r0, [pc, #24]	@ (800098c <I2S3_Init+0x68>)
 8000972:	f005 f853 	bl	8005a1c <HAL_I2S_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000980:	2300      	movs	r3, #0
  }
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000d8 	.word	0x200000d8
 8000990:	40003c00 	.word	0x40003c00

08000994 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_I2S_ErrorCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009a6:	f7ff ffb5 	bl	8000914 <AUDIO_OUT_Error_CallBack>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40003c00 	.word	0x40003c00

080009b8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009bc:	4814      	ldr	r0, [pc, #80]	@ (8000a10 <I2Cx_Init+0x58>)
 80009be:	f004 fcc3 	bl	8005348 <HAL_I2C_GetState>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d121      	bne.n	8000a0c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <I2Cx_Init+0x58>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <I2Cx_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <I2Cx_Init+0x58>)
 80009d0:	2243      	movs	r2, #67	@ 0x43
 80009d2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <I2Cx_Init+0x58>)
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <I2Cx_Init+0x60>)
 80009d8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <I2Cx_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <I2Cx_Init+0x58>)
 80009e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009e6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <I2Cx_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <I2Cx_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <I2Cx_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <I2Cx_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <I2Cx_Init+0x58>)
 8000a02:	f000 f86b 	bl	8000adc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a06:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <I2Cx_Init+0x58>)
 8000a08:	f004 f80a 	bl	8004a20 <HAL_I2C_Init>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000180 	.word	0x20000180
 8000a14:	40005400 	.word	0x40005400
 8000a18:	000186a0 	.word	0x000186a0

08000a1c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af04      	add	r7, sp, #16
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	717b      	strb	r3, [r7, #5]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <I2Cx_WriteData+0x48>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	88f9      	ldrh	r1, [r7, #6]
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <I2Cx_WriteData+0x4c>)
 8000a4a:	f004 f95d 	bl	8004d08 <HAL_I2C_Mem_Write>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a58:	f000 f834 	bl	8000ac4 <I2Cx_Error>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000180 	.word	0x20000180

08000a6c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a84:	797b      	ldrb	r3, [r7, #5]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <I2Cx_ReadData+0x50>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	88f9      	ldrh	r1, [r7, #6]
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2301      	movs	r3, #1
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	f107 030e 	add.w	r3, r7, #14
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <I2Cx_ReadData+0x54>)
 8000a9e:	f004 fa2d 	bl	8004efc <HAL_I2C_Mem_Read>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000aac:	f000 f80a 	bl	8000ac4 <I2Cx_Error>
  }
  return value;
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000180 	.word	0x20000180

08000ac4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <I2Cx_Error+0x14>)
 8000aca:	f004 f8ed 	bl	8004ca8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ace:	f7ff ff73 	bl	80009b8 <I2Cx_Init>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000180 	.word	0x20000180

08000adc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	4a24      	ldr	r2, [pc, #144]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b08:	4a1d      	ldr	r2, [pc, #116]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b1c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <I2Cx_MspInit+0xa8>)
 8000b3a:	f001 ffe3 	bl	8002b04 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b48:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <I2Cx_MspInit+0xa4>)
 8000b50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b54:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	201f      	movs	r0, #31
 8000b5c:	f001 fb5d 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b60:	201f      	movs	r0, #31
 8000b62:	f001 fb76 	bl	8002252 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	2020      	movs	r0, #32
 8000b6c:	f001 fb55 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b70:	2020      	movs	r0, #32
 8000b72:	f001 fb6e 	bl	8002252 <HAL_NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400

08000b88 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <AUDIO_IO_Init+0x68>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a16      	ldr	r2, [pc, #88]	@ (8000bf0 <AUDIO_IO_Init+0x68>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <AUDIO_IO_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000baa:	2310      	movs	r3, #16
 8000bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <AUDIO_IO_Init+0x6c>)
 8000bc0:	f001 ffa0 	bl	8002b04 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bc4:	f7ff fef8 	bl	80009b8 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <AUDIO_IO_Init+0x6c>)
 8000bce:	f002 fa01 	bl	8002fd4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	f001 fa22 	bl	800201c <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <AUDIO_IO_Init+0x6c>)
 8000bde:	f002 f9f9 	bl	8002fd4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000be2:	2005      	movs	r0, #5
 8000be4:	f001 fa1a 	bl	800201c <HAL_Delay>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	460b      	mov	r3, r1
 8000c12:	71bb      	strb	r3, [r7, #6]
 8000c14:	4613      	mov	r3, r2
 8000c16:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	797a      	ldrb	r2, [r7, #5]
 8000c1e:	79b9      	ldrb	r1, [r7, #6]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fefb 	bl	8000a1c <I2Cx_WriteData>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	460a      	mov	r2, r1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	79ba      	ldrb	r2, [r7, #6]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff10 	bl	8000a6c <I2Cx_ReadData>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0d6      	sub	sp, #344	@ 0x158
 8000c5c:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4946      	ldr	r1, [pc, #280]	@ (8000d80 <AUDIO_StorageParse+0x128>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00d fdc3 	bl	800e7f4 <f_opendir>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FileList.ptr = 0;
 8000c74:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000c7c:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d16c      	bne.n	8000d5e <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8000c84:	e067      	b.n	8000d56 <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 8000c86:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f00d fe49 	bl	800e926 <f_readdir>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c9a:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d15d      	bne.n	8000d5e <AUDIO_StorageParse+0x106>
 8000ca2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ca6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000caa:	7d9b      	ldrb	r3, [r3, #22]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d056      	beq.n	8000d5e <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cb0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cb4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cb8:	7d9b      	ldrb	r3, [r3, #22]
 8000cba:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cbc:	d04a      	beq.n	8000d54 <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 8000cbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cc2:	3316      	adds	r3, #22
 8000cc4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000cca:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000cce:	2b17      	cmp	r3, #23
 8000cd0:	d841      	bhi.n	8000d56 <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cd2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cda:	7a1b      	ldrb	r3, [r3, #8]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d138      	bne.n	8000d56 <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000ce4:	4928      	ldr	r1, [pc, #160]	@ (8000d88 <AUDIO_StorageParse+0x130>)
 8000ce6:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cea:	f00e fb92 	bl	800f412 <strstr>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d107      	bne.n	8000d04 <AUDIO_StorageParse+0xac>
 8000cf4:	4925      	ldr	r1, [pc, #148]	@ (8000d8c <AUDIO_StorageParse+0x134>)
 8000cf6:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cfa:	f00e fb8a 	bl	800f412 <strstr>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d028      	beq.n	8000d56 <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d04:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d06:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	2228      	movs	r2, #40	@ 0x28
 8000d1e:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00e fb62 	bl	800f3ec <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d2a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4914      	ldr	r1, [pc, #80]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d44:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d4e:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000d52:	e000      	b.n	8000d56 <AUDIO_StorageParse+0xfe>
        continue;
 8000d54:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <AUDIO_StorageParse+0x138>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d093      	beq.n	8000c86 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <AUDIO_StorageParse+0x12c>)
 8000d60:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000d64:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <AUDIO_StorageParse+0x13c>)
 8000d66:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00d fdb5 	bl	800e8da <f_closedir>
  return res;
 8000d70:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20001930 	.word	0x20001930
 8000d84:	200012ec 	.word	0x200012ec
 8000d88:	0800f580 	.word	0x0800f580
 8000d8c:	0800f584 	.word	0x0800f584
 8000d90:	20002174 	.word	0x20002174
 8000d94:	200001d6 	.word	0x200001d6

08000d98 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000d9c:	f7ff ff5c 	bl	8000c58 <AUDIO_StorageParse>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <AUDIO_GetWavObjectNumber+0x14>
 8000da6:	4b02      	ldr	r3, [pc, #8]	@ (8000db0 <AUDIO_GetWavObjectNumber+0x18>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	e7ff      	b.n	8000dac <AUDIO_GetWavObjectNumber+0x14>
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200001d6 	.word	0x200001d6

08000db4 <Mount_USB>:

void Mount_USB (void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	4905      	ldr	r1, [pc, #20]	@ (8000dd0 <Mount_USB+0x1c>)
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <Mount_USB+0x20>)
 8000dbe:	f00c ff29 	bl	800dc14 <f_mount>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <Mount_USB+0x24>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20001930 	.word	0x20001930
 8000dd4:	20001934 	.word	0x20001934
 8000dd8:	200001d4 	.word	0x200001d4

08000ddc <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	4603      	mov	r3, r0
 8000de6:	81fb      	strh	r3, [r7, #14]
 8000de8:	460b      	mov	r3, r1
 8000dea:	81bb      	strh	r3, [r7, #12]
 8000dec:	4613      	mov	r3, r2
 8000dee:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000df4:	f7ff fec8 	bl	8000b88 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000df8:	89fb      	ldrh	r3, [r7, #14]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fb01 	bl	8001408 <CODEC_IO_Write>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e10:	89bb      	ldrh	r3, [r7, #12]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d81b      	bhi.n	8000e50 <cs43l22_Init+0x74>
 8000e18:	a201      	add	r2, pc, #4	@ (adr r2, 8000e20 <cs43l22_Init+0x44>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e39 	.word	0x08000e39
 8000e28:	08000e41 	.word	0x08000e41
 8000e2c:	08000e49 	.word	0x08000e49
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e30:	4b5b      	ldr	r3, [pc, #364]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e32:	22fa      	movs	r2, #250	@ 0xfa
 8000e34:	701a      	strb	r2, [r3, #0]
    break;
 8000e36:	e00f      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e38:	4b59      	ldr	r3, [pc, #356]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e3a:	22af      	movs	r2, #175	@ 0xaf
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e00b      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e40:	4b57      	ldr	r3, [pc, #348]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e42:	22aa      	movs	r2, #170	@ 0xaa
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e007      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e48:	4b55      	ldr	r3, [pc, #340]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e4e:	e003      	b.n	8000e58 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e50:	4b53      	ldr	r3, [pc, #332]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    break;    
 8000e56:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4a50      	ldr	r2, [pc, #320]	@ (8000fa0 <cs43l22_Init+0x1c4>)
 8000e5e:	7812      	ldrb	r2, [r2, #0]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	2104      	movs	r1, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 facf 	bl	8001408 <CODEC_IO_Write>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2281      	movs	r2, #129	@ 0x81
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fac3 	bl	8001408 <CODEC_IO_Write>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2204      	movs	r2, #4
 8000e92:	2106      	movs	r1, #6
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 fab7 	bl	8001408 <CODEC_IO_Write>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000ea4:	7afa      	ldrb	r2, [r7, #11]
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f964 	bl	8001178 <cs43l22_SetVolume>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000eb8:	89bb      	ldrh	r3, [r7, #12]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d023      	beq.n	8000f06 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fa9e 	bl	8001408 <CODEC_IO_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	2124      	movs	r1, #36	@ 0x24
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fa92 	bl	8001408 <CODEC_IO_Write>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2125      	movs	r1, #37	@ 0x25
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fa86 	bl	8001408 <CODEC_IO_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	4413      	add	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	210a      	movs	r1, #10
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fa7a 	bl	8001408 <CODEC_IO_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2204      	movs	r2, #4
 8000f24:	210e      	movs	r1, #14
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa6e 	bl	8001408 <CODEC_IO_Write>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4413      	add	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2127      	movs	r1, #39	@ 0x27
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fa62 	bl	8001408 <CODEC_IO_Write>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	220f      	movs	r2, #15
 8000f54:	211f      	movs	r1, #31
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa56 	bl	8001408 <CODEC_IO_Write>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	211a      	movs	r1, #26
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fa4a 	bl	8001408 <CODEC_IO_Write>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	220a      	movs	r2, #10
 8000f84:	211b      	movs	r1, #27
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fa3e 	bl	8001408 <CODEC_IO_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f96:	697b      	ldr	r3, [r7, #20]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001d8 	.word	0x200001d8

08000fa4 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fa8:	f7ff fe26 	bl	8000bf8 <AUDIO_IO_DeInit>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fba:	f7ff fde5 	bl	8000b88 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe32 	bl	8000c2e <AUDIO_IO_Read>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f023 0307 	bic.w	r3, r3, #7
 8000fd4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <cs43l22_Play+0x70>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d123      	bne.n	8001044 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2206      	movs	r2, #6
 8001002:	210e      	movs	r1, #14
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f9ff 	bl	8001408 <CODEC_IO_Write>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f919 	bl	8001250 <cs43l22_SetMute>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	229e      	movs	r2, #158	@ 0x9e
 800102c:	2102      	movs	r1, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f9ea 	bl	8001408 <CODEC_IO_Write>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <cs43l22_Play+0x70>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001044:	68fb      	ldr	r3, [r7, #12]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000034 	.word	0x20000034

08001054 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f8f2 	bl	8001250 <cs43l22_SetMute>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f9c3 	bl	8001408 <CODEC_IO_Write>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f8ce 	bl	8001250 <cs43l22_SetMute>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	e002      	b.n	80010c8 <cs43l22_Resume+0x30>
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80010cc:	d9f9      	bls.n	80010c2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <cs43l22_Resume+0x74>)
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	2104      	movs	r1, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f994 	bl	8001408 <CODEC_IO_Write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	229e      	movs	r2, #158	@ 0x9e
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f988 	bl	8001408 <CODEC_IO_Write>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001d8 	.word	0x200001d8

08001110 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f893 	bl	8001250 <cs43l22_SetMute>
 800112a:	4602      	mov	r2, r0
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2204      	movs	r2, #4
 8001138:	210e      	movs	r1, #14
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f964 	bl	8001408 <CODEC_IO_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	229f      	movs	r2, #159	@ 0x9f
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f958 	bl	8001408 <CODEC_IO_Write>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <cs43l22_Stop+0x64>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001168:	68fb      	ldr	r3, [r7, #12]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000034 	.word	0x20000034

08001178 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	80fb      	strh	r3, [r7, #6]
 8001184:	4613      	mov	r3, r2
 8001186:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d80b      	bhi.n	80011aa <cs43l22_SetVolume+0x32>
 8001192:	797a      	ldrb	r2, [r7, #5]
 8001194:	4613      	mov	r3, r2
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	4a25      	ldr	r2, [pc, #148]	@ (8001230 <cs43l22_SetVolume+0xb8>)
 800119c:	fb82 1203 	smull	r1, r2, r2, r3
 80011a0:	1152      	asrs	r2, r2, #5
 80011a2:	17db      	asrs	r3, r3, #31
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	e000      	b.n	80011ac <cs43l22_SetVolume+0x34>
 80011aa:	23ff      	movs	r3, #255	@ 0xff
 80011ac:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	2be6      	cmp	r3, #230	@ 0xe6
 80011b2:	d91c      	bls.n	80011ee <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	b2d8      	uxtb	r0, r3
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	3319      	adds	r3, #25
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	2120      	movs	r1, #32
 80011c2:	f000 f921 	bl	8001408 <CODEC_IO_Write>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	b2d8      	uxtb	r0, r3
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	3319      	adds	r3, #25
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	2121      	movs	r1, #33	@ 0x21
 80011de:	f000 f913 	bl	8001408 <CODEC_IO_Write>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e01b      	b.n	8001226 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	b2d8      	uxtb	r0, r3
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	3319      	adds	r3, #25
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	2120      	movs	r1, #32
 80011fc:	f000 f904 	bl	8001408 <CODEC_IO_Write>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	b2d8      	uxtb	r0, r3
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	3319      	adds	r3, #25
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	2121      	movs	r1, #33	@ 0x21
 8001218:	f000 f8f6 	bl	8001408 <CODEC_IO_Write>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	51eb851f 	.word	0x51eb851f

08001234 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d124      	bne.n	80012b0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	22ff      	movs	r2, #255	@ 0xff
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f8ca 	bl	8001408 <CODEC_IO_Write>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2201      	movs	r2, #1
 8001284:	2122      	movs	r1, #34	@ 0x22
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f8be 	bl	8001408 <CODEC_IO_Write>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2201      	movs	r2, #1
 800129c:	2123      	movs	r1, #35	@ 0x23
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f8b2 	bl	8001408 <CODEC_IO_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e025      	b.n	80012fc <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	2122      	movs	r1, #34	@ 0x22
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f8a5 	bl	8001408 <CODEC_IO_Write>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	2123      	movs	r1, #35	@ 0x23
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f899 	bl	8001408 <CODEC_IO_Write>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <cs43l22_SetMute+0xb8>)
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	2104      	movs	r1, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f88b 	bl	8001408 <CODEC_IO_Write>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001d8 	.word	0x200001d8

0800130c <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	80fb      	strh	r3, [r7, #6]
 8001318:	4613      	mov	r3, r2
 800131a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	3b01      	subs	r3, #1
 8001324:	2b03      	cmp	r3, #3
 8001326:	d84b      	bhi.n	80013c0 <cs43l22_SetOutputMode+0xb4>
 8001328:	a201      	add	r2, pc, #4	@ (adr r2, 8001330 <cs43l22_SetOutputMode+0x24>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001341 	.word	0x08001341
 8001334:	08001361 	.word	0x08001361
 8001338:	08001381 	.word	0x08001381
 800133c:	080013a1 	.word	0x080013a1
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	22fa      	movs	r2, #250	@ 0xfa
 8001346:	2104      	movs	r1, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f85d 	bl	8001408 <CODEC_IO_Write>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 800135a:	22fa      	movs	r2, #250	@ 0xfa
 800135c:	701a      	strb	r2, [r3, #0]
      break;
 800135e:	e03f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	22af      	movs	r2, #175	@ 0xaf
 8001366:	2104      	movs	r1, #4
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f84d 	bl	8001408 <CODEC_IO_Write>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 800137a:	22af      	movs	r2, #175	@ 0xaf
 800137c:	701a      	strb	r2, [r3, #0]
      break;
 800137e:	e02f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	22aa      	movs	r2, #170	@ 0xaa
 8001386:	2104      	movs	r1, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f83d 	bl	8001408 <CODEC_IO_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 800139a:	22aa      	movs	r2, #170	@ 0xaa
 800139c:	701a      	strb	r2, [r3, #0]
      break;
 800139e:	e01f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2205      	movs	r2, #5
 80013a6:	2104      	movs	r1, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f82d 	bl	8001408 <CODEC_IO_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 80013ba:	2205      	movs	r2, #5
 80013bc:	701a      	strb	r2, [r3, #0]
      break;    
 80013be:	e00f      	b.n	80013e0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2205      	movs	r2, #5
 80013c6:	2104      	movs	r1, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f81d 	bl	8001408 <CODEC_IO_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <cs43l22_SetOutputMode+0xe0>)
 80013da:	2205      	movs	r2, #5
 80013dc:	701a      	strb	r2, [r3, #0]
      break;
 80013de:	bf00      	nop
  }  
  return counter;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001d8 	.word	0x200001d8

080013f0 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	460b      	mov	r3, r1
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	4613      	mov	r3, r2
 8001418:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800141e:	797a      	ldrb	r2, [r7, #5]
 8001420:	79b9      	ldrb	r1, [r7, #6]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fbee 	bl	8000c06 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_EXTI_Callback>:
extern AUDIO_PLAYBACK_StateTypeDef AudioState;

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d10d      	bne.n	8001464 <HAL_GPIO_EXTI_Callback+0x2c>
	{
//		AudioState = AUDIO_STATE_NEXT;
		if (AudioState == AUDIO_STATE_PLAY)
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d102      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x1e>
		{
			AudioState = AUDIO_STATE_PAUSE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 8001452:	220a      	movs	r2, #10
 8001454:	701a      	strb	r2, [r3, #0]
		}

		if (AudioState == AUDIO_STATE_WAIT)
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			AudioState = AUDIO_STATE_RESUME;
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x38>)
 8001460:	220b      	movs	r2, #11
 8001462:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	200012e8 	.word	0x200012e8

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f000 fd5e 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f82e 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 f92c 	bl	80016dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001484:	f000 f90a 	bl	800169c <MX_DMA_Init>
  MX_I2C1_Init();
 8001488:	f000 f8ac 	bl	80015e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800148c:	f000 f8d8 	bl	8001640 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001490:	f007 f8bc 	bl	800860c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001494:	f00d fba6 	bl	800ebe4 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001498:	f00d fbca 	bl	800ec30 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (Appli_state == APPLICATION_READY)
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <main+0x5c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d1f9      	bne.n	8001498 <main+0x24>
    {
    	Mount_USB();
 80014a4:	f7ff fc86 	bl	8000db4 <Mount_USB>
    	AUDIO_PLAYER_Start(0);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 fb79 	bl	8001ba0 <AUDIO_PLAYER_Start>

    	while (!IsFinished)
 80014ae:	e009      	b.n	80014c4 <main+0x50>
    	{
    		AUDIO_PLAYER_Process(TRUE);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f000 fbd5 	bl	8001c60 <AUDIO_PLAYER_Process>

    		if (AudioState == AUDIO_STATE_STOP)
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <main+0x60>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b09      	cmp	r3, #9
 80014bc:	d102      	bne.n	80014c4 <main+0x50>
    		{
    			IsFinished = 1;
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <main+0x64>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
    	while (!IsFinished)
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <main+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f1      	beq.n	80014b0 <main+0x3c>
    MX_USB_HOST_Process();
 80014cc:	e7e4      	b.n	8001498 <main+0x24>
 80014ce:	bf00      	nop
 80014d0:	20002174 	.word	0x20002174
 80014d4:	200012e8 	.word	0x200012e8
 80014d8:	200002d8 	.word	0x200002d8

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09a      	sub	sp, #104	@ 0x68
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e6:	2230      	movs	r2, #48	@ 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00d ff76 	bl	800f3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <SystemClock_Config+0x100>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a30      	ldr	r2, [pc, #192]	@ (80015dc <SystemClock_Config+0x100>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <SystemClock_Config+0x100>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <SystemClock_Config+0x104>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <SystemClock_Config+0x104>)
 8001538:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <SystemClock_Config+0x104>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800154a:	2301      	movs	r3, #1
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001554:	2302      	movs	r3, #2
 8001556:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001558:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800155c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800155e:	2304      	movs	r3, #4
 8001560:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001562:	23c0      	movs	r3, #192	@ 0xc0
 8001564:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001566:	2304      	movs	r3, #4
 8001568:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800156a:	2308      	movs	r3, #8
 800156c:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001572:	4618      	mov	r0, r3
 8001574:	f005 faf2 	bl	8006b5c <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800157e:	f000 f923 	bl	80017c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2302      	movs	r3, #2
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800158e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	2103      	movs	r1, #3
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 fd4a 	bl	8007038 <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80015aa:	f000 f90d 	bl	80017c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015ae:	2301      	movs	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80015b2:	23c8      	movs	r3, #200	@ 0xc8
 80015b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80015b6:	2305      	movs	r3, #5
 80015b8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 ff44 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015ce:	f000 f8fb 	bl	80017c8 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3768      	adds	r7, #104	@ 0x68
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <MX_I2C1_Init+0x50>)
 80015ea:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <MX_I2C1_Init+0x54>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_I2C1_Init+0x50>)
 80015f0:	4a12      	ldr	r2, [pc, #72]	@ (800163c <MX_I2C1_Init+0x58>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_I2C1_Init+0x50>)
 8001602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	@ (8001634 <MX_I2C1_Init+0x50>)
 8001622:	f003 f9fd 	bl	8004a20 <HAL_I2C_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 f8cc 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200001dc 	.word	0x200001dc
 8001638:	40005400 	.word	0x40005400
 800163c:	000186a0 	.word	0x000186a0

08001640 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_I2S3_Init+0x54>)
 8001646:	4a14      	ldr	r2, [pc, #80]	@ (8001698 <MX_I2S3_Init+0x58>)
 8001648:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <MX_I2S3_Init+0x54>)
 800164c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001650:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <MX_I2S3_Init+0x54>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_I2S3_Init+0x54>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <MX_I2S3_Init+0x54>)
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_I2S3_Init+0x54>)
 8001668:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800166c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_I2S3_Init+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <MX_I2S3_Init+0x54>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_I2S3_Init+0x54>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	@ (8001694 <MX_I2S3_Init+0x54>)
 8001682:	f004 f9cb 	bl	8005a1c <HAL_I2S_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800168c:	f000 f89c 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000230 	.word	0x20000230
 8001698:	40003c00 	.word	0x40003c00

0800169c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_DMA_Init+0x3c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <MX_DMA_Init+0x3c>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_DMA_Init+0x3c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2010      	movs	r0, #16
 80016c4:	f000 fda9 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016c8:	2010      	movs	r0, #16
 80016ca:	f000 fdc2 	bl	8002252 <HAL_NVIC_EnableIRQ>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a2f      	ldr	r2, [pc, #188]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a28      	ldr	r2, [pc, #160]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a1a      	ldr	r2, [pc, #104]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <MX_GPIO_Init+0xdc>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2101      	movs	r1, #1
 8001766:	4815      	ldr	r0, [pc, #84]	@ (80017bc <MX_GPIO_Init+0xe0>)
 8001768:	f001 fc34 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800176c:	2301      	movs	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <MX_GPIO_Init+0xe0>)
 8001784:	f001 f9be 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001788:	2301      	movs	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_GPIO_Init+0xe4>)
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	480a      	ldr	r0, [pc, #40]	@ (80017c4 <MX_GPIO_Init+0xe8>)
 800179c:	f001 f9b2 	bl	8002b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2006      	movs	r0, #6
 80017a6:	f000 fd38 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017aa:	2006      	movs	r0, #6
 80017ac:	f000 fd51 	bl	8002252 <HAL_NVIC_EnableIRQ>

}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	@ 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020800 	.word	0x40020800
 80017c0:	10110000 	.word	0x10110000
 80017c4:	40020000 	.word	0x40020000

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <Error_Handler+0x8>

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_MspInit+0x4c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001820 <HAL_MspInit+0x4c>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_MspInit+0x4c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001812:	2007      	movs	r0, #7
 8001814:	f000 fcf6 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	@ (80018a8 <HAL_I2C_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12c      	bne.n	80018a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a17      	ldr	r2, [pc, #92]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001862:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001868:	2312      	movs	r3, #18
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186c:	2301      	movs	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001874:	2304      	movs	r3, #4
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <HAL_I2C_MspInit+0x8c>)
 8001880:	f001 f940 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 800188e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40005400 	.word	0x40005400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <HAL_I2C_MspDeInit+0x38>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10e      	bne.n	80018e4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_I2C_MspDeInit+0x3c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_I2C_MspDeInit+0x3c>)
 80018cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80018d2:	2140      	movs	r1, #64	@ 0x40
 80018d4:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <HAL_I2C_MspDeInit+0x40>)
 80018d6:	f001 fa99 	bl	8002e0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80018da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <HAL_I2C_MspDeInit+0x40>)
 80018e0:	f001 fa94 	bl	8002e0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40005400 	.word	0x40005400
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020400 	.word	0x40020400

080018f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a45      	ldr	r2, [pc, #276]	@ (8001a2c <HAL_I2S_MspInit+0x134>)
 8001916:	4293      	cmp	r3, r2
 8001918:	f040 8084 	bne.w	8001a24 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	4b43      	ldr	r3, [pc, #268]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	4a42      	ldr	r2, [pc, #264]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 8001926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192a:	6413      	str	r3, [r2, #64]	@ 0x40
 800192c:	4b40      	ldr	r3, [pc, #256]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4a3b      	ldr	r2, [pc, #236]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	@ 0x30
 8001948:	4b39      	ldr	r3, [pc, #228]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	4a34      	ldr	r2, [pc, #208]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6313      	str	r3, [r2, #48]	@ 0x30
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <HAL_I2S_MspInit+0x138>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001970:	2310      	movs	r3, #16
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001980:	2306      	movs	r3, #6
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	482a      	ldr	r0, [pc, #168]	@ (8001a34 <HAL_I2S_MspInit+0x13c>)
 800198c:	f001 f8ba 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001990:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019a2:	2306      	movs	r3, #6
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4822      	ldr	r0, [pc, #136]	@ (8001a38 <HAL_I2S_MspInit+0x140>)
 80019ae:	f001 f8a9 	bl	8002b04 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80019b2:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019b4:	4a22      	ldr	r2, [pc, #136]	@ (8001a40 <HAL_I2S_MspInit+0x148>)
 80019b6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80019b8:	4b20      	ldr	r3, [pc, #128]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019c0:	2240      	movs	r2, #64	@ 0x40
 80019c2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019d8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019da:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019f2:	2204      	movs	r2, #4
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 8001a0a:	f000 fc3d 	bl	8002288 <HAL_DMA_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001a14:	f7ff fed8 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 8001a1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a1e:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <HAL_I2S_MspInit+0x144>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40003c00 	.word	0x40003c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	20000278 	.word	0x20000278
 8001a40:	40026088 	.word	0x40026088

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <NMI_Handler+0x4>

08001a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 fa9f 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f001 faae 	bl	8003008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <DMA1_Stream5_IRQHandler+0x10>)
 8001ab6:	f000 fdbb 	bl	8002630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000278 	.word	0x20000278

08001ac4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <OTG_FS_IRQHandler+0x10>)
 8001aca:	f001 fd45 	bl	8003558 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20002178 	.word	0x20002178

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f00d fcaa 	bl	800f460 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20020000 	.word	0x20020000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	200002dc 	.word	0x200002dc
 8001b40:	20002588 	.word	0x20002588

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <SystemInit+0x28>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <SystemInit+0x28>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SystemInit+0x28>)
 8001b5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <PlayerInit+0x2c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4619      	mov	r1, r3
 8001b82:	2003      	movs	r0, #3
 8001b84:	f7fe fca0 	bl	80004c8 <AUDIO_OUT_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <PlayerInit+0x22>
	{
		return 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001b92:	2300      	movs	r3, #0
	}
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000003c 	.word	0x2000003c

08001ba0 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  int bytesread;

  f_close(&WavFile);
 8001baa:	4828      	ldr	r0, [pc, #160]	@ (8001c4c <AUDIO_PLAYER_Start+0xac>)
 8001bac:	f00c fbef 	bl	800e38e <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001bb0:	f7ff f8f2 	bl	8000d98 <AUDIO_GetWavObjectNumber>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d940      	bls.n	8001c42 <AUDIO_PLAYER_Start+0xa2>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a20      	ldr	r2, [pc, #128]	@ (8001c50 <AUDIO_PLAYER_Start+0xb0>)
 8001bce:	4413      	add	r3, r2
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481d      	ldr	r0, [pc, #116]	@ (8001c4c <AUDIO_PLAYER_Start+0xac>)
 8001bd8:	f00c f862 	bl	800dca0 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	222c      	movs	r2, #44	@ 0x2c
 8001be2:	491c      	ldr	r1, [pc, #112]	@ (8001c54 <AUDIO_PLAYER_Start+0xb4>)
 8001be4:	4819      	ldr	r0, [pc, #100]	@ (8001c4c <AUDIO_PLAYER_Start+0xac>)
 8001be6:	f00c fa15 	bl	800e014 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <AUDIO_PLAYER_Start+0xb4>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffbe 	bl	8001b70 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <AUDIO_PLAYER_Start+0xb8>)
 8001bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4812      	ldr	r0, [pc, #72]	@ (8001c4c <AUDIO_PLAYER_Start+0xac>)
 8001c02:	f00c fbee 	bl	800e3e2 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c0e:	4912      	ldr	r1, [pc, #72]	@ (8001c58 <AUDIO_PLAYER_Start+0xb8>)
 8001c10:	480e      	ldr	r0, [pc, #56]	@ (8001c4c <AUDIO_PLAYER_Start+0xac>)
 8001c12:	f00c f9ff 	bl	800e014 <f_read>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d112      	bne.n	8001c42 <AUDIO_PLAYER_Start+0xa2>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <AUDIO_PLAYER_Start+0xbc>)
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00c      	beq.n	8001c42 <AUDIO_PLAYER_Start+0xa2>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c2c:	480a      	ldr	r0, [pc, #40]	@ (8001c58 <AUDIO_PLAYER_Start+0xb8>)
 8001c2e:	f7fe fc99 	bl	8000564 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <AUDIO_PLAYER_Start+0xb8>)
 8001c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3c:	605a      	str	r2, [r3, #4]
          return AUDIO_ERROR_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <AUDIO_PLAYER_Start+0xa4>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200016f4 	.word	0x200016f4
 8001c50:	200012ec 	.word	0x200012ec
 8001c54:	200016c8 	.word	0x200016c8
 8001c58:	200002e0 	.word	0x200002e0
 8001c5c:	200012e8 	.word	0x200012e8

08001c60 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001c6e:	4b82      	ldr	r3, [pc, #520]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3b03      	subs	r3, #3
 8001c74:	2b0a      	cmp	r3, #10
 8001c76:	f200 80f6 	bhi.w	8001e66 <AUDIO_PLAYER_Process+0x206>
 8001c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c80 <AUDIO_PLAYER_Process+0x20>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001cad 	.word	0x08001cad
 8001c84:	08001e67 	.word	0x08001e67
 8001c88:	08001d73 	.word	0x08001d73
 8001c8c:	08001dc1 	.word	0x08001dc1
 8001c90:	08001e67 	.word	0x08001e67
 8001c94:	08001e67 	.word	0x08001e67
 8001c98:	08001d61 	.word	0x08001d61
 8001c9c:	08001e03 	.word	0x08001e03
 8001ca0:	08001e0f 	.word	0x08001e0f
 8001ca4:	08001e1b 	.word	0x08001e1b
 8001ca8:	08001e41 	.word	0x08001e41
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001cac:	4b73      	ldr	r3, [pc, #460]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4b72      	ldr	r3, [pc, #456]	@ (8001e80 <AUDIO_PLAYER_Process+0x220>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d305      	bcc.n	8001cc8 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7fe fca7 	bl	8000610 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11e      	bne.n	8001d12 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cdc:	4967      	ldr	r1, [pc, #412]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001cde:	4869      	ldr	r0, [pc, #420]	@ (8001e84 <AUDIO_PLAYER_Process+0x224>)
 8001ce0:	f00c f998 	bl	800e014 <f_read>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7fe fc90 	bl	8000610 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0bc      	b.n	8001e6e <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001cf4:	4b61      	ldr	r3, [pc, #388]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001d0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d10:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001d12:	4b5a      	ldr	r3, [pc, #360]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	f040 80a5 	bne.w	8001e6a <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d28:	4957      	ldr	r1, [pc, #348]	@ (8001e88 <AUDIO_PLAYER_Process+0x228>)
 8001d2a:	4856      	ldr	r0, [pc, #344]	@ (8001e84 <AUDIO_PLAYER_Process+0x224>)
 8001d2c:	f00c f972 	bl	800e014 <f_read>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d36:	2002      	movs	r0, #2
 8001d38:	f7fe fc6a 	bl	8000610 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e096      	b.n	8001e6e <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d40:	4b4e      	ldr	r3, [pc, #312]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a49      	ldr	r2, [pc, #292]	@ (8001e7c <AUDIO_PLAYER_Process+0x21c>)
 8001d58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d5c:	6053      	str	r3, [r2, #4]
    }
    break;
 8001d5e:	e084      	b.n	8001e6a <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7fe fc55 	bl	8000610 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001d66:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8001d70:	e07c      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001d72:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8a:	461c      	mov	r4, r3
 8001d8c:	f7ff f804 	bl	8000d98 <AUDIO_GetWavObjectNumber>
 8001d90:	4603      	mov	r3, r0
 8001d92:	429c      	cmp	r4, r3
 8001d94:	db09      	blt.n	8001daa <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	e002      	b.n	8001daa <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001da4:	4b34      	ldr	r3, [pc, #208]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001da6:	2209      	movs	r2, #9
 8001da8:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001daa:	2002      	movs	r0, #2
 8001dac:	f7fe fc30 	bl	8000610 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001db0:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fef1 	bl	8001ba0 <AUDIO_PLAYER_Start>
    break;    
 8001dbe:	e055      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001dc0:	4b32      	ldr	r3, [pc, #200]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	4b2f      	ldr	r3, [pc, #188]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da07      	bge.n	8001dec <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001ddc:	f7fe ffdc 	bl	8000d98 <AUDIO_GetWavObjectNumber>
 8001de0:	4603      	mov	r3, r0
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001dea:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7fe fc0f 	bl	8000610 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001df2:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <AUDIO_PLAYER_Process+0x22c>)
 8001df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fed0 	bl	8001ba0 <AUDIO_PLAYER_Start>
    break;   
 8001e00:	e034      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8001e02:	f7fe fbd9 	bl	80005b8 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
    break;
 8001e0c:	e02e      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8001e0e:	f7fe fbe9 	bl	80005e4 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001e14:	2203      	movs	r2, #3
 8001e16:	701a      	strb	r2, [r3, #0]
    break;
 8001e18:	e028      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b5a      	cmp	r3, #90	@ 0x5a
 8001e20:	d804      	bhi.n	8001e2c <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	330a      	adds	r3, #10
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e2a:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fc14 	bl	8000660 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	701a      	strb	r2, [r3, #0]
    break;
 8001e3e:	e015      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d904      	bls.n	8001e52 <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3b0a      	subs	r3, #10
 8001e4e:	4a10      	ldr	r2, [pc, #64]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e50:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <AUDIO_PLAYER_Process+0x230>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fc01 	bl	8000660 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <AUDIO_PLAYER_Process+0x218>)
 8001e60:	2203      	movs	r2, #3
 8001e62:	701a      	strb	r2, [r3, #0]
    break;
 8001e64:	e002      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8001e66:	bf00      	nop
 8001e68:	e000      	b.n	8001e6c <AUDIO_PLAYER_Process+0x20c>
    break;
 8001e6a:	bf00      	nop
  }
  return audio_error;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200012e8 	.word	0x200012e8
 8001e7c:	200002e0 	.word	0x200002e0
 8001e80:	200016c8 	.word	0x200016c8
 8001e84:	200016f4 	.word	0x200016f4
 8001e88:	20000ae0 	.word	0x20000ae0
 8001e8c:	200012ea 	.word	0x200012ea
 8001e90:	2000003c 	.word	0x2000003c

08001e94 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d104      	bne.n	8001eaa <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	701a      	strb	r2, [r3, #0]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	200012e8 	.word	0x200012e8
 8001eb8:	200002e0 	.word	0x200002e0

08001ebc <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d104      	bne.n	8001ed2 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8001eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	200012e8 	.word	0x200012e8
 8001ee0:	200002e0 	.word	0x200002e0

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ef4:	480b      	ldr	r0, [pc, #44]	@ (8001f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
  ldr  r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff fe19 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f00d faab 	bl	800f46c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff faad 	bl	8001474 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f20:	0800fab8 	.word	0x0800fab8
  ldr  r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f28:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 8001f2c:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8001f30:	20002584 	.word	0x20002584

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f94f 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f808 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fc32 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_InitTick+0x54>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x58>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f967 	bl	800226e <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d80a      	bhi.n	8001fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f000 f92f 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fbc:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <HAL_InitTick+0x5c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000038 	.word	0x20000038
 8001fd4:	20000044 	.word	0x20000044
 8001fd8:	20000040 	.word	0x20000040

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000044 	.word	0x20000044
 8002000:	20001924 	.word	0x20001924

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20001924 	.word	0x20001924

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000044 	.word	0x20000044

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff feb6 	bl	8002004 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e099      	b.n	80023d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c4:	e00f      	b.n	80022e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c6:	f7ff fe9d 	bl	8002004 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d908      	bls.n	80022e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e078      	b.n	80023d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e8      	bne.n	80022c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <HAL_DMA_Init+0x158>)
 8002300:	4013      	ands	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	2b04      	cmp	r3, #4
 800233e:	d107      	bne.n	8002350 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	4313      	orrs	r3, r2
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	2b04      	cmp	r3, #4
 8002378:	d117      	bne.n	80023aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fb3d 	bl	8002a0c <DMA_CheckFifoParam>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2240      	movs	r2, #64	@ 0x40
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023a6:	2301      	movs	r3, #1
 80023a8:	e016      	b.n	80023d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 faf4 	bl	80029a0 <DMA_CalcBaseAndBitshift>
 80023b8:	4603      	mov	r3, r0
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	223f      	movs	r2, #63	@ 0x3f
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	f010803f 	.word	0xf010803f

080023e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e050      	b.n	8002498 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d101      	bne.n	8002406 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	e048      	b.n	8002498 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2221      	movs	r2, #33	@ 0x21
 8002444:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 faaa 	bl	80029a0 <DMA_CalcBaseAndBitshift>
 800244c:	4603      	mov	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002478:	223f      	movs	r2, #63	@ 0x3f
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_DMA_Start_IT+0x26>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e040      	b.n	8002548 <HAL_DMA_Start_IT+0xa8>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d12f      	bne.n	800253a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fa28 	bl	8002944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	223f      	movs	r2, #63	@ 0x3f
 80024fa:	409a      	lsls	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0216 	orr.w	r2, r2, #22
 800250e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0208 	orr.w	r2, r2, #8
 8002526:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e005      	b.n	8002546 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002542:	2302      	movs	r3, #2
 8002544:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800255e:	f7ff fd51 	bl	8002004 <HAL_GetTick>
 8002562:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d008      	beq.n	8002582 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e052      	b.n	8002628 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0216 	bic.w	r2, r2, #22
 8002590:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_DMA_Abort+0x62>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0208 	bic.w	r2, r2, #8
 80025c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d2:	e013      	b.n	80025fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d4:	f7ff fd16 	bl	8002004 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d90c      	bls.n	80025fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2220      	movs	r2, #32
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e015      	b.n	8002628 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e4      	bne.n	80025d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	223f      	movs	r2, #63	@ 0x3f
 8002610:	409a      	lsls	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800263c:	4b8e      	ldr	r3, [pc, #568]	@ (8002878 <HAL_DMA_IRQHandler+0x248>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a8e      	ldr	r2, [pc, #568]	@ (800287c <HAL_DMA_IRQHandler+0x24c>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	2208      	movs	r2, #8
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01a      	beq.n	800269c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0204 	bic.w	r2, r2, #4
 8002682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	2208      	movs	r2, #8
 800268a:	409a      	lsls	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	2201      	movs	r2, #1
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	2201      	movs	r2, #1
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	2204      	movs	r2, #4
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d012      	beq.n	8002708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	2204      	movs	r2, #4
 80026f6:	409a      	lsls	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	2210      	movs	r2, #16
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d043      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03c      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272a:	2210      	movs	r2, #16
 800272c:	409a      	lsls	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d018      	beq.n	8002772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d024      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
 800275e:	e01f      	b.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01b      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
 8002770:	e016      	b.n	80027a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0208 	bic.w	r2, r2, #8
 800278e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a4:	2220      	movs	r2, #32
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 808f 	beq.w	80028d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8087 	beq.w	80028d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	2220      	movs	r2, #32
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d136      	bne.n	8002848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0216 	bic.w	r2, r2, #22
 80027e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_DMA_IRQHandler+0x1da>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0208 	bic.w	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	223f      	movs	r2, #63	@ 0x3f
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800283a:	2b00      	cmp	r3, #0
 800283c:	d07e      	beq.n	800293c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
        }
        return;
 8002846:	e079      	b.n	800293c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002868:	2b00      	cmp	r3, #0
 800286a:	d031      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
 8002874:	e02c      	b.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
 8002876:	bf00      	nop
 8002878:	20000038 	.word	0x20000038
 800287c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	e01e      	b.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0210 	bic.w	r2, r2, #16
 80028ae:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d032      	beq.n	800293e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d022      	beq.n	800292a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3301      	adds	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d307      	bcc.n	8002918 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f2      	bne.n	80028fc <HAL_DMA_IRQHandler+0x2cc>
 8002916:	e000      	b.n	800291a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002918:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e000      	b.n	800293e <HAL_DMA_IRQHandler+0x30e>
        return;
 800293c:	bf00      	nop
    }
  }
}
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b40      	cmp	r3, #64	@ 0x40
 8002970:	d108      	bne.n	8002984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002982:	e007      	b.n	8002994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3b10      	subs	r3, #16
 80029b0:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <DMA_CalcBaseAndBitshift+0x64>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ba:	4a13      	ldr	r2, [pc, #76]	@ (8002a08 <DMA_CalcBaseAndBitshift+0x68>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d909      	bls.n	80029e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	659a      	str	r2, [r3, #88]	@ 0x58
 80029e0:	e007      	b.n	80029f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	aaaaaaab 	.word	0xaaaaaaab
 8002a08:	0800f64c 	.word	0x0800f64c

08002a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11f      	bne.n	8002a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d856      	bhi.n	8002ada <DMA_CheckFifoParam+0xce>
 8002a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a34 <DMA_CheckFifoParam+0x28>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a57 	.word	0x08002a57
 8002a3c:	08002a45 	.word	0x08002a45
 8002a40:	08002adb 	.word	0x08002adb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d046      	beq.n	8002ade <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a54:	e043      	b.n	8002ade <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a5e:	d140      	bne.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e03d      	b.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a6e:	d121      	bne.n	8002ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d837      	bhi.n	8002ae6 <DMA_CheckFifoParam+0xda>
 8002a76:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <DMA_CheckFifoParam+0x70>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a93 	.word	0x08002a93
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e030      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa2:	e022      	b.n	8002aea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aac:	d11f      	bne.n	8002aee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ab2:	e01c      	b.n	8002aee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d903      	bls.n	8002ac2 <DMA_CheckFifoParam+0xb6>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d003      	beq.n	8002ac8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ac0:	e018      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac6:	e015      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e00b      	b.n	8002af2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ada:	bf00      	nop
 8002adc:	e00a      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e008      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e006      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e004      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
    }
  } 
  
  return status; 
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e159      	b.n	8002dd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f040 8148 	bne.w	8002dce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d00b      	beq.n	8002b5e <HAL_GPIO_Init+0x5a>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b52:	2b11      	cmp	r3, #17
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0xfc>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b12      	cmp	r3, #18
 8002bfe:	d123      	bne.n	8002c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	220f      	movs	r2, #15
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0203 	and.w	r2, r3, #3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a2 	beq.w	8002dce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b57      	ldr	r3, [pc, #348]	@ (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	4a56      	ldr	r2, [pc, #344]	@ (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c9a:	4b54      	ldr	r3, [pc, #336]	@ (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca6:	4a52      	ldr	r2, [pc, #328]	@ (8002df0 <HAL_GPIO_Init+0x2ec>)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3302      	adds	r3, #2
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a49      	ldr	r2, [pc, #292]	@ (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x202>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a48      	ldr	r2, [pc, #288]	@ (8002df8 <HAL_GPIO_Init+0x2f4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x1fe>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a47      	ldr	r2, [pc, #284]	@ (8002dfc <HAL_GPIO_Init+0x2f8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x1fa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a46      	ldr	r2, [pc, #280]	@ (8002e00 <HAL_GPIO_Init+0x2fc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x1f6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a45      	ldr	r2, [pc, #276]	@ (8002e04 <HAL_GPIO_Init+0x300>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x1f2>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e008      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002d06:	2300      	movs	r3, #0
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d18:	4935      	ldr	r1, [pc, #212]	@ (8002df0 <HAL_GPIO_Init+0x2ec>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d50:	4b2d      	ldr	r3, [pc, #180]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d74:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7a:	4b23      	ldr	r3, [pc, #140]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da4:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e08 <HAL_GPIO_Init+0x304>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	f67f aea2 	bls.w	8002b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3724      	adds	r7, #36	@ 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e0bb      	b.n	8002fa0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	f040 80ab 	bne.w	8002f9a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e44:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb8 <HAL_GPIO_DeInit+0x1ac>)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a54      	ldr	r2, [pc, #336]	@ (8002fbc <HAL_GPIO_DeInit+0x1b0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_GPIO_DeInit+0x96>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a53      	ldr	r2, [pc, #332]	@ (8002fc0 <HAL_GPIO_DeInit+0x1b4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_DeInit+0x92>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a52      	ldr	r2, [pc, #328]	@ (8002fc4 <HAL_GPIO_DeInit+0x1b8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00d      	beq.n	8002e9a <HAL_GPIO_DeInit+0x8e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a51      	ldr	r2, [pc, #324]	@ (8002fc8 <HAL_GPIO_DeInit+0x1bc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_GPIO_DeInit+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a50      	ldr	r2, [pc, #320]	@ (8002fcc <HAL_GPIO_DeInit+0x1c0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_GPIO_DeInit+0x86>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	e008      	b.n	8002ea4 <HAL_GPIO_DeInit+0x98>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_DeInit+0x98>
 8002e96:	2303      	movs	r3, #3
 8002e98:	e004      	b.n	8002ea4 <HAL_GPIO_DeInit+0x98>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e002      	b.n	8002ea4 <HAL_GPIO_DeInit+0x98>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_GPIO_DeInit+0x98>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	f002 0203 	and.w	r2, r2, #3
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	4093      	lsls	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d132      	bne.n	8002f1a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002eb4:	4b46      	ldr	r3, [pc, #280]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	4944      	ldr	r1, [pc, #272]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ec2:	4b43      	ldr	r3, [pc, #268]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4941      	ldr	r1, [pc, #260]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	493d      	ldr	r1, [pc, #244]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ede:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	493a      	ldr	r1, [pc, #232]	@ (8002fd0 <HAL_GPIO_DeInit+0x1c4>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002efc:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb8 <HAL_GPIO_DeInit+0x1ac>)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	482a      	ldr	r0, [pc, #168]	@ (8002fb8 <HAL_GPIO_DeInit+0x1ac>)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	400a      	ands	r2, r1
 8002f14:	3302      	adds	r3, #2
 8002f16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2103      	movs	r1, #3
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	220f      	movs	r2, #15
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	08d2      	lsrs	r2, r2, #3
 8002f50:	4019      	ands	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2103      	movs	r1, #3
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	2101      	movs	r1, #1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2103      	movs	r1, #3
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	401a      	ands	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f af40 	bls.w	8002e28 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003012:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800301e:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fa06 	bl	8001438 <HAL_GPIO_EXTI_Callback>
  }
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b08f      	sub	sp, #60	@ 0x3c
 800303c:	af0a      	add	r7, sp, #40	@ 0x28
 800303e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e054      	b.n	80030f4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 32b9 	ldrb.w	r3, [r3, #697]	@ 0x2b9
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f00b fe1b 	bl	800eca0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f004 fbe5 	bl	8007858 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	687e      	ldr	r6, [r7, #4]
 8003096:	466d      	mov	r5, sp
 8003098:	f106 0410 	add.w	r4, r6, #16
 800309c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030ac:	1d33      	adds	r3, r6, #4
 80030ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b0:	6838      	ldr	r0, [r7, #0]
 80030b2:	f004 fb5f 	bl	8007774 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fbdc 	bl	800787a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	687e      	ldr	r6, [r7, #4]
 80030ca:	466d      	mov	r5, sp
 80030cc:	f106 0410 	add.w	r4, r6, #16
 80030d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e0:	1d33      	adds	r3, r6, #4
 80030e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	f004 fcef 	bl	8007ac8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030fc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b089      	sub	sp, #36	@ 0x24
 8003100:	af04      	add	r7, sp, #16
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	461a      	mov	r2, r3
 800310a:	4603      	mov	r3, r0
 800310c:	70fb      	strb	r3, [r7, #3]
 800310e:	460b      	mov	r3, r1
 8003110:	70bb      	strb	r3, [r7, #2]
 8003112:	4613      	mov	r3, r2
 8003114:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_HCD_HC_Init+0x28>
 8003120:	2302      	movs	r3, #2
 8003122:	e07f      	b.n	8003224 <HAL_HCD_HC_Init+0x128>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	333d      	adds	r3, #61	@ 0x3d
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	3338      	adds	r3, #56	@ 0x38
 8003150:	787a      	ldrb	r2, [r7, #1]
 8003152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	3340      	adds	r3, #64	@ 0x40
 8003164:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003166:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3339      	adds	r3, #57	@ 0x39
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	333f      	adds	r3, #63	@ 0x3f
 800318c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	78bb      	ldrb	r3, [r7, #2]
 8003196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800319a:	b2d8      	uxtb	r0, r3
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	333a      	adds	r3, #58	@ 0x3a
 80031aa:	4602      	mov	r2, r0
 80031ac:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80031ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da0a      	bge.n	80031cc <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	333b      	adds	r3, #59	@ 0x3b
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e009      	b.n	80031e0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	333b      	adds	r3, #59	@ 0x3b
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	333c      	adds	r3, #60	@ 0x3c
 80031f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	787c      	ldrb	r4, [r7, #1]
 80031fc:	78ba      	ldrb	r2, [r7, #2]
 80031fe:	78f9      	ldrb	r1, [r7, #3]
 8003200:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003202:	9302      	str	r3, [sp, #8]
 8003204:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4623      	mov	r3, r4
 8003212:	f004 fddb 	bl	8007dcc <USB_HC_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return status;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_HCD_HC_Halt+0x1e>
 8003246:	2302      	movs	r3, #2
 8003248:	e00f      	b.n	800326a <HAL_HCD_HC_Halt+0x3e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f005 f815 	bl	800828a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4603      	mov	r3, r0
 8003284:	70fb      	strb	r3, [r7, #3]
 8003286:	460b      	mov	r3, r1
 8003288:	70bb      	strb	r3, [r7, #2]
 800328a:	4613      	mov	r3, r2
 800328c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	333b      	adds	r3, #59	@ 0x3b
 800329e:	78ba      	ldrb	r2, [r7, #2]
 80032a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	333f      	adds	r3, #63	@ 0x3f
 80032b2:	787a      	ldrb	r2, [r7, #1]
 80032b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032b6:	7c3b      	ldrb	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3342      	adds	r3, #66	@ 0x42
 80032cc:	2203      	movs	r2, #3
 80032ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	333d      	adds	r3, #61	@ 0x3d
 80032e0:	7f3a      	ldrb	r2, [r7, #28]
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e009      	b.n	80032fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	3342      	adds	r3, #66	@ 0x42
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80032fa:	787b      	ldrb	r3, [r7, #1]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	f200 80d6 	bhi.w	80034ae <HAL_HCD_HC_SubmitRequest+0x23a>
 8003302:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003319 	.word	0x08003319
 800330c:	08003499 	.word	0x08003499
 8003310:	08003385 	.word	0x08003385
 8003314:	0800340f 	.word	0x0800340f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003318:	7c3b      	ldrb	r3, [r7, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	f040 80c9 	bne.w	80034b2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8003320:	78bb      	ldrb	r3, [r7, #2]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 80c5 	bne.w	80034b2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003328:	8b3b      	ldrh	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	3351      	adds	r3, #81	@ 0x51
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	3351      	adds	r3, #81	@ 0x51
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	3342      	adds	r3, #66	@ 0x42
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800336c:	e0a1      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3342      	adds	r3, #66	@ 0x42
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
      break;
 8003382:	e096      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003384:	78bb      	ldrb	r3, [r7, #2]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d120      	bne.n	80033cc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	3351      	adds	r3, #81	@ 0x51
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	3342      	adds	r3, #66	@ 0x42
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033b4:	e07e      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3342      	adds	r3, #66	@ 0x42
 80033c6:	2202      	movs	r2, #2
 80033c8:	701a      	strb	r2, [r3, #0]
      break;
 80033ca:	e073      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	440b      	add	r3, r1
 80033da:	3350      	adds	r3, #80	@ 0x50
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	3342      	adds	r3, #66	@ 0x42
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
      break;
 80033f6:	e05d      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	3342      	adds	r3, #66	@ 0x42
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
      break;
 800340c:	e052      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800340e:	78bb      	ldrb	r3, [r7, #2]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d120      	bne.n	8003456 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	3351      	adds	r3, #81	@ 0x51
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	3342      	adds	r3, #66	@ 0x42
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800343e:	e039      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	3342      	adds	r3, #66	@ 0x42
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]
      break;
 8003454:	e02e      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	3350      	adds	r3, #80	@ 0x50
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3342      	adds	r3, #66	@ 0x42
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
      break;
 8003480:	e018      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	3342      	adds	r3, #66	@ 0x42
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
      break;
 8003496:	e00d      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	3342      	adds	r3, #66	@ 0x42
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
      break;
 80034ac:	e002      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80034b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3344      	adds	r3, #68	@ 0x44
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	8b39      	ldrh	r1, [r7, #24]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4403      	add	r3, r0
 80034d8:	3348      	adds	r3, #72	@ 0x48
 80034da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	335c      	adds	r3, #92	@ 0x5c
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	334c      	adds	r3, #76	@ 0x4c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3339      	adds	r3, #57	@ 0x39
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	335d      	adds	r3, #93	@ 0x5d
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	3338      	adds	r3, #56	@ 0x38
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	18d1      	adds	r1, r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	f004 fd4a 	bl	8007fe0 <USB_HC_StartXfer>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop

08003558 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fa67 	bl	8007a42 <USB_GetMode>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 80ef 	bne.w	800375a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f004 fa4b 	bl	8007a1c <USB_ReadInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80e5 	beq.w	8003758 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fa42 	bl	8007a1c <USB_ReadInterrupts>
 8003598:	4603      	mov	r3, r0
 800359a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800359e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035a2:	d104      	bne.n	80035ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80035ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 fa32 	bl	8007a1c <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035c2:	d104      	bne.n	80035ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 fa22 	bl	8007a1c <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035e2:	d104      	bne.n	80035ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f004 fa12 	bl	8007a1c <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d103      	bne.n	800360a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2202      	movs	r2, #2
 8003608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fa04 	bl	8007a1c <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800361a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800361e:	d115      	bne.n	800364c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003628:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f00b fbae 	bl	800ed9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fafa 	bl	8007c40 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 f9e3 	bl	8007a1c <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800365c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003660:	d102      	bne.n	8003668 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f001 f968 	bl	8004938 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f004 f9d5 	bl	8007a1c <USB_ReadInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d106      	bne.n	800368a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f00b fb71 	bl	800ed64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2208      	movs	r2, #8
 8003688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f004 f9c4 	bl	8007a1c <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800369e:	d138      	bne.n	8003712 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f004 fddf 	bl	8008268 <USB_HC_ReadInterrupt>
 80036aa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e025      	b.n	80036fe <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036dc:	d106      	bne.n	80036ec <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8cf 	bl	8003888 <HCD_HC_IN_IRQHandler>
 80036ea:	e005      	b.n	80036f8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fcfd 	bl	80040f2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3301      	adds	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3d4      	bcc.n	80036b2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f004 f980 	bl	8007a1c <USB_ReadInterrupts>
 800371c:	4603      	mov	r3, r0
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b10      	cmp	r3, #16
 8003724:	d101      	bne.n	800372a <HAL_HCD_IRQHandler+0x1d2>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_HCD_IRQHandler+0x1d4>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d014      	beq.n	800375a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0210 	bic.w	r2, r2, #16
 800373e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 f84b 	bl	80047dc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0210 	orr.w	r2, r2, #16
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	e000      	b.n	800375a <HAL_HCD_IRQHandler+0x202>
      return;
 8003758:	bf00      	nop
    }
  }
}
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_HCD_Start+0x16>
 8003772:	2302      	movs	r3, #2
 8003774:	e013      	b.n	800379e <HAL_HCD_Start+0x3e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f004 f857 	bl	8007836 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2101      	movs	r1, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f004 faba 	bl	8007d08 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_HCD_Stop+0x16>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e00d      	b.n	80037d8 <HAL_HCD_Stop+0x32>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f004 fe99 	bl	8008500 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f004 fa61 	bl	8007cb4 <USB_ResetPort>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	440b      	add	r3, r1
 8003816:	335c      	adds	r3, #92	@ 0x5c
 8003818:	781b      	ldrb	r3, [r3, #0]
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	440b      	add	r3, r1
 8003840:	334c      	adds	r3, #76	@ 0x4c
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f004 faa3 	bl	8007da8 <USB_GetCurrentFrame>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f004 fa7e 	bl	8007d7a <USB_GetHostSpeed>
 800387e:	4603      	mov	r3, r0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d119      	bne.n	80038ec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c4:	461a      	mov	r2, r3
 80038c6:	2304      	movs	r3, #4
 80038c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	60d3      	str	r3, [r2, #12]
 80038ea:	e0ce      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003902:	d12c      	bne.n	800395e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003916:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	440b      	add	r3, r1
 8003926:	335d      	adds	r3, #93	@ 0x5d
 8003928:	2207      	movs	r2, #7
 800392a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	0151      	lsls	r1, r2, #5
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	440a      	add	r2, r1
 8003942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003946:	f043 0302 	orr.w	r3, r3, #2
 800394a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f004 fc97 	bl	800828a <USB_HC_Halt>
 800395c:	e095      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b20      	cmp	r3, #32
 8003972:	d109      	bne.n	8003988 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003980:	461a      	mov	r2, r3
 8003982:	2320      	movs	r3, #32
 8003984:	6093      	str	r3, [r2, #8]
 8003986:	e080      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b08      	cmp	r3, #8
 800399c:	d134      	bne.n	8003a08 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	335d      	adds	r3, #93	@ 0x5d
 80039ce:	2205      	movs	r2, #5
 80039d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039de:	461a      	mov	r2, r3
 80039e0:	2310      	movs	r3, #16
 80039e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f0:	461a      	mov	r2, r3
 80039f2:	2308      	movs	r3, #8
 80039f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fc42 	bl	800828a <USB_HC_Halt>
 8003a06:	e040      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1e:	d134      	bne.n	8003a8a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 fc1d 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2310      	movs	r3, #16
 8003a60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	335d      	adds	r3, #93	@ 0x5d
 8003a72:	2208      	movs	r2, #8
 8003a74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a82:	461a      	mov	r2, r3
 8003a84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a88:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa0:	d122      	bne.n	8003ae8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003abc:	f043 0302 	orr.w	r3, r3, #2
 8003ac0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f004 fbdc 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ae4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ae6:	e300      	b.n	80040ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	f040 80fd 	bne.w	8003cfa <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3348      	adds	r3, #72	@ 0x48
 8003b18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0159      	lsls	r1, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003b2c:	1ad1      	subs	r1, r2, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4403      	add	r3, r0
 8003b3c:	334c      	adds	r3, #76	@ 0x4c
 8003b3e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	335d      	adds	r3, #93	@ 0x5d
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	3358      	adds	r3, #88	@ 0x58
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b74:	461a      	mov	r2, r3
 8003b76:	2301      	movs	r3, #1
 8003b78:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	440b      	add	r3, r1
 8003b88:	333f      	adds	r3, #63	@ 0x3f
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	333f      	adds	r3, #63	@ 0x3f
 8003ba0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d121      	bne.n	8003bea <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	0151      	lsls	r1, r2, #5
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	440a      	add	r2, r1
 8003bbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fb5a 	bl	800828a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be2:	461a      	mov	r2, r3
 8003be4:	2310      	movs	r3, #16
 8003be6:	6093      	str	r3, [r2, #8]
 8003be8:	e070      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	440b      	add	r3, r1
 8003bf8:	333f      	adds	r3, #63	@ 0x3f
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d12a      	bne.n	8003c56 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	0151      	lsls	r1, r2, #5
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	440a      	add	r2, r1
 8003c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c1e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	440b      	add	r3, r1
 8003c2e:	335c      	adds	r3, #92	@ 0x5c
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	b2d8      	uxtb	r0, r3
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	335c      	adds	r3, #92	@ 0x5c
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f00b f8b2 	bl	800edb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c54:	e03a      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	440b      	add	r3, r1
 8003c64:	333f      	adds	r3, #63	@ 0x3f
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d12f      	bne.n	8003ccc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	335c      	adds	r3, #92	@ 0x5c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3350      	adds	r3, #80	@ 0x50
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2d8      	uxtb	r0, r3
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3350      	adds	r3, #80	@ 0x50
 8003ca8:	4602      	mov	r2, r0
 8003caa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	b2d8      	uxtb	r0, r3
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	335c      	adds	r3, #92	@ 0x5c
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4601      	mov	r1, r0
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f00b f876 	bl	800edb8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	440b      	add	r3, r1
 8003cda:	3350      	adds	r3, #80	@ 0x50
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2d8      	uxtb	r0, r3
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3350      	adds	r3, #80	@ 0x50
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	701a      	strb	r2, [r3, #0]
}
 8003cf8:	e1f7      	b.n	80040ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	f040 811a 	bne.w	8003f46 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	0151      	lsls	r1, r2, #5
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	440a      	add	r2, r1
 8003d28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d2c:	f023 0302 	bic.w	r3, r3, #2
 8003d30:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	335d      	adds	r3, #93	@ 0x5d
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10a      	bne.n	8003d5e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	335c      	adds	r3, #92	@ 0x5c
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e0d9      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	335d      	adds	r3, #93	@ 0x5d
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d10a      	bne.n	8003d8a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	335c      	adds	r3, #92	@ 0x5c
 8003d84:	2205      	movs	r2, #5
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e0c3      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	440b      	add	r3, r1
 8003d98:	335d      	adds	r3, #93	@ 0x5d
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d00a      	beq.n	8003db6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	440b      	add	r3, r1
 8003dae:	335d      	adds	r3, #93	@ 0x5d
 8003db0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d156      	bne.n	8003e64 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3358      	adds	r3, #88	@ 0x58
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4403      	add	r3, r0
 8003dd8:	3358      	adds	r3, #88	@ 0x58
 8003dda:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	440b      	add	r3, r1
 8003dea:	3358      	adds	r3, #88	@ 0x58
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d914      	bls.n	8003e1c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	3358      	adds	r3, #88	@ 0x58
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	440b      	add	r3, r1
 8003e14:	335c      	adds	r3, #92	@ 0x5c
 8003e16:	2204      	movs	r2, #4
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e009      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	335c      	adds	r3, #92	@ 0x5c
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e056      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	440b      	add	r3, r1
 8003e72:	335d      	adds	r3, #93	@ 0x5d
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d123      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	440b      	add	r3, r1
 8003e88:	335c      	adds	r3, #92	@ 0x5c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ea4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eac:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e027      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	335d      	adds	r3, #93	@ 0x5d
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b07      	cmp	r3, #7
 8003ed6:	d11c      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3358      	adds	r3, #88	@ 0x58
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4403      	add	r3, r0
 8003efa:	3358      	adds	r3, #88	@ 0x58
 8003efc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	335c      	adds	r3, #92	@ 0x5c
 8003f0e:	2204      	movs	r2, #4
 8003f10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2302      	movs	r3, #2
 8003f22:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	b2d8      	uxtb	r0, r3
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	335c      	adds	r3, #92	@ 0x5c
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f00a ff3a 	bl	800edb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f44:	e0d1      	b.n	80040ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f58:	2b80      	cmp	r3, #128	@ 0x80
 8003f5a:	d13e      	bne.n	8003fda <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	3358      	adds	r3, #88	@ 0x58
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4403      	add	r3, r0
 8003f9e:	3358      	adds	r3, #88	@ 0x58
 8003fa0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	335d      	adds	r3, #93	@ 0x5d
 8003fb2:	2206      	movs	r2, #6
 8003fb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f004 f962 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	6093      	str	r3, [r2, #8]
}
 8003fd8:	e087      	b.n	80040ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d17c      	bne.n	80040ea <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	333f      	adds	r3, #63	@ 0x3f
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d122      	bne.n	800404c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	3358      	adds	r3, #88	@ 0x58
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	440a      	add	r2, r1
 8004030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f004 f920 	bl	800828a <USB_HC_Halt>
 800404a:	e045      	b.n	80040d8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	333f      	adds	r3, #63	@ 0x3f
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	440b      	add	r3, r1
 8004070:	333f      	adds	r3, #63	@ 0x3f
 8004072:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004074:	2b02      	cmp	r3, #2
 8004076:	d12f      	bne.n	80040d8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	440b      	add	r3, r1
 8004086:	3358      	adds	r3, #88	@ 0x58
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d121      	bne.n	80040d8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	335d      	adds	r3, #93	@ 0x5d
 80040a4:	2203      	movs	r2, #3
 80040a6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 f8d9 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e4:	461a      	mov	r2, r3
 80040e6:	2310      	movs	r3, #16
 80040e8:	6093      	str	r3, [r2, #8]
}
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b04      	cmp	r3, #4
 8004120:	d119      	bne.n	8004156 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	2304      	movs	r3, #4
 8004132:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	440a      	add	r2, r1
 800414a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800414e:	f043 0302 	orr.w	r3, r3, #2
 8004152:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004154:	e33e      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b20      	cmp	r3, #32
 800416a:	d141      	bne.n	80041f0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	2320      	movs	r3, #32
 800417c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	333d      	adds	r3, #61	@ 0x3d
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 831f 	bne.w	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	440b      	add	r3, r1
 80041a4:	333d      	adds	r3, #61	@ 0x3d
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	335c      	adds	r3, #92	@ 0x5c
 80041ba:	2202      	movs	r2, #2
 80041bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 f84e 	bl	800828a <USB_HC_Halt>
}
 80041ee:	e2f1      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d13f      	bne.n	8004286 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	440b      	add	r3, r1
 8004214:	335d      	adds	r3, #93	@ 0x5d
 8004216:	2204      	movs	r2, #4
 8004218:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	333d      	adds	r3, #61	@ 0x3d
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	440b      	add	r3, r1
 800423c:	3358      	adds	r3, #88	@ 0x58
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	0151      	lsls	r1, r2, #5
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	440a      	add	r2, r1
 8004258:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f004 f80c 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427e:	461a      	mov	r2, r3
 8004280:	2340      	movs	r3, #64	@ 0x40
 8004282:	6093      	str	r3, [r2, #8]
}
 8004284:	e2a6      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4413      	add	r3, r2
 800428e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800429c:	d122      	bne.n	80042e4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f003 ffde 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042da:	461a      	mov	r2, r3
 80042dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042e0:	6093      	str	r3, [r2, #8]
}
 80042e2:	e277      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d135      	bne.n	8004366 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	3358      	adds	r3, #88	@ 0x58
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	440a      	add	r2, r1
 8004324:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f003 ffa6 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434a:	461a      	mov	r2, r3
 800434c:	2301      	movs	r3, #1
 800434e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	440b      	add	r3, r1
 800435e:	335d      	adds	r3, #93	@ 0x5d
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
}
 8004364:	e236      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b08      	cmp	r3, #8
 800437a:	d12b      	bne.n	80043d4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004388:	461a      	mov	r2, r3
 800438a:	2308      	movs	r3, #8
 800438c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f003 ff66 	bl	800828a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	440b      	add	r3, r1
 80043cc:	335d      	adds	r3, #93	@ 0x5d
 80043ce:	2205      	movs	r2, #5
 80043d0:	701a      	strb	r2, [r3, #0]
}
 80043d2:	e1ff      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d155      	bne.n	8004496 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	440b      	add	r3, r1
 80043f8:	3358      	adds	r3, #88	@ 0x58
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	440b      	add	r3, r1
 800440c:	335d      	adds	r3, #93	@ 0x5d
 800440e:	2203      	movs	r2, #3
 8004410:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	440b      	add	r3, r1
 8004420:	333d      	adds	r3, #61	@ 0x3d
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d114      	bne.n	8004452 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	440b      	add	r3, r1
 8004436:	333c      	adds	r3, #60	@ 0x3c
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	440b      	add	r3, r1
 800444c:	333d      	adds	r3, #61	@ 0x3d
 800444e:	2201      	movs	r2, #1
 8004450:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	440a      	add	r2, r1
 8004468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f003 ff04 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448e:	461a      	mov	r2, r3
 8004490:	2310      	movs	r3, #16
 8004492:	6093      	str	r3, [r2, #8]
}
 8004494:	e19e      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	2b80      	cmp	r3, #128	@ 0x80
 80044aa:	d12b      	bne.n	8004504 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 fed7 	bl	800828a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	440b      	add	r3, r1
 80044ea:	335d      	adds	r3, #93	@ 0x5d
 80044ec:	2206      	movs	r2, #6
 80044ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fc:	461a      	mov	r2, r3
 80044fe:	2380      	movs	r3, #128	@ 0x80
 8004500:	6093      	str	r3, [r2, #8]
}
 8004502:	e167      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451a:	d135      	bne.n	8004588 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	440a      	add	r2, r1
 8004532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004536:	f043 0302 	orr.w	r3, r3, #2
 800453a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f003 fe9f 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004558:	461a      	mov	r2, r3
 800455a:	2310      	movs	r3, #16
 800455c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4413      	add	r3, r2
 8004566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800456a:	461a      	mov	r2, r3
 800456c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004570:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	335d      	adds	r3, #93	@ 0x5d
 8004582:	2208      	movs	r2, #8
 8004584:	701a      	strb	r2, [r3, #0]
}
 8004586:	e125      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	f040 811a 	bne.w	80047d4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045ba:	f023 0302 	bic.w	r3, r3, #2
 80045be:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	335d      	adds	r3, #93	@ 0x5d
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d137      	bne.n	8004646 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	440b      	add	r3, r1
 80045e4:	335c      	adds	r3, #92	@ 0x5c
 80045e6:	2201      	movs	r2, #1
 80045e8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	440b      	add	r3, r1
 80045f8:	333f      	adds	r3, #63	@ 0x3f
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d00b      	beq.n	8004618 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	333f      	adds	r3, #63	@ 0x3f
 8004610:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004612:	2b03      	cmp	r3, #3
 8004614:	f040 80c5 	bne.w	80047a2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	3351      	adds	r3, #81	@ 0x51
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f083 0301 	eor.w	r3, r3, #1
 800462e:	b2d8      	uxtb	r0, r3
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	440b      	add	r3, r1
 800463e:	3351      	adds	r3, #81	@ 0x51
 8004640:	4602      	mov	r2, r0
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e0ad      	b.n	80047a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	335d      	adds	r3, #93	@ 0x5d
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d10a      	bne.n	8004672 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	440b      	add	r3, r1
 800466a:	335c      	adds	r3, #92	@ 0x5c
 800466c:	2202      	movs	r2, #2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e097      	b.n	80047a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	440b      	add	r3, r1
 8004680:	335d      	adds	r3, #93	@ 0x5d
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d10a      	bne.n	800469e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	335c      	adds	r3, #92	@ 0x5c
 8004698:	2202      	movs	r2, #2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e081      	b.n	80047a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	335d      	adds	r3, #93	@ 0x5d
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d10a      	bne.n	80046ca <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	440b      	add	r3, r1
 80046c2:	335c      	adds	r3, #92	@ 0x5c
 80046c4:	2205      	movs	r2, #5
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e06b      	b.n	80047a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	440b      	add	r3, r1
 80046d8:	335d      	adds	r3, #93	@ 0x5d
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d00a      	beq.n	80046f6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	440b      	add	r3, r1
 80046ee:	335d      	adds	r3, #93	@ 0x5d
 80046f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d155      	bne.n	80047a2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	440b      	add	r3, r1
 8004704:	3358      	adds	r3, #88	@ 0x58
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	1c59      	adds	r1, r3, #1
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4403      	add	r3, r0
 8004718:	3358      	adds	r3, #88	@ 0x58
 800471a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	440b      	add	r3, r1
 800472a:	3358      	adds	r3, #88	@ 0x58
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d914      	bls.n	800475c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	440b      	add	r3, r1
 8004740:	3358      	adds	r3, #88	@ 0x58
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	335c      	adds	r3, #92	@ 0x5c
 8004756:	2204      	movs	r2, #4
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e009      	b.n	8004770 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	440b      	add	r3, r1
 800476a:	335c      	adds	r3, #92	@ 0x5c
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004786:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800478e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ae:	461a      	mov	r2, r3
 80047b0:	2302      	movs	r3, #2
 80047b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	b2d8      	uxtb	r0, r3
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	335c      	adds	r3, #92	@ 0x5c
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	4601      	mov	r1, r0
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f00a faf2 	bl	800edb8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047d4:	bf00      	nop
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	@ 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	0c5b      	lsrs	r3, r3, #17
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004810:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d004      	beq.n	8004822 <HCD_RXQLVL_IRQHandler+0x46>
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b05      	cmp	r3, #5
 800481c:	f000 8082 	beq.w	8004924 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004820:	e083      	b.n	800492a <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d07f      	beq.n	8004928 <HCD_RXQLVL_IRQHandler+0x14c>
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	440b      	add	r3, r1
 8004836:	3344      	adds	r3, #68	@ 0x44
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d074      	beq.n	8004928 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	440b      	add	r3, r1
 8004850:	3344      	adds	r3, #68	@ 0x44
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	b292      	uxth	r2, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f003 f8b6 	bl	80079ca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	440b      	add	r3, r1
 800486c:	3344      	adds	r3, #68	@ 0x44
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	18d1      	adds	r1, r2, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4403      	add	r3, r0
 8004882:	3344      	adds	r3, #68	@ 0x44
 8004884:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	440b      	add	r3, r1
 8004894:	334c      	adds	r3, #76	@ 0x4c
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	18d1      	adds	r1, r2, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4403      	add	r3, r0
 80048aa:	334c      	adds	r3, #76	@ 0x4c
 80048ac:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <HCD_RXQLVL_IRQHandler+0x158>)
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d031      	beq.n	8004928 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048f0:	461a      	mov	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	3350      	adds	r3, #80	@ 0x50
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f083 0301 	eor.w	r3, r3, #1
 800490c:	b2d8      	uxtb	r0, r3
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	3350      	adds	r3, #80	@ 0x50
 800491e:	4602      	mov	r2, r0
 8004920:	701a      	strb	r2, [r3, #0]
      break;
 8004922:	e001      	b.n	8004928 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004924:	bf00      	nop
 8004926:	e000      	b.n	800492a <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8004928:	bf00      	nop
  }
}
 800492a:	bf00      	nop
 800492c:	3728      	adds	r7, #40	@ 0x28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	1ff80000 	.word	0x1ff80000

08004938 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004964:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d10b      	bne.n	8004988 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d102      	bne.n	8004980 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f00a fa00 	bl	800ed80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f043 0302 	orr.w	r3, r3, #2
 8004986:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b08      	cmp	r3, #8
 8004990:	d132      	bne.n	80049f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f043 0308 	orr.w	r3, r3, #8
 8004998:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d126      	bne.n	80049f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d113      	bne.n	80049d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80049b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049b6:	d106      	bne.n	80049c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f003 f93e 	bl	8007c40 <USB_InitFSLSPClkSel>
 80049c4:	e011      	b.n	80049ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f003 f937 	bl	8007c40 <USB_InitFSLSPClkSel>
 80049d2:	e00a      	b.n	80049ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049e2:	461a      	mov	r2, r3
 80049e4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80049e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f00a f9f2 	bl	800edd4 <HAL_HCD_PortEnabled_Callback>
 80049f0:	e002      	b.n	80049f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f00a f9fc 	bl	800edf0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d103      	bne.n	8004a0a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a10:	461a      	mov	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6013      	str	r3, [r2, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e12b      	b.n	8004c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc feec 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2224      	movs	r2, #36	@ 0x24
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a84:	f002 fcd0 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8004a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4a81      	ldr	r2, [pc, #516]	@ (8004c94 <HAL_I2C_Init+0x274>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d807      	bhi.n	8004aa4 <HAL_I2C_Init+0x84>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a80      	ldr	r2, [pc, #512]	@ (8004c98 <HAL_I2C_Init+0x278>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bf94      	ite	ls
 8004a9c:	2301      	movls	r3, #1
 8004a9e:	2300      	movhi	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e006      	b.n	8004ab2 <HAL_I2C_Init+0x92>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8004c9c <HAL_I2C_Init+0x27c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bf94      	ite	ls
 8004aac:	2301      	movls	r3, #1
 8004aae:	2300      	movhi	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0e7      	b.n	8004c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a78      	ldr	r2, [pc, #480]	@ (8004ca0 <HAL_I2C_Init+0x280>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0c9b      	lsrs	r3, r3, #18
 8004ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8004c94 <HAL_I2C_Init+0x274>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d802      	bhi.n	8004af4 <HAL_I2C_Init+0xd4>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3301      	adds	r3, #1
 8004af2:	e009      	b.n	8004b08 <HAL_I2C_Init+0xe8>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	4a69      	ldr	r2, [pc, #420]	@ (8004ca4 <HAL_I2C_Init+0x284>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	099b      	lsrs	r3, r3, #6
 8004b06:	3301      	adds	r3, #1
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	495c      	ldr	r1, [pc, #368]	@ (8004c94 <HAL_I2C_Init+0x274>)
 8004b24:	428b      	cmp	r3, r1
 8004b26:	d819      	bhi.n	8004b5c <HAL_I2C_Init+0x13c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e59      	subs	r1, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b3c:	400b      	ands	r3, r1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_I2C_Init+0x138>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1e59      	subs	r1, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b56:	e051      	b.n	8004bfc <HAL_I2C_Init+0x1dc>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	e04f      	b.n	8004bfc <HAL_I2C_Init+0x1dc>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d111      	bne.n	8004b88 <HAL_I2C_Init+0x168>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1e58      	subs	r0, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	440b      	add	r3, r1
 8004b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b76:	3301      	adds	r3, #1
 8004b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e012      	b.n	8004bae <HAL_I2C_Init+0x18e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1e58      	subs	r0, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	0099      	lsls	r1, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Init+0x196>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e022      	b.n	8004bfc <HAL_I2C_Init+0x1dc>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10e      	bne.n	8004bdc <HAL_I2C_Init+0x1bc>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1e58      	subs	r0, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	440b      	add	r3, r1
 8004bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bda:	e00f      	b.n	8004bfc <HAL_I2C_Init+0x1dc>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1e58      	subs	r0, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	0099      	lsls	r1, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	6809      	ldr	r1, [r1, #0]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6911      	ldr	r1, [r2, #16]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	4311      	orrs	r1, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	000186a0 	.word	0x000186a0
 8004c98:	001e847f 	.word	0x001e847f
 8004c9c:	003d08ff 	.word	0x003d08ff
 8004ca0:	431bde83 	.word	0x431bde83
 8004ca4:	10624dd3 	.word	0x10624dd3

08004ca8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e021      	b.n	8004cfe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2224      	movs	r2, #36	@ 0x24
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc fdee 	bl	80018b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	813b      	strh	r3, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d22:	f7fd f96f 	bl	8002004 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	f040 80d9 	bne.w	8004ee8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2319      	movs	r3, #25
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	496d      	ldr	r1, [pc, #436]	@ (8004ef4 <HAL_I2C_Mem_Write+0x1ec>)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fc8d 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e0cc      	b.n	8004eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_I2C_Mem_Write+0x56>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0c5      	b.n	8004eea <HAL_I2C_Mem_Write+0x1e2>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d007      	beq.n	8004d84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2221      	movs	r2, #33	@ 0x21
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2240      	movs	r2, #64	@ 0x40
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8004ef8 <HAL_I2C_Mem_Write+0x1f0>)
 8004dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dc6:	88f8      	ldrh	r0, [r7, #6]
 8004dc8:	893a      	ldrh	r2, [r7, #8]
 8004dca:	8979      	ldrh	r1, [r7, #10]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fac4 	bl	8005364 <I2C_RequestMemoryWrite>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d052      	beq.n	8004e88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e081      	b.n	8004eea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fd0e 	bl	800580c <I2C_WaitOnTXEFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00d      	beq.n	8004e12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d107      	bne.n	8004e0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e06b      	b.n	8004eea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11b      	bne.n	8004e88 <HAL_I2C_Mem_Write+0x180>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d017      	beq.n	8004e88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	781a      	ldrb	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1aa      	bne.n	8004de6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fcfa 	bl	800588e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d107      	bne.n	8004eb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e016      	b.n	8004eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e000      	b.n	8004eea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	00100002 	.word	0x00100002
 8004ef8:	ffff0000 	.word	0xffff0000

08004efc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	@ 0x30
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	817b      	strh	r3, [r7, #10]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	813b      	strh	r3, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f16:	f7fd f875 	bl	8002004 <HAL_GetTick>
 8004f1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	f040 8208 	bne.w	800533a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2319      	movs	r3, #25
 8004f30:	2201      	movs	r2, #1
 8004f32:	497b      	ldr	r1, [pc, #492]	@ (8005120 <HAL_I2C_Mem_Read+0x224>)
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fb93 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
 8004f42:	e1fb      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_I2C_Mem_Read+0x56>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e1f4      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d007      	beq.n	8004f78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2222      	movs	r2, #34	@ 0x22
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2240      	movs	r2, #64	@ 0x40
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8005124 <HAL_I2C_Mem_Read+0x228>)
 8004fb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fba:	88f8      	ldrh	r0, [r7, #6]
 8004fbc:	893a      	ldrh	r2, [r7, #8]
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	4603      	mov	r3, r0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fa60 	bl	8005490 <I2C_RequestMemoryRead>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e1b0      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d113      	bne.n	800500a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	623b      	str	r3, [r7, #32]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	623b      	str	r3, [r7, #32]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e184      	b.n	8005314 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500e:	2b01      	cmp	r3, #1
 8005010:	d11b      	bne.n	800504a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e164      	b.n	8005314 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504e:	2b02      	cmp	r3, #2
 8005050:	d11b      	bne.n	800508a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005060:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	e144      	b.n	8005314 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050a0:	e138      	b.n	8005314 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	f200 80f1 	bhi.w	800528e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d123      	bne.n	80050fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fc29 	bl	8005910 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e139      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050fa:	e10b      	b.n	8005314 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005100:	2b02      	cmp	r3, #2
 8005102:	d14e      	bne.n	80051a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	2200      	movs	r2, #0
 800510c:	4906      	ldr	r1, [pc, #24]	@ (8005128 <HAL_I2C_Mem_Read+0x22c>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 faa6 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e10e      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
 800511e:	bf00      	nop
 8005120:	00100002 	.word	0x00100002
 8005124:	ffff0000 	.word	0xffff0000
 8005128:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051a0:	e0b8      	b.n	8005314 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a8:	2200      	movs	r2, #0
 80051aa:	4966      	ldr	r1, [pc, #408]	@ (8005344 <HAL_I2C_Mem_Read+0x448>)
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fa57 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0bf      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	2200      	movs	r2, #0
 8005206:	494f      	ldr	r1, [pc, #316]	@ (8005344 <HAL_I2C_Mem_Read+0x448>)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fa29 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e091      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800528c:	e042      	b.n	8005314 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800528e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005290:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fb3c 	bl	8005910 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e04c      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d118      	bne.n	8005314 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005318:	2b00      	cmp	r3, #0
 800531a:	f47f aec2 	bne.w	80050a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3728      	adds	r7, #40	@ 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	00010004 	.word	0x00010004

08005348 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005356:	b2db      	uxtb	r3, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	461a      	mov	r2, r3
 8005372:	4603      	mov	r3, r0
 8005374:	817b      	strh	r3, [r7, #10]
 8005376:	460b      	mov	r3, r1
 8005378:	813b      	strh	r3, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800538c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	2200      	movs	r2, #0
 8005396:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f960 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b4:	d103      	bne.n	80053be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e05f      	b.n	8005482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053c2:	897b      	ldrh	r3, [r7, #10]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	492d      	ldr	r1, [pc, #180]	@ (800548c <I2C_RequestMemoryWrite+0x128>)
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f998 	bl	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e04c      	b.n	8005482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005400:	6a39      	ldr	r1, [r7, #32]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fa02 	bl	800580c <I2C_WaitOnTXEFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	2b04      	cmp	r3, #4
 8005414:	d107      	bne.n	8005426 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005424:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e02b      	b.n	8005482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d105      	bne.n	800543c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005430:	893b      	ldrh	r3, [r7, #8]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	611a      	str	r2, [r3, #16]
 800543a:	e021      	b.n	8005480 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800543c:	893b      	ldrh	r3, [r7, #8]
 800543e:	0a1b      	lsrs	r3, r3, #8
 8005440:	b29b      	uxth	r3, r3
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800544a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544c:	6a39      	ldr	r1, [r7, #32]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f9dc 	bl	800580c <I2C_WaitOnTXEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	2b04      	cmp	r3, #4
 8005460:	d107      	bne.n	8005472 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005470:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e005      	b.n	8005482 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005476:	893b      	ldrh	r3, [r7, #8]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	00010002 	.word	0x00010002

08005490 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	4608      	mov	r0, r1
 800549a:	4611      	mov	r1, r2
 800549c:	461a      	mov	r2, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	817b      	strh	r3, [r7, #10]
 80054a2:	460b      	mov	r3, r1
 80054a4:	813b      	strh	r3, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f8c2 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f0:	d103      	bne.n	80054fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e0aa      	b.n	8005654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800550c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	6a3a      	ldr	r2, [r7, #32]
 8005512:	4952      	ldr	r1, [pc, #328]	@ (800565c <I2C_RequestMemoryRead+0x1cc>)
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f8fa 	bl	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e097      	b.n	8005654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553c:	6a39      	ldr	r1, [r7, #32]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f964 	bl	800580c <I2C_WaitOnTXEFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00d      	beq.n	8005566 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	2b04      	cmp	r3, #4
 8005550:	d107      	bne.n	8005562 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e076      	b.n	8005654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d105      	bne.n	8005578 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800556c:	893b      	ldrh	r3, [r7, #8]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	611a      	str	r2, [r3, #16]
 8005576:	e021      	b.n	80055bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005578:	893b      	ldrh	r3, [r7, #8]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	b29b      	uxth	r3, r3
 800557e:	b2da      	uxtb	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005588:	6a39      	ldr	r1, [r7, #32]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f93e 	bl	800580c <I2C_WaitOnTXEFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00d      	beq.n	80055b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	2b04      	cmp	r3, #4
 800559c:	d107      	bne.n	80055ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e050      	b.n	8005654 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055b2:	893b      	ldrh	r3, [r7, #8]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055be:	6a39      	ldr	r1, [r7, #32]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f923 	bl	800580c <I2C_WaitOnTXEFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d107      	bne.n	80055e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e035      	b.n	8005654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	2200      	movs	r2, #0
 8005600:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f82b 	bl	8005660 <I2C_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800561e:	d103      	bne.n	8005628 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e013      	b.n	8005654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800562c:	897b      	ldrh	r3, [r7, #10]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	6a3a      	ldr	r2, [r7, #32]
 8005640:	4906      	ldr	r1, [pc, #24]	@ (800565c <I2C_RequestMemoryRead+0x1cc>)
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f863 	bl	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	00010002 	.word	0x00010002

08005660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005670:	e025      	b.n	80056be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d021      	beq.n	80056be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fc fcc3 	bl	8002004 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	f043 0220 	orr.w	r2, r3, #32
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e023      	b.n	8005706 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10d      	bne.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	43da      	mvns	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4013      	ands	r3, r2
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf0c      	ite	eq
 80056da:	2301      	moveq	r3, #1
 80056dc:	2300      	movne	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	e00c      	b.n	80056fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	43da      	mvns	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4013      	ands	r3, r2
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	429a      	cmp	r2, r3
 8005702:	d0b6      	beq.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800571c:	e051      	b.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800572c:	d123      	bne.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005746:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	f043 0204 	orr.w	r2, r3, #4
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e046      	b.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d021      	beq.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577e:	f7fc fc41 	bl	8002004 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d302      	bcc.n	8005794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d116      	bne.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e020      	b.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	0c1b      	lsrs	r3, r3, #16
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d10c      	bne.n	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	43da      	mvns	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4013      	ands	r3, r2
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bf14      	ite	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	2300      	moveq	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	e00b      	b.n	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	43da      	mvns	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4013      	ands	r3, r2
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d18d      	bne.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005818:	e02d      	b.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f8ce 	bl	80059bc <I2C_IsAcknowledgeFailed>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e02d      	b.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d021      	beq.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005832:	f7fc fbe7 	bl	8002004 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	d302      	bcc.n	8005848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d116      	bne.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	f043 0220 	orr.w	r2, r3, #32
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e007      	b.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005880:	2b80      	cmp	r3, #128	@ 0x80
 8005882:	d1ca      	bne.n	800581a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800589a:	e02d      	b.n	80058f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f88d 	bl	80059bc <I2C_IsAcknowledgeFailed>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e02d      	b.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d021      	beq.n	80058f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b4:	f7fc fba6 	bl	8002004 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d302      	bcc.n	80058ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d116      	bne.n	80058f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e007      	b.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b04      	cmp	r3, #4
 8005904:	d1ca      	bne.n	800589c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800591c:	e042      	b.n	80059a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b10      	cmp	r3, #16
 800592a:	d119      	bne.n	8005960 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0210 	mvn.w	r2, #16
 8005934:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e029      	b.n	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005960:	f7fc fb50 	bl	8002004 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d116      	bne.n	80059a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005990:	f043 0220 	orr.w	r2, r3, #32
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e007      	b.n	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ae:	2b40      	cmp	r3, #64	@ 0x40
 80059b0:	d1b5      	bne.n	800591e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d2:	d11b      	bne.n	8005a0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f8:	f043 0204 	orr.w	r2, r3, #4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e128      	b.n	8005c80 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a90      	ldr	r2, [pc, #576]	@ (8005c88 <HAL_I2S_Init+0x26c>)
 8005a46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fb ff55 	bl	80018f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a64:	f023 030f 	bic.w	r3, r3, #15
 8005a68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d060      	beq.n	8005b3c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a82:	2310      	movs	r3, #16
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e001      	b.n	8005a8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a88:	2320      	movs	r3, #32
 8005a8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d802      	bhi.n	8005a9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	f001 fe0a 	bl	80076b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005aa0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aaa:	d125      	bne.n	8005af8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	3305      	adds	r3, #5
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	e01f      	b.n	8005b16 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	461a      	mov	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	3305      	adds	r3, #5
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	e00e      	b.n	8005b16 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	3305      	adds	r3, #5
 8005b14:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4a5c      	ldr	r2, [pc, #368]	@ (8005c8c <HAL_I2S_Init+0x270>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	08db      	lsrs	r3, r3, #3
 8005b20:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	e003      	b.n	8005b44 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d902      	bls.n	8005b50 <HAL_I2S_Init+0x134>
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	2bff      	cmp	r3, #255	@ 0xff
 8005b4e:	d907      	bls.n	8005b60 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	f043 0210 	orr.w	r2, r3, #16
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e08f      	b.n	8005c80 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	ea42 0103 	orr.w	r1, r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b7e:	f023 030f 	bic.w	r3, r3, #15
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6851      	ldr	r1, [r2, #4]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6892      	ldr	r2, [r2, #8]
 8005b8a:	4311      	orrs	r1, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68d2      	ldr	r2, [r2, #12]
 8005b90:	4311      	orrs	r1, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6992      	ldr	r2, [r2, #24]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d161      	bne.n	8005c70 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a38      	ldr	r2, [pc, #224]	@ (8005c90 <HAL_I2S_Init+0x274>)
 8005bb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a37      	ldr	r2, [pc, #220]	@ (8005c94 <HAL_I2S_Init+0x278>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d101      	bne.n	8005bc0 <HAL_I2S_Init+0x1a4>
 8005bbc:	4b36      	ldr	r3, [pc, #216]	@ (8005c98 <HAL_I2S_Init+0x27c>)
 8005bbe:	e001      	b.n	8005bc4 <HAL_I2S_Init+0x1a8>
 8005bc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	4932      	ldr	r1, [pc, #200]	@ (8005c94 <HAL_I2S_Init+0x278>)
 8005bcc:	428a      	cmp	r2, r1
 8005bce:	d101      	bne.n	8005bd4 <HAL_I2S_Init+0x1b8>
 8005bd0:	4a31      	ldr	r2, [pc, #196]	@ (8005c98 <HAL_I2S_Init+0x27c>)
 8005bd2:	e001      	b.n	8005bd8 <HAL_I2S_Init+0x1bc>
 8005bd4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005bd8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005bdc:	f023 030f 	bic.w	r3, r3, #15
 8005be0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2b      	ldr	r2, [pc, #172]	@ (8005c94 <HAL_I2S_Init+0x278>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <HAL_I2S_Init+0x1d4>
 8005bec:	4b2a      	ldr	r3, [pc, #168]	@ (8005c98 <HAL_I2S_Init+0x27c>)
 8005bee:	e001      	b.n	8005bf4 <HAL_I2S_Init+0x1d8>
 8005bf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a25      	ldr	r2, [pc, #148]	@ (8005c94 <HAL_I2S_Init+0x278>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d101      	bne.n	8005c06 <HAL_I2S_Init+0x1ea>
 8005c02:	4b25      	ldr	r3, [pc, #148]	@ (8005c98 <HAL_I2S_Init+0x27c>)
 8005c04:	e001      	b.n	8005c0a <HAL_I2S_Init+0x1ee>
 8005c06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c16:	d003      	beq.n	8005c20 <HAL_I2S_Init+0x204>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d103      	bne.n	8005c28 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e001      	b.n	8005c2c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	b299      	uxth	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005c42:	4303      	orrs	r3, r0
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	430b      	orrs	r3, r1
 8005c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	897b      	ldrh	r3, [r7, #10]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c58:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8005c94 <HAL_I2S_Init+0x278>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d101      	bne.n	8005c68 <HAL_I2S_Init+0x24c>
 8005c64:	4b0c      	ldr	r3, [pc, #48]	@ (8005c98 <HAL_I2S_Init+0x27c>)
 8005c66:	e001      	b.n	8005c6c <HAL_I2S_Init+0x250>
 8005c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c6c:	897a      	ldrh	r2, [r7, #10]
 8005c6e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	08006521 	.word	0x08006521
 8005c8c:	cccccccd 	.word	0xcccccccd
 8005c90:	080066a9 	.word	0x080066a9
 8005c94:	40003800 	.word	0x40003800
 8005c98:	40003400 	.word	0x40003400

08005c9c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_I2S_Transmit_DMA+0x1a>
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e08e      	b.n	8005dd8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_I2S_Transmit_DMA+0x2e>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e086      	b.n	8005dd8 <HAL_I2S_Transmit_DMA+0x13c>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d005      	beq.n	8005cea <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e076      	b.n	8005dd8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d002      	beq.n	8005d16 <HAL_I2S_Transmit_DMA+0x7a>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b05      	cmp	r3, #5
 8005d14:	d10a      	bne.n	8005d2c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d2a:	e005      	b.n	8005d38 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	88fa      	ldrh	r2, [r7, #6]
 8005d30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	88fa      	ldrh	r2, [r7, #6]
 8005d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	4a28      	ldr	r2, [pc, #160]	@ (8005de0 <HAL_I2S_Transmit_DMA+0x144>)
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	4a27      	ldr	r2, [pc, #156]	@ (8005de4 <HAL_I2S_Transmit_DMA+0x148>)
 8005d46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4c:	4a26      	ldr	r2, [pc, #152]	@ (8005de8 <HAL_I2S_Transmit_DMA+0x14c>)
 8005d4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d58:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d60:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d66:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d68:	f7fc fb9a 	bl	80024a0 <HAL_DMA_Start_IT>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00f      	beq.n	8005d92 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d76:	f043 0208 	orr.w	r2, r3, #8
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d107      	bne.n	8005db0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005dae:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0202 	orr.w	r2, r2, #2
 8005dcc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	080063ff 	.word	0x080063ff
 8005de4:	080063bd 	.word	0x080063bd
 8005de8:	0800641b 	.word	0x0800641b

08005dec <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_I2S_DMAPause+0x18>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e04a      	b.n	8005e9a <HAL_I2S_DMAPause+0xae>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d108      	bne.n	8005e2a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0202 	bic.w	r2, r2, #2
 8005e26:	605a      	str	r2, [r3, #4]
 8005e28:	e032      	b.n	8005e90 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d108      	bne.n	8005e48 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	e023      	b.n	8005e90 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b05      	cmp	r3, #5
 8005e52:	d11d      	bne.n	8005e90 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0203 	bic.w	r2, r2, #3
 8005e62:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a0f      	ldr	r2, [pc, #60]	@ (8005ea8 <HAL_I2S_DMAPause+0xbc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2S_DMAPause+0x86>
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005eac <HAL_I2S_DMAPause+0xc0>)
 8005e70:	e001      	b.n	8005e76 <HAL_I2S_DMAPause+0x8a>
 8005e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	490a      	ldr	r1, [pc, #40]	@ (8005ea8 <HAL_I2S_DMAPause+0xbc>)
 8005e7e:	428b      	cmp	r3, r1
 8005e80:	d101      	bne.n	8005e86 <HAL_I2S_DMAPause+0x9a>
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <HAL_I2S_DMAPause+0xc0>)
 8005e84:	e001      	b.n	8005e8a <HAL_I2S_DMAPause+0x9e>
 8005e86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e8a:	f022 0203 	bic.w	r2, r2, #3
 8005e8e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40003800 	.word	0x40003800
 8005eac:	40003400 	.word	0x40003400

08005eb0 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_I2S_DMAResume+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e07d      	b.n	8005fc4 <HAL_I2S_DMAResume+0x114>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d108      	bne.n	8005eee <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0202 	orr.w	r2, r2, #2
 8005eea:	605a      	str	r2, [r3, #4]
 8005eec:	e056      	b.n	8005f9c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d108      	bne.n	8005f0c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0201 	orr.w	r2, r2, #1
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	e047      	b.n	8005f9c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d141      	bne.n	8005f9c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0203 	orr.w	r2, r2, #3
 8005f26:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a28      	ldr	r2, [pc, #160]	@ (8005fd0 <HAL_I2S_DMAResume+0x120>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <HAL_I2S_DMAResume+0x86>
 8005f32:	4b28      	ldr	r3, [pc, #160]	@ (8005fd4 <HAL_I2S_DMAResume+0x124>)
 8005f34:	e001      	b.n	8005f3a <HAL_I2S_DMAResume+0x8a>
 8005f36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4923      	ldr	r1, [pc, #140]	@ (8005fd0 <HAL_I2S_DMAResume+0x120>)
 8005f42:	428b      	cmp	r3, r1
 8005f44:	d101      	bne.n	8005f4a <HAL_I2S_DMAResume+0x9a>
 8005f46:	4b23      	ldr	r3, [pc, #140]	@ (8005fd4 <HAL_I2S_DMAResume+0x124>)
 8005f48:	e001      	b.n	8005f4e <HAL_I2S_DMAResume+0x9e>
 8005f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f4e:	f042 0203 	orr.w	r2, r2, #3
 8005f52:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <HAL_I2S_DMAResume+0x120>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2S_DMAResume+0xb2>
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd4 <HAL_I2S_DMAResume+0x124>)
 8005f60:	e001      	b.n	8005f66 <HAL_I2S_DMAResume+0xb6>
 8005f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d115      	bne.n	8005f9c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a16      	ldr	r2, [pc, #88]	@ (8005fd0 <HAL_I2S_DMAResume+0x120>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d101      	bne.n	8005f7e <HAL_I2S_DMAResume+0xce>
 8005f7a:	4b16      	ldr	r3, [pc, #88]	@ (8005fd4 <HAL_I2S_DMAResume+0x124>)
 8005f7c:	e001      	b.n	8005f82 <HAL_I2S_DMAResume+0xd2>
 8005f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4911      	ldr	r1, [pc, #68]	@ (8005fd0 <HAL_I2S_DMAResume+0x120>)
 8005f8a:	428b      	cmp	r3, r1
 8005f8c:	d101      	bne.n	8005f92 <HAL_I2S_DMAResume+0xe2>
 8005f8e:	4b11      	ldr	r3, [pc, #68]	@ (8005fd4 <HAL_I2S_DMAResume+0x124>)
 8005f90:	e001      	b.n	8005f96 <HAL_I2S_DMAResume+0xe6>
 8005f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f9a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d107      	bne.n	8005fba <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fb8:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	40003800 	.word	0x40003800
 8005fd4:	40003400 	.word	0x40003400

08005fd8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fec:	d004      	beq.n	8005ff8 <HAL_I2S_DMAStop+0x20>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 80d1 	bne.w	800619a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00f      	beq.n	8006020 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	4618      	mov	r0, r3
 8006006:	f7fc faa3 	bl	8002550 <HAL_DMA_Abort>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006014:	f043 0208 	orr.w	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006020:	2364      	movs	r3, #100	@ 0x64
 8006022:	2201      	movs	r2, #1
 8006024:	2102      	movs	r1, #2
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fb04 	bl	8006634 <I2S_WaitFlagStateUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800604a:	2364      	movs	r3, #100	@ 0x64
 800604c:	2200      	movs	r2, #0
 800604e:	2180      	movs	r1, #128	@ 0x80
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 faef 	bl	8006634 <I2S_WaitFlagStateUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006060:	f043 0201 	orr.w	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006082:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0202 	bic.w	r2, r2, #2
 80060a0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	f040 8165 	bne.w	800637a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00f      	beq.n	80060d8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fc fa47 	bl	8002550 <HAL_DMA_Abort>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060cc:	f043 0208 	orr.w	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a8a      	ldr	r2, [pc, #552]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <HAL_I2S_DMAStop+0x10e>
 80060e2:	4b8a      	ldr	r3, [pc, #552]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 80060e4:	e001      	b.n	80060ea <HAL_I2S_DMAStop+0x112>
 80060e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060ea:	69da      	ldr	r2, [r3, #28]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4985      	ldr	r1, [pc, #532]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 80060f2:	428b      	cmp	r3, r1
 80060f4:	d101      	bne.n	80060fa <HAL_I2S_DMAStop+0x122>
 80060f6:	4b85      	ldr	r3, [pc, #532]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 80060f8:	e001      	b.n	80060fe <HAL_I2S_DMAStop+0x126>
 80060fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006102:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a7e      	ldr	r2, [pc, #504]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d101      	bne.n	8006116 <HAL_I2S_DMAStop+0x13e>
 8006112:	4b7e      	ldr	r3, [pc, #504]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 8006114:	e001      	b.n	800611a <HAL_I2S_DMAStop+0x142>
 8006116:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a79      	ldr	r2, [pc, #484]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d101      	bne.n	800612c <HAL_I2S_DMAStop+0x154>
 8006128:	4b78      	ldr	r3, [pc, #480]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 800612a:	e001      	b.n	8006130 <HAL_I2S_DMAStop+0x158>
 800612c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a73      	ldr	r2, [pc, #460]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d101      	bne.n	8006144 <HAL_I2S_DMAStop+0x16c>
 8006140:	4b72      	ldr	r3, [pc, #456]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 8006142:	e001      	b.n	8006148 <HAL_I2S_DMAStop+0x170>
 8006144:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	496e      	ldr	r1, [pc, #440]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 8006150:	428b      	cmp	r3, r1
 8006152:	d101      	bne.n	8006158 <HAL_I2S_DMAStop+0x180>
 8006154:	4b6d      	ldr	r3, [pc, #436]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 8006156:	e001      	b.n	800615c <HAL_I2S_DMAStop+0x184>
 8006158:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10c      	bne.n	8006184 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006182:	e0fa      	b.n	800637a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a5f      	ldr	r2, [pc, #380]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d101      	bne.n	8006192 <HAL_I2S_DMAStop+0x1ba>
 800618e:	4b5f      	ldr	r3, [pc, #380]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 8006190:	e001      	b.n	8006196 <HAL_I2S_DMAStop+0x1be>
 8006192:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006196:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006198:	e0ef      	b.n	800637a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061a2:	d005      	beq.n	80061b0 <HAL_I2S_DMAStop+0x1d8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ac:	f040 80e5 	bne.w	800637a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00f      	beq.n	80061d8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fc f9c7 	bl	8002550 <HAL_DMA_Abort>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061cc:	f043 0208 	orr.w	r2, r3, #8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	f040 809a 	bne.w	800631a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00f      	beq.n	800620e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fc f9ac 	bl	8002550 <HAL_DMA_Abort>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	f043 0208 	orr.w	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800620e:	f7fb fef9 	bl	8002004 <HAL_GetTick>
 8006212:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006214:	e012      	b.n	800623c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006216:	f7fb fef5 	bl	8002004 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b64      	cmp	r3, #100	@ 0x64
 8006222:	d90b      	bls.n	800623c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a31      	ldr	r2, [pc, #196]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_I2S_DMAStop+0x272>
 8006246:	4b31      	ldr	r3, [pc, #196]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 8006248:	e001      	b.n	800624e <HAL_I2S_DMAStop+0x276>
 800624a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b02      	cmp	r3, #2
 8006256:	d1de      	bne.n	8006216 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006258:	e012      	b.n	8006280 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800625a:	f7fb fed3 	bl	8002004 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b64      	cmp	r3, #100	@ 0x64
 8006266:	d90b      	bls.n	8006280 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626c:	f043 0201 	orr.w	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a20      	ldr	r2, [pc, #128]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <HAL_I2S_DMAStop+0x2b6>
 800628a:	4b20      	ldr	r3, [pc, #128]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 800628c:	e001      	b.n	8006292 <HAL_I2S_DMAStop+0x2ba>
 800628e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006298:	2b80      	cmp	r3, #128	@ 0x80
 800629a:	d0de      	beq.n	800625a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a19      	ldr	r2, [pc, #100]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d101      	bne.n	80062aa <HAL_I2S_DMAStop+0x2d2>
 80062a6:	4b19      	ldr	r3, [pc, #100]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 80062a8:	e001      	b.n	80062ae <HAL_I2S_DMAStop+0x2d6>
 80062aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4914      	ldr	r1, [pc, #80]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 80062b6:	428b      	cmp	r3, r1
 80062b8:	d101      	bne.n	80062be <HAL_I2S_DMAStop+0x2e6>
 80062ba:	4b14      	ldr	r3, [pc, #80]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 80062bc:	e001      	b.n	80062c2 <HAL_I2S_DMAStop+0x2ea>
 80062be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062c6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_I2S_DMAStop+0x302>
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 80062d8:	e001      	b.n	80062de <HAL_I2S_DMAStop+0x306>
 80062da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a07      	ldr	r2, [pc, #28]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d101      	bne.n	80062f2 <HAL_I2S_DMAStop+0x31a>
 80062ee:	4b07      	ldr	r3, [pc, #28]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 80062f0:	e001      	b.n	80062f6 <HAL_I2S_DMAStop+0x31e>
 80062f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4902      	ldr	r1, [pc, #8]	@ (8006308 <HAL_I2S_DMAStop+0x330>)
 80062fe:	428b      	cmp	r3, r1
 8006300:	d106      	bne.n	8006310 <HAL_I2S_DMAStop+0x338>
 8006302:	4b02      	ldr	r3, [pc, #8]	@ (800630c <HAL_I2S_DMAStop+0x334>)
 8006304:	e006      	b.n	8006314 <HAL_I2S_DMAStop+0x33c>
 8006306:	bf00      	nop
 8006308:	40003800 	.word	0x40003800
 800630c:	40003400 	.word	0x40003400
 8006310:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006314:	f022 0202 	bic.w	r2, r2, #2
 8006318:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69da      	ldr	r2, [r3, #28]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006328:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0201 	bic.w	r2, r2, #1
 800634e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006358:	d10c      	bne.n	8006374 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e002      	b.n	800637a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8006382:	7ffb      	ldrb	r3, [r7, #31]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ae:	b2db      	uxtb	r3, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10e      	bne.n	80063f0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0202 	bic.w	r2, r2, #2
 80063e0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7fa f94d 	bl	8000690 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7fa f951 	bl	80006b4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006426:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0203 	bic.w	r2, r2, #3
 8006436:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006450:	f043 0208 	orr.w	r2, r3, #8
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7fa fa9b 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	881a      	ldrh	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	1c9a      	adds	r2, r3, #2
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10e      	bne.n	80064ba <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7fa f8eb 	bl	8000690 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	b292      	uxth	r2, r2
 80064d6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	1c9a      	adds	r2, r3, #2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10e      	bne.n	8006518 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006508:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff3a 	bl	800638c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b04      	cmp	r3, #4
 800653a:	d13a      	bne.n	80065b2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b01      	cmp	r3, #1
 8006544:	d109      	bne.n	800655a <I2S_IRQHandler+0x3a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006550:	2b40      	cmp	r3, #64	@ 0x40
 8006552:	d102      	bne.n	800655a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ffb4 	bl	80064c2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006560:	2b40      	cmp	r3, #64	@ 0x40
 8006562:	d126      	bne.n	80065b2 <I2S_IRQHandler+0x92>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b20      	cmp	r3, #32
 8006570:	d11f      	bne.n	80065b2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006580:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a4:	f043 0202 	orr.w	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fa f9f1 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d136      	bne.n	800662c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d109      	bne.n	80065dc <I2S_IRQHandler+0xbc>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d102      	bne.n	80065dc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff ff45 	bl	8006466 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d122      	bne.n	800662c <I2S_IRQHandler+0x10c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d11b      	bne.n	800662c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006602:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f043 0204 	orr.w	r2, r3, #4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fa f9b4 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800662c:	bf00      	nop
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006644:	f7fb fcde 	bl	8002004 <HAL_GetTick>
 8006648:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800664a:	e018      	b.n	800667e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d014      	beq.n	800667e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006654:	f7fb fcd6 	bl	8002004 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d902      	bls.n	800666a <I2S_WaitFlagStateUntilTimeout+0x36>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e00f      	b.n	800669e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	429a      	cmp	r2, r3
 800669a:	d1d7      	bne.n	800664c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a92      	ldr	r2, [pc, #584]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80066c2:	4b92      	ldr	r3, [pc, #584]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066c4:	e001      	b.n	80066ca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80066c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a8b      	ldr	r2, [pc, #556]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d101      	bne.n	80066e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80066e0:	4b8a      	ldr	r3, [pc, #552]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066e2:	e001      	b.n	80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80066e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f4:	d004      	beq.n	8006700 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f040 8099 	bne.w	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d107      	bne.n	800671a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f925 	bl	8006964 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b01      	cmp	r3, #1
 8006722:	d107      	bne.n	8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f9c8 	bl	8006ac4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673a:	2b40      	cmp	r3, #64	@ 0x40
 800673c:	d13a      	bne.n	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d035      	beq.n	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a6e      	ldr	r2, [pc, #440]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d101      	bne.n	8006756 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006752:	4b6e      	ldr	r3, [pc, #440]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006754:	e001      	b.n	800675a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006756:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4969      	ldr	r1, [pc, #420]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006762:	428b      	cmp	r3, r1
 8006764:	d101      	bne.n	800676a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006766:	4b69      	ldr	r3, [pc, #420]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006768:	e001      	b.n	800676e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800676a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800676e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006772:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006782:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	f043 0202 	orr.w	r2, r3, #2
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fa f8f0 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	f040 80c3 	bne.w	8006946 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80bd 	beq.w	8006946 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80067da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a49      	ldr	r2, [pc, #292]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80067e6:	4b49      	ldr	r3, [pc, #292]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067e8:	e001      	b.n	80067ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80067ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4944      	ldr	r1, [pc, #272]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067f6:	428b      	cmp	r3, r1
 80067f8:	d101      	bne.n	80067fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80067fa:	4b44      	ldr	r3, [pc, #272]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067fc:	e001      	b.n	8006802 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80067fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006802:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006806:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006808:	2300      	movs	r3, #0
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f043 0204 	orr.w	r2, r3, #4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa f8b2 	bl	8000994 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006830:	e089      	b.n	8006946 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b02      	cmp	r3, #2
 800683a:	d107      	bne.n	800684c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8be 	bl	80069c8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b01      	cmp	r3, #1
 8006854:	d107      	bne.n	8006866 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f8fd 	bl	8006a60 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686c:	2b40      	cmp	r3, #64	@ 0x40
 800686e:	d12f      	bne.n	80068d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02a      	beq.n	80068d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006888:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1e      	ldr	r2, [pc, #120]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d101      	bne.n	8006898 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006894:	4b1d      	ldr	r3, [pc, #116]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006896:	e001      	b.n	800689c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006898:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4919      	ldr	r1, [pc, #100]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068a4:	428b      	cmp	r3, r1
 80068a6:	d101      	bne.n	80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80068a8:	4b18      	ldr	r3, [pc, #96]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068aa:	e001      	b.n	80068b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80068ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c2:	f043 0202 	orr.w	r2, r3, #2
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fa f862 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d136      	bne.n	8006948 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d031      	beq.n	8006948 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a07      	ldr	r2, [pc, #28]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80068ee:	4b07      	ldr	r3, [pc, #28]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068f0:	e001      	b.n	80068f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80068f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4902      	ldr	r1, [pc, #8]	@ (8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068fe:	428b      	cmp	r3, r1
 8006900:	d106      	bne.n	8006910 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006902:	4b02      	ldr	r3, [pc, #8]	@ (800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006904:	e006      	b.n	8006914 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006906:	bf00      	nop
 8006908:	40003800 	.word	0x40003800
 800690c:	40003400 	.word	0x40003400
 8006910:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006914:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006918:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006928:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f043 0204 	orr.w	r2, r3, #4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fa f828 	bl	8000994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006944:	e000      	b.n	8006948 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006946:	bf00      	nop
}
 8006948:	bf00      	nop
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	1c99      	adds	r1, r3, #2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6251      	str	r1, [r2, #36]	@ 0x24
 8006976:	881a      	ldrh	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d113      	bne.n	80069be <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ffc9 	bl	8006950 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	1c99      	adds	r1, r3, #2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6251      	str	r1, [r2, #36]	@ 0x24
 80069da:	8819      	ldrh	r1, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <I2SEx_TxISR_I2SExt+0x90>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d101      	bne.n	80069ea <I2SEx_TxISR_I2SExt+0x22>
 80069e6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <I2SEx_TxISR_I2SExt+0x94>)
 80069e8:	e001      	b.n	80069ee <I2SEx_TxISR_I2SExt+0x26>
 80069ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069ee:	460a      	mov	r2, r1
 80069f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d121      	bne.n	8006a4e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a12      	ldr	r2, [pc, #72]	@ (8006a58 <I2SEx_TxISR_I2SExt+0x90>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <I2SEx_TxISR_I2SExt+0x50>
 8006a14:	4b11      	ldr	r3, [pc, #68]	@ (8006a5c <I2SEx_TxISR_I2SExt+0x94>)
 8006a16:	e001      	b.n	8006a1c <I2SEx_TxISR_I2SExt+0x54>
 8006a18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	490d      	ldr	r1, [pc, #52]	@ (8006a58 <I2SEx_TxISR_I2SExt+0x90>)
 8006a24:	428b      	cmp	r3, r1
 8006a26:	d101      	bne.n	8006a2c <I2SEx_TxISR_I2SExt+0x64>
 8006a28:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <I2SEx_TxISR_I2SExt+0x94>)
 8006a2a:	e001      	b.n	8006a30 <I2SEx_TxISR_I2SExt+0x68>
 8006a2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff ff81 	bl	8006950 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40003800 	.word	0x40003800
 8006a5c:	40003400 	.word	0x40003400

08006a60 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68d8      	ldr	r0, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	1c99      	adds	r1, r3, #2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006a78:	b282      	uxth	r2, r0
 8006a7a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d113      	bne.n	8006abc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006aa2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff ff4a 	bl	8006950 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a20      	ldr	r2, [pc, #128]	@ (8006b54 <I2SEx_RxISR_I2SExt+0x90>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d101      	bne.n	8006ada <I2SEx_RxISR_I2SExt+0x16>
 8006ad6:	4b20      	ldr	r3, [pc, #128]	@ (8006b58 <I2SEx_RxISR_I2SExt+0x94>)
 8006ad8:	e001      	b.n	8006ade <I2SEx_RxISR_I2SExt+0x1a>
 8006ada:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ade:	68d8      	ldr	r0, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	1c99      	adds	r1, r3, #2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006aea:	b282      	uxth	r2, r0
 8006aec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d121      	bne.n	8006b4a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a12      	ldr	r2, [pc, #72]	@ (8006b54 <I2SEx_RxISR_I2SExt+0x90>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d101      	bne.n	8006b14 <I2SEx_RxISR_I2SExt+0x50>
 8006b10:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <I2SEx_RxISR_I2SExt+0x94>)
 8006b12:	e001      	b.n	8006b18 <I2SEx_RxISR_I2SExt+0x54>
 8006b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	490d      	ldr	r1, [pc, #52]	@ (8006b54 <I2SEx_RxISR_I2SExt+0x90>)
 8006b20:	428b      	cmp	r3, r1
 8006b22:	d101      	bne.n	8006b28 <I2SEx_RxISR_I2SExt+0x64>
 8006b24:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <I2SEx_RxISR_I2SExt+0x94>)
 8006b26:	e001      	b.n	8006b2c <I2SEx_RxISR_I2SExt+0x68>
 8006b28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b30:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ff03 	bl	8006950 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40003800 	.word	0x40003800
 8006b58:	40003400 	.word	0x40003400

08006b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e25e      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d075      	beq.n	8006c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b7a:	4b88      	ldr	r3, [pc, #544]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d00c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b86:	4b85      	ldr	r3, [pc, #532]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d112      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b92:	4b82      	ldr	r3, [pc, #520]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b9e:	d10b      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d05b      	beq.n	8006c64 <HAL_RCC_OscConfig+0x108>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d157      	bne.n	8006c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e239      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc0:	d106      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x74>
 8006bc2:	4b76      	ldr	r3, [pc, #472]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a75      	ldr	r2, [pc, #468]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e01d      	b.n	8006c0c <HAL_RCC_OscConfig+0xb0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x98>
 8006bda:	4b70      	ldr	r3, [pc, #448]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a6f      	ldr	r2, [pc, #444]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4b6d      	ldr	r3, [pc, #436]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a6c      	ldr	r2, [pc, #432]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e00b      	b.n	8006c0c <HAL_RCC_OscConfig+0xb0>
 8006bf4:	4b69      	ldr	r3, [pc, #420]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a68      	ldr	r2, [pc, #416]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4b66      	ldr	r3, [pc, #408]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a65      	ldr	r2, [pc, #404]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d013      	beq.n	8006c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c14:	f7fb f9f6 	bl	8002004 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c1c:	f7fb f9f2 	bl	8002004 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b64      	cmp	r3, #100	@ 0x64
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e1fe      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0xc0>
 8006c3a:	e014      	b.n	8006c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fb f9e2 	bl	8002004 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c44:	f7fb f9de 	bl	8002004 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	@ 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e1ea      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c56:	4b51      	ldr	r3, [pc, #324]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0xe8>
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d063      	beq.n	8006d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c72:	4b4a      	ldr	r3, [pc, #296]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 030c 	and.w	r3, r3, #12
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c7e:	4b47      	ldr	r3, [pc, #284]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d11c      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c8a:	4b44      	ldr	r3, [pc, #272]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d116      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c96:	4b41      	ldr	r3, [pc, #260]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_RCC_OscConfig+0x152>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d001      	beq.n	8006cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e1be      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cae:	4b3b      	ldr	r3, [pc, #236]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4937      	ldr	r1, [pc, #220]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc2:	e03a      	b.n	8006d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d020      	beq.n	8006d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ccc:	4b34      	ldr	r3, [pc, #208]	@ (8006da0 <HAL_RCC_OscConfig+0x244>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd2:	f7fb f997 	bl	8002004 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cda:	f7fb f993 	bl	8002004 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e19f      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cec:	4b2b      	ldr	r3, [pc, #172]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf8:	4b28      	ldr	r3, [pc, #160]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4925      	ldr	r1, [pc, #148]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	600b      	str	r3, [r1, #0]
 8006d0c:	e015      	b.n	8006d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d0e:	4b24      	ldr	r3, [pc, #144]	@ (8006da0 <HAL_RCC_OscConfig+0x244>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fb f976 	bl	8002004 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d1c:	f7fb f972 	bl	8002004 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e17e      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d036      	beq.n	8006db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d016      	beq.n	8006d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d4e:	4b15      	ldr	r3, [pc, #84]	@ (8006da4 <HAL_RCC_OscConfig+0x248>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fb f956 	bl	8002004 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d5c:	f7fb f952 	bl	8002004 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e15e      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <HAL_RCC_OscConfig+0x240>)
 8006d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0x200>
 8006d7a:	e01b      	b.n	8006db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d7c:	4b09      	ldr	r3, [pc, #36]	@ (8006da4 <HAL_RCC_OscConfig+0x248>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d82:	f7fb f93f 	bl	8002004 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d88:	e00e      	b.n	8006da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d8a:	f7fb f93b 	bl	8002004 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d907      	bls.n	8006da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e147      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	42470000 	.word	0x42470000
 8006da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006da8:	4b88      	ldr	r3, [pc, #544]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1ea      	bne.n	8006d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8097 	beq.w	8006ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dc6:	4b81      	ldr	r3, [pc, #516]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10f      	bne.n	8006df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dda:	4a7c      	ldr	r2, [pc, #496]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006de2:	4b7a      	ldr	r3, [pc, #488]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dea:	60bb      	str	r3, [r7, #8]
 8006dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dee:	2301      	movs	r3, #1
 8006df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df2:	4b77      	ldr	r3, [pc, #476]	@ (8006fd0 <HAL_RCC_OscConfig+0x474>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d118      	bne.n	8006e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dfe:	4b74      	ldr	r3, [pc, #464]	@ (8006fd0 <HAL_RCC_OscConfig+0x474>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a73      	ldr	r2, [pc, #460]	@ (8006fd0 <HAL_RCC_OscConfig+0x474>)
 8006e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e0a:	f7fb f8fb 	bl	8002004 <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e12:	f7fb f8f7 	bl	8002004 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e103      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e24:	4b6a      	ldr	r3, [pc, #424]	@ (8006fd0 <HAL_RCC_OscConfig+0x474>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f0      	beq.n	8006e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d106      	bne.n	8006e46 <HAL_RCC_OscConfig+0x2ea>
 8006e38:	4b64      	ldr	r3, [pc, #400]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3c:	4a63      	ldr	r2, [pc, #396]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e3e:	f043 0301 	orr.w	r3, r3, #1
 8006e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e44:	e01c      	b.n	8006e80 <HAL_RCC_OscConfig+0x324>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	d10c      	bne.n	8006e68 <HAL_RCC_OscConfig+0x30c>
 8006e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e52:	4a5e      	ldr	r2, [pc, #376]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e54:	f043 0304 	orr.w	r3, r3, #4
 8006e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e66:	e00b      	b.n	8006e80 <HAL_RCC_OscConfig+0x324>
 8006e68:	4b58      	ldr	r3, [pc, #352]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6c:	4a57      	ldr	r2, [pc, #348]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e6e:	f023 0301 	bic.w	r3, r3, #1
 8006e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e74:	4b55      	ldr	r3, [pc, #340]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e78:	4a54      	ldr	r2, [pc, #336]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006e7a:	f023 0304 	bic.w	r3, r3, #4
 8006e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d015      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e88:	f7fb f8bc 	bl	8002004 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e8e:	e00a      	b.n	8006ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fb f8b8 	bl	8002004 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e0c2      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea6:	4b49      	ldr	r3, [pc, #292]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0ee      	beq.n	8006e90 <HAL_RCC_OscConfig+0x334>
 8006eb2:	e014      	b.n	8006ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eb4:	f7fb f8a6 	bl	8002004 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eba:	e00a      	b.n	8006ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ebc:	f7fb f8a2 	bl	8002004 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e0ac      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1ee      	bne.n	8006ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d105      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ee4:	4b39      	ldr	r3, [pc, #228]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee8:	4a38      	ldr	r2, [pc, #224]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8098 	beq.w	800702a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006efa:	4b34      	ldr	r3, [pc, #208]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d05c      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d141      	bne.n	8006f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0e:	4b31      	ldr	r3, [pc, #196]	@ (8006fd4 <HAL_RCC_OscConfig+0x478>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f14:	f7fb f876 	bl	8002004 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fb f872 	bl	8002004 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e07e      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69da      	ldr	r2, [r3, #28]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	019b      	lsls	r3, r3, #6
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	3b01      	subs	r3, #1
 8006f54:	041b      	lsls	r3, r3, #16
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5c:	061b      	lsls	r3, r3, #24
 8006f5e:	491b      	ldr	r1, [pc, #108]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f64:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd4 <HAL_RCC_OscConfig+0x478>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6a:	f7fb f84b 	bl	8002004 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f72:	f7fb f847 	bl	8002004 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e053      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f84:	4b11      	ldr	r3, [pc, #68]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0f0      	beq.n	8006f72 <HAL_RCC_OscConfig+0x416>
 8006f90:	e04b      	b.n	800702a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f92:	4b10      	ldr	r3, [pc, #64]	@ (8006fd4 <HAL_RCC_OscConfig+0x478>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f98:	f7fb f834 	bl	8002004 <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa0:	f7fb f830 	bl	8002004 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e03c      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb2:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <HAL_RCC_OscConfig+0x470>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x444>
 8006fbe:	e034      	b.n	800702a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e02f      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40007000 	.word	0x40007000
 8006fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fd8:	4b16      	ldr	r3, [pc, #88]	@ (8007034 <HAL_RCC_OscConfig+0x4d8>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d11c      	bne.n	8007026 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d115      	bne.n	8007026 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007000:	4013      	ands	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007006:	4293      	cmp	r3, r2
 8007008:	d10d      	bne.n	8007026 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d106      	bne.n	8007026 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007022:	429a      	cmp	r2, r3
 8007024:	d001      	beq.n	800702a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40023800 	.word	0x40023800

08007038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e0cc      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800704c:	4b68      	ldr	r3, [pc, #416]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d90c      	bls.n	8007074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705a:	4b65      	ldr	r3, [pc, #404]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007062:	4b63      	ldr	r3, [pc, #396]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d001      	beq.n	8007074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0b8      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800708c:	4b59      	ldr	r3, [pc, #356]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4a58      	ldr	r2, [pc, #352]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070a4:	4b53      	ldr	r3, [pc, #332]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4a52      	ldr	r2, [pc, #328]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80070ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b0:	4b50      	ldr	r3, [pc, #320]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	494d      	ldr	r1, [pc, #308]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d044      	beq.n	8007158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d107      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d6:	4b47      	ldr	r3, [pc, #284]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d119      	bne.n	8007116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e07f      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d003      	beq.n	80070f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d107      	bne.n	8007106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f6:	4b3f      	ldr	r3, [pc, #252]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d109      	bne.n	8007116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e06f      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007106:	4b3b      	ldr	r3, [pc, #236]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e067      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007116:	4b37      	ldr	r3, [pc, #220]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f023 0203 	bic.w	r2, r3, #3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	4934      	ldr	r1, [pc, #208]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	4313      	orrs	r3, r2
 8007126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007128:	f7fa ff6c 	bl	8002004 <HAL_GetTick>
 800712c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712e:	e00a      	b.n	8007146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007130:	f7fa ff68 	bl	8002004 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e04f      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007146:	4b2b      	ldr	r3, [pc, #172]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 020c 	and.w	r2, r3, #12
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	429a      	cmp	r2, r3
 8007156:	d1eb      	bne.n	8007130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007158:	4b25      	ldr	r3, [pc, #148]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d20c      	bcs.n	8007180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007166:	4b22      	ldr	r3, [pc, #136]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800716e:	4b20      	ldr	r3, [pc, #128]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e032      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800718c:	4b19      	ldr	r3, [pc, #100]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4916      	ldr	r1, [pc, #88]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071aa:	4b12      	ldr	r3, [pc, #72]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	490e      	ldr	r1, [pc, #56]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071be:	f000 f821 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	091b      	lsrs	r3, r3, #4
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	490a      	ldr	r1, [pc, #40]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c0>)
 80071d0:	5ccb      	ldrb	r3, [r1, r3]
 80071d2:	fa22 f303 	lsr.w	r3, r2, r3
 80071d6:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <HAL_RCC_ClockConfig+0x1c4>)
 80071d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071da:	4b09      	ldr	r3, [pc, #36]	@ (8007200 <HAL_RCC_ClockConfig+0x1c8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fa fecc 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40023c00 	.word	0x40023c00
 80071f4:	40023800 	.word	0x40023800
 80071f8:	0800f634 	.word	0x0800f634
 80071fc:	20000038 	.word	0x20000038
 8007200:	20000040 	.word	0x20000040

08007204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b094      	sub	sp, #80	@ 0x50
 800720a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007210:	2300      	movs	r3, #0
 8007212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007214:	2300      	movs	r3, #0
 8007216:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800721c:	4b79      	ldr	r3, [pc, #484]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 030c 	and.w	r3, r3, #12
 8007224:	2b08      	cmp	r3, #8
 8007226:	d00d      	beq.n	8007244 <HAL_RCC_GetSysClockFreq+0x40>
 8007228:	2b08      	cmp	r3, #8
 800722a:	f200 80e1 	bhi.w	80073f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x34>
 8007232:	2b04      	cmp	r3, #4
 8007234:	d003      	beq.n	800723e <HAL_RCC_GetSysClockFreq+0x3a>
 8007236:	e0db      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007238:	4b73      	ldr	r3, [pc, #460]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x204>)
 800723a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800723c:	e0db      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800723e:	4b73      	ldr	r3, [pc, #460]	@ (800740c <HAL_RCC_GetSysClockFreq+0x208>)
 8007240:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007242:	e0d8      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007244:	4b6f      	ldr	r3, [pc, #444]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800724c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800724e:	4b6d      	ldr	r3, [pc, #436]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d063      	beq.n	8007322 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725a:	4b6a      	ldr	r3, [pc, #424]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	099b      	lsrs	r3, r3, #6
 8007260:	2200      	movs	r2, #0
 8007262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007264:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726c:	633b      	str	r3, [r7, #48]	@ 0x30
 800726e:	2300      	movs	r3, #0
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
 8007272:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007276:	4622      	mov	r2, r4
 8007278:	462b      	mov	r3, r5
 800727a:	f04f 0000 	mov.w	r0, #0
 800727e:	f04f 0100 	mov.w	r1, #0
 8007282:	0159      	lsls	r1, r3, #5
 8007284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007288:	0150      	lsls	r0, r2, #5
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4621      	mov	r1, r4
 8007290:	1a51      	subs	r1, r2, r1
 8007292:	6139      	str	r1, [r7, #16]
 8007294:	4629      	mov	r1, r5
 8007296:	eb63 0301 	sbc.w	r3, r3, r1
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072a8:	4659      	mov	r1, fp
 80072aa:	018b      	lsls	r3, r1, #6
 80072ac:	4651      	mov	r1, sl
 80072ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072b2:	4651      	mov	r1, sl
 80072b4:	018a      	lsls	r2, r1, #6
 80072b6:	4651      	mov	r1, sl
 80072b8:	ebb2 0801 	subs.w	r8, r2, r1
 80072bc:	4659      	mov	r1, fp
 80072be:	eb63 0901 	sbc.w	r9, r3, r1
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072d6:	4690      	mov	r8, r2
 80072d8:	4699      	mov	r9, r3
 80072da:	4623      	mov	r3, r4
 80072dc:	eb18 0303 	adds.w	r3, r8, r3
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	462b      	mov	r3, r5
 80072e4:	eb49 0303 	adc.w	r3, r9, r3
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072f6:	4629      	mov	r1, r5
 80072f8:	024b      	lsls	r3, r1, #9
 80072fa:	4621      	mov	r1, r4
 80072fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007300:	4621      	mov	r1, r4
 8007302:	024a      	lsls	r2, r1, #9
 8007304:	4610      	mov	r0, r2
 8007306:	4619      	mov	r1, r3
 8007308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800730a:	2200      	movs	r2, #0
 800730c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800730e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007314:	f7f8 ff60 	bl	80001d8 <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4613      	mov	r3, r2
 800731e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007320:	e058      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007322:	4b38      	ldr	r3, [pc, #224]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	2200      	movs	r2, #0
 800732a:	4618      	mov	r0, r3
 800732c:	4611      	mov	r1, r2
 800732e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	2300      	movs	r3, #0
 8007336:	627b      	str	r3, [r7, #36]	@ 0x24
 8007338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	f04f 0000 	mov.w	r0, #0
 8007344:	f04f 0100 	mov.w	r1, #0
 8007348:	0159      	lsls	r1, r3, #5
 800734a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800734e:	0150      	lsls	r0, r2, #5
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4641      	mov	r1, r8
 8007356:	ebb2 0a01 	subs.w	sl, r2, r1
 800735a:	4649      	mov	r1, r9
 800735c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800736c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007370:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007374:	ebb2 040a 	subs.w	r4, r2, sl
 8007378:	eb63 050b 	sbc.w	r5, r3, fp
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	00eb      	lsls	r3, r5, #3
 8007386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800738a:	00e2      	lsls	r2, r4, #3
 800738c:	4614      	mov	r4, r2
 800738e:	461d      	mov	r5, r3
 8007390:	4643      	mov	r3, r8
 8007392:	18e3      	adds	r3, r4, r3
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	464b      	mov	r3, r9
 8007398:	eb45 0303 	adc.w	r3, r5, r3
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073aa:	4629      	mov	r1, r5
 80073ac:	028b      	lsls	r3, r1, #10
 80073ae:	4621      	mov	r1, r4
 80073b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073b4:	4621      	mov	r1, r4
 80073b6:	028a      	lsls	r2, r1, #10
 80073b8:	4610      	mov	r0, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073be:	2200      	movs	r2, #0
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	61fa      	str	r2, [r7, #28]
 80073c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073c8:	f7f8 ff06 	bl	80001d8 <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4613      	mov	r3, r2
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x200>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	3301      	adds	r3, #1
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80073e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073ee:	e002      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x204>)
 80073f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3750      	adds	r7, #80	@ 0x50
 80073fc:	46bd      	mov	sp, r7
 80073fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007402:	bf00      	nop
 8007404:	40023800 	.word	0x40023800
 8007408:	00f42400 	.word	0x00f42400
 800740c:	007a1200 	.word	0x007a1200

08007410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007414:	4b03      	ldr	r3, [pc, #12]	@ (8007424 <HAL_RCC_GetHCLKFreq+0x14>)
 8007416:	681b      	ldr	r3, [r3, #0]
}
 8007418:	4618      	mov	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000038 	.word	0x20000038

08007428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800742c:	f7ff fff0 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	0a9b      	lsrs	r3, r3, #10
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4903      	ldr	r1, [pc, #12]	@ (800744c <HAL_RCC_GetPCLK1Freq+0x24>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007444:	4618      	mov	r0, r3
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40023800 	.word	0x40023800
 800744c:	0800f644 	.word	0x0800f644

08007450 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007474:	2b00      	cmp	r3, #0
 8007476:	d038      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007478:	4b68      	ldr	r3, [pc, #416]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800747e:	f7fa fdc1 	bl	8002004 <HAL_GetTick>
 8007482:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007484:	e008      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007486:	f7fa fdbd 	bl	8002004 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e0bd      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007498:	4b61      	ldr	r3, [pc, #388]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1f0      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	019b      	lsls	r3, r3, #6
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	071b      	lsls	r3, r3, #28
 80074b6:	495a      	ldr	r1, [pc, #360]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074be:	4b57      	ldr	r3, [pc, #348]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074c4:	f7fa fd9e 	bl	8002004 <HAL_GetTick>
 80074c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ca:	e008      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074cc:	f7fa fd9a 	bl	8002004 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e09a      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074de:	4b50      	ldr	r3, [pc, #320]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0f0      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 8083 	beq.w	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	4b48      	ldr	r3, [pc, #288]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007500:	4a47      	ldr	r2, [pc, #284]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007506:	6413      	str	r3, [r2, #64]	@ 0x40
 8007508:	4b45      	ldr	r3, [pc, #276]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007514:	4b43      	ldr	r3, [pc, #268]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a42      	ldr	r2, [pc, #264]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800751a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800751e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007520:	f7fa fd70 	bl	8002004 <HAL_GetTick>
 8007524:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007526:	e008      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007528:	f7fa fd6c 	bl	8002004 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e06c      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800753a:	4b3a      	ldr	r3, [pc, #232]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007546:	4b36      	ldr	r3, [pc, #216]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800754e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02f      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d028      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007564:	4b2e      	ldr	r3, [pc, #184]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800756c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800756e:	4b2e      	ldr	r3, [pc, #184]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007570:	2201      	movs	r2, #1
 8007572:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007574:	4b2c      	ldr	r3, [pc, #176]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800757a:	4a29      	ldr	r2, [pc, #164]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007580:	4b27      	ldr	r3, [pc, #156]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d114      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800758c:	f7fa fd3a 	bl	8002004 <HAL_GetTick>
 8007590:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007592:	e00a      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007594:	f7fa fd36 	bl	8002004 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d901      	bls.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e034      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0ee      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075c2:	d10d      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80075c4:	4b16      	ldr	r3, [pc, #88]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80075d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075d8:	4911      	ldr	r1, [pc, #68]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80075e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80075ea:	6093      	str	r3, [r2, #8]
 80075ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075f8:	4909      	ldr	r1, [pc, #36]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7d1a      	ldrb	r2, [r3, #20]
 800760e:	4b07      	ldr	r3, [pc, #28]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007610:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	42470068 	.word	0x42470068
 8007620:	40023800 	.word	0x40023800
 8007624:	40007000 	.word	0x40007000
 8007628:	42470e40 	.word	0x42470e40
 800762c:	424711e0 	.word	0x424711e0

08007630 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2203      	movs	r2, #3
 800763c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800763e:	4b1c      	ldr	r3, [pc, #112]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007644:	099b      	lsrs	r3, r3, #6
 8007646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800764e:	4b18      	ldr	r3, [pc, #96]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007654:	0f1b      	lsrs	r3, r3, #28
 8007656:	f003 0207 	and.w	r2, r3, #7
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800765e:	4b14      	ldr	r3, [pc, #80]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007664:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800766c:	4b10      	ldr	r3, [pc, #64]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007674:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007676:	4b0e      	ldr	r3, [pc, #56]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800767a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8007686:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800768c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d103      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800769a:	e002      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	751a      	strb	r2, [r3, #20]
}
 80076a2:	bf00      	nop
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40023800 	.word	0x40023800

080076b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d140      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80076d2:	4b24      	ldr	r3, [pc, #144]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d131      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80076e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80076ea:	617b      	str	r3, [r7, #20]
          break;
 80076ec:	e031      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fa:	d109      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80076fc:	4b19      	ldr	r3, [pc, #100]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007702:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007706:	4a19      	ldr	r2, [pc, #100]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	e008      	b.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007710:	4b14      	ldr	r3, [pc, #80]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007716:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800771a:	4a15      	ldr	r2, [pc, #84]	@ (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007722:	4b10      	ldr	r3, [pc, #64]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007728:	099b      	lsrs	r3, r3, #6
 800772a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007736:	4b0b      	ldr	r3, [pc, #44]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800773c:	0f1b      	lsrs	r3, r3, #28
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	fbb2 f3f3 	udiv	r3, r2, r3
 8007748:	617b      	str	r3, [r7, #20]
          break;
 800774a:	e002      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
          break;
 8007750:	bf00      	nop
        }
      }
      break;
 8007752:	bf00      	nop
    }
  }
  return frequency;
 8007754:	697b      	ldr	r3, [r7, #20]
}
 8007756:	4618      	mov	r0, r3
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40023800 	.word	0x40023800
 8007768:	00bb8000 	.word	0x00bb8000
 800776c:	007a1200 	.word	0x007a1200
 8007770:	00f42400 	.word	0x00f42400

08007774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007774:	b084      	sub	sp, #16
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	f107 001c 	add.w	r0, r7, #28
 8007782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	2b01      	cmp	r3, #1
 800778a:	d122      	bne.n	80077d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80077a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d105      	bne.n	80077c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f94a 	bl	8007a60 <USB_CoreReset>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	e01a      	b.n	8007808 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f93e 	bl	8007a60 <USB_CoreReset>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80077fa:	e005      	b.n	8007808 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007800:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	2b01      	cmp	r3, #1
 800780c:	d10b      	bne.n	8007826 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f043 0206 	orr.w	r2, r3, #6
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f043 0220 	orr.w	r2, r3, #32
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007832:	b004      	add	sp, #16
 8007834:	4770      	bx	lr

08007836 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f043 0201 	orr.w	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f023 0201 	bic.w	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d106      	bne.n	80078a6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
 80078a4:	e00b      	b.n	80078be <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d106      	bne.n	80078ba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60da      	str	r2, [r3, #12]
 80078b8:	e001      	b.n	80078be <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e003      	b.n	80078c6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80078be:	2032      	movs	r0, #50	@ 0x32
 80078c0:	f7fa fbac 	bl	800201c <HAL_Delay>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	019b      	lsls	r3, r3, #6
 80078e2:	f043 0220 	orr.w	r2, r3, #32
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a09      	ldr	r2, [pc, #36]	@ (8007918 <USB_FlushTxFifo+0x48>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e006      	b.n	800790a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b20      	cmp	r3, #32
 8007906:	d0f0      	beq.n	80078ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	00030d40 	.word	0x00030d40

0800791c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2210      	movs	r2, #16
 800792c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4a09      	ldr	r2, [pc, #36]	@ (800795c <USB_FlushRxFifo+0x40>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e006      	b.n	800794e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b10      	cmp	r3, #16
 800794a:	d0f0      	beq.n	800792e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	00030d40 	.word	0x00030d40

08007960 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	@ 0x24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4611      	mov	r1, r2
 800796c:	461a      	mov	r2, r3
 800796e:	460b      	mov	r3, r1
 8007970:	71fb      	strb	r3, [r7, #7]
 8007972:	4613      	mov	r3, r2
 8007974:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800797e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	d11a      	bne.n	80079bc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007986:	88bb      	ldrh	r3, [r7, #4]
 8007988:	3303      	adds	r3, #3
 800798a:	089b      	lsrs	r3, r3, #2
 800798c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	e00f      	b.n	80079b4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	031a      	lsls	r2, r3, #12
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4413      	add	r3, r2
 800799c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079a0:	461a      	mov	r2, r3
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	3304      	adds	r3, #4
 80079ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d3eb      	bcc.n	8007994 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3724      	adds	r7, #36	@ 0x24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b089      	sub	sp, #36	@ 0x24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	4613      	mov	r3, r2
 80079d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	3303      	adds	r3, #3
 80079e4:	089b      	lsrs	r3, r3, #2
 80079e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80079e8:	2300      	movs	r3, #0
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	e00b      	b.n	8007a06 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	3304      	adds	r3, #4
 80079fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	3301      	adds	r3, #1
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d3ef      	bcc.n	80079ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007a0e:	69fb      	ldr	r3, [r7, #28]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3724      	adds	r7, #36	@ 0x24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4013      	ands	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a34:	68fb      	ldr	r3, [r7, #12]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
	...

08007a60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4a13      	ldr	r2, [pc, #76]	@ (8007ac4 <USB_CoreReset+0x64>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d901      	bls.n	8007a7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e01b      	b.n	8007ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	daf2      	bge.n	8007a6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f043 0201 	orr.w	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4a09      	ldr	r2, [pc, #36]	@ (8007ac4 <USB_CoreReset+0x64>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d901      	bls.n	8007aa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e006      	b.n	8007ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d0f0      	beq.n	8007a96 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	00030d40 	.word	0x00030d40

08007ac8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ac8:	b084      	sub	sp, #16
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	f107 001c 	add.w	r0, r7, #28
 8007ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d018      	beq.n	8007b4c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10a      	bne.n	8007b36 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007b2e:	f043 0304 	orr.w	r3, r3, #4
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	e014      	b.n	8007b60 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007b44:	f023 0304 	bic.w	r3, r3, #4
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	e009      	b.n	8007b60 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007b5a:	f023 0304 	bic.w	r3, r3, #4
 8007b5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007b60:	2110      	movs	r1, #16
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff feb4 	bl	80078d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fed7 	bl	800791c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	e015      	b.n	8007ba0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b80:	461a      	mov	r2, r3
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b94:	461a      	mov	r2, r3
 8007b96:	2300      	movs	r3, #0
 8007b98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d3e5      	bcc.n	8007b74 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007ba8:	2101      	movs	r1, #1
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8ac 	bl	8007d08 <USB_DriveVbus>

  HAL_Delay(200U);
 8007bb0:	20c8      	movs	r0, #200	@ 0xc8
 8007bb2:	f7fa fa33 	bl	800201c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a14      	ldr	r2, [pc, #80]	@ (8007c2c <USB_HostInit+0x164>)
 8007bdc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a13      	ldr	r2, [pc, #76]	@ (8007c30 <USB_HostInit+0x168>)
 8007be2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007be6:	e009      	b.n	8007bfc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2280      	movs	r2, #128	@ 0x80
 8007bec:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a10      	ldr	r2, [pc, #64]	@ (8007c34 <USB_HostInit+0x16c>)
 8007bf2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a10      	ldr	r2, [pc, #64]	@ (8007c38 <USB_HostInit+0x170>)
 8007bf8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f043 0210 	orr.w	r2, r3, #16
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	4b0a      	ldr	r3, [pc, #40]	@ (8007c3c <USB_HostInit+0x174>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c26:	b004      	add	sp, #16
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	01000200 	.word	0x01000200
 8007c30:	00e00300 	.word	0x00e00300
 8007c34:	00600080 	.word	0x00600080
 8007c38:	004000e0 	.word	0x004000e0
 8007c3c:	a3200008 	.word	0xa3200008

08007c40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c5e:	f023 0303 	bic.w	r3, r3, #3
 8007c62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d107      	bne.n	8007c92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007c8e:	6053      	str	r3, [r2, #4]
 8007c90:	e009      	b.n	8007ca6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d106      	bne.n	8007ca6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007ca4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007cd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ce4:	2064      	movs	r0, #100	@ 0x64
 8007ce6:	f7fa f999 	bl	800201c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007cf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cf6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007cf8:	200a      	movs	r0, #10
 8007cfa:	f7fa f98f 	bl	800201c <HAL_Delay>

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007d2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d109      	bne.n	8007d4c <USB_DriveVbus+0x44>
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d106      	bne.n	8007d4c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007d46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d4a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d56:	d109      	bne.n	8007d6c <USB_DriveVbus+0x64>
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d6a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	0c5b      	lsrs	r3, r3, #17
 8007d98:	f003 0303 	and.w	r3, r3, #3
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	b29b      	uxth	r3, r3
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	70fb      	strb	r3, [r7, #3]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70bb      	strb	r3, [r7, #2]
 8007de2:	4613      	mov	r3, r2
 8007de4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007e00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007e02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d87e      	bhi.n	8007f08 <USB_HC_Init+0x13c>
 8007e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <USB_HC_Init+0x44>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e21 	.word	0x08007e21
 8007e14:	08007ecb 	.word	0x08007ecb
 8007e18:	08007e21 	.word	0x08007e21
 8007e1c:	08007e8d 	.word	0x08007e8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007e32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007e34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da10      	bge.n	8007e5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e5a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007e5c:	e057      	b.n	8007f0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d051      	beq.n	8007f0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007e88:	60d3      	str	r3, [r2, #12]
      break;
 8007e8a:	e040      	b.n	8007f0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007e9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ea0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da34      	bge.n	8007f12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	78fa      	ldrb	r2, [r7, #3]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ec6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ec8:	e023      	b.n	8007f12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f240 2325 	movw	r3, #549	@ 0x225
 8007edc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ede:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da17      	bge.n	8007f16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	0151      	lsls	r1, r2, #5
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	440a      	add	r2, r1
 8007efc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f00:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007f04:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007f06:	e006      	b.n	8007f16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0c:	e004      	b.n	8007f18 <USB_HC_Init+0x14c>
      break;
 8007f0e:	bf00      	nop
 8007f10:	e002      	b.n	8007f18 <USB_HC_Init+0x14c>
      break;
 8007f12:	bf00      	nop
 8007f14:	e000      	b.n	8007f18 <USB_HC_Init+0x14c>
      break;
 8007f16:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f1e:	699a      	ldr	r2, [r3, #24]
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	2101      	movs	r1, #1
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007f32:	4313      	orrs	r3, r2
 8007f34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007f42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da03      	bge.n	8007f52 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	e001      	b.n	8007f56 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007f56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d103      	bne.n	8007f66 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007f5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e001      	b.n	8007f6a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f6a:	787b      	ldrb	r3, [r7, #1]
 8007f6c:	059b      	lsls	r3, r3, #22
 8007f6e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f72:	78bb      	ldrb	r3, [r7, #2]
 8007f74:	02db      	lsls	r3, r3, #11
 8007f76:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f7a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f80:	049b      	lsls	r3, r3, #18
 8007f82:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f8e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	0159      	lsls	r1, r3, #5
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	440b      	add	r3, r1
 8007f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fa6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007fa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d10f      	bne.n	8007fd0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	78fa      	ldrb	r2, [r7, #3]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007fce:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop

08007fe0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08c      	sub	sp, #48	@ 0x30
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ffc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008006:	2b00      	cmp	r3, #0
 8008008:	d028      	beq.n	800805c <USB_HC_StartXfer+0x7c>
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	791b      	ldrb	r3, [r3, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d124      	bne.n	800805c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <USB_HC_StartXfer+0x50>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	795b      	ldrb	r3, [r3, #5]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d107      	bne.n	8008030 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	4619      	mov	r1, r3
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fa2e 	bl	8008488 <USB_DoPing>
      return HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	e113      	b.n	8008258 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d112      	bne.n	800805c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	6a3a      	ldr	r2, [r7, #32]
 800804a:	440a      	add	r2, r1
 800804c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008050:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8008054:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d018      	beq.n	8008096 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	8912      	ldrh	r2, [r2, #8]
 800806c:	4413      	add	r3, r2
 800806e:	3b01      	subs	r3, #1
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	8912      	ldrh	r2, [r2, #8]
 8008074:	fbb3 f3f2 	udiv	r3, r3, r2
 8008078:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 800807a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800807c:	8b7b      	ldrh	r3, [r7, #26]
 800807e:	429a      	cmp	r2, r3
 8008080:	d90b      	bls.n	800809a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008082:	8b7b      	ldrh	r3, [r7, #26]
 8008084:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008086:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	8912      	ldrh	r2, [r2, #8]
 800808c:	fb03 f202 	mul.w	r2, r3, r2
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	611a      	str	r2, [r3, #16]
 8008094:	e001      	b.n	800809a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008096:	2301      	movs	r3, #1
 8008098:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  if (hc->ep_is_in != 0U)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d006      	beq.n	80080b0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80080a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	8912      	ldrh	r2, [r2, #8]
 80080a8:	fb03 f202 	mul.w	r2, r3, r2
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80080b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080ba:	04d9      	lsls	r1, r3, #19
 80080bc:	4b68      	ldr	r3, [pc, #416]	@ (8008260 <USB_HC_StartXfer+0x280>)
 80080be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80080c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	7a9b      	ldrb	r3, [r3, #10]
 80080c6:	075b      	lsls	r3, r3, #29
 80080c8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80080cc:	69f9      	ldr	r1, [r7, #28]
 80080ce:	0148      	lsls	r0, r1, #5
 80080d0:	6a39      	ldr	r1, [r7, #32]
 80080d2:	4401      	add	r1, r0
 80080d4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80080d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80080da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d009      	beq.n	80080f6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	68d9      	ldr	r1, [r3, #12]
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080f2:	460a      	mov	r2, r1
 80080f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	bf0c      	ite	eq
 8008106:	2301      	moveq	r3, #1
 8008108:	2300      	movne	r3, #0
 800810a:	b2db      	uxtb	r3, r3
 800810c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	4413      	add	r3, r2
 8008116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	6a3a      	ldr	r2, [r7, #32]
 8008122:	440a      	add	r2, r1
 8008124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008128:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800812c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	7e7b      	ldrb	r3, [r7, #25]
 800813e:	075b      	lsls	r3, r3, #29
 8008140:	69f9      	ldr	r1, [r7, #28]
 8008142:	0148      	lsls	r0, r1, #5
 8008144:	6a39      	ldr	r1, [r7, #32]
 8008146:	4401      	add	r1, r0
 8008148:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800814c:	4313      	orrs	r3, r2
 800814e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	4413      	add	r3, r2
 8008158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a41      	ldr	r2, [pc, #260]	@ (8008264 <USB_HC_StartXfer+0x284>)
 8008160:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008162:	4b40      	ldr	r3, [pc, #256]	@ (8008264 <USB_HC_StartXfer+0x284>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800816a:	4a3e      	ldr	r2, [pc, #248]	@ (8008264 <USB_HC_StartXfer+0x284>)
 800816c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	78db      	ldrb	r3, [r3, #3]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008176:	4b3b      	ldr	r3, [pc, #236]	@ (8008264 <USB_HC_StartXfer+0x284>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800817e:	4a39      	ldr	r2, [pc, #228]	@ (8008264 <USB_HC_StartXfer+0x284>)
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	e005      	b.n	8008190 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008184:	4b37      	ldr	r3, [pc, #220]	@ (8008264 <USB_HC_StartXfer+0x284>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800818c:	4a35      	ldr	r2, [pc, #212]	@ (8008264 <USB_HC_StartXfer+0x284>)
 800818e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008190:	4b34      	ldr	r3, [pc, #208]	@ (8008264 <USB_HC_StartXfer+0x284>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008198:	4a32      	ldr	r2, [pc, #200]	@ (8008264 <USB_HC_StartXfer+0x284>)
 800819a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a8:	461a      	mov	r2, r3
 80081aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008264 <USB_HC_StartXfer+0x284>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e04e      	b.n	8008258 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	78db      	ldrb	r3, [r3, #3]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d149      	bne.n	8008256 <USB_HC_StartXfer+0x276>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d045      	beq.n	8008256 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	79db      	ldrb	r3, [r3, #7]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d830      	bhi.n	8008234 <USB_HC_StartXfer+0x254>
 80081d2:	a201      	add	r2, pc, #4	@ (adr r2, 80081d8 <USB_HC_StartXfer+0x1f8>)
 80081d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d8:	080081e9 	.word	0x080081e9
 80081dc:	0800820d 	.word	0x0800820d
 80081e0:	080081e9 	.word	0x080081e9
 80081e4:	0800820d 	.word	0x0800820d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	3303      	adds	r3, #3
 80081ee:	089b      	lsrs	r3, r3, #2
 80081f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80081f2:	8afa      	ldrh	r2, [r7, #22]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d91c      	bls.n	8008238 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f043 0220 	orr.w	r2, r3, #32
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	619a      	str	r2, [r3, #24]
        }
        break;
 800820a:	e015      	b.n	8008238 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	3303      	adds	r3, #3
 8008212:	089b      	lsrs	r3, r3, #2
 8008214:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008216:	8afa      	ldrh	r2, [r7, #22]
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	b29b      	uxth	r3, r3
 8008222:	429a      	cmp	r2, r3
 8008224:	d90a      	bls.n	800823c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	619a      	str	r2, [r3, #24]
        }
        break;
 8008232:	e003      	b.n	800823c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008234:	bf00      	nop
 8008236:	e002      	b.n	800823e <USB_HC_StartXfer+0x25e>
        break;
 8008238:	bf00      	nop
 800823a:	e000      	b.n	800823e <USB_HC_StartXfer+0x25e>
        break;
 800823c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	68d9      	ldr	r1, [r3, #12]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	785a      	ldrb	r2, [r3, #1]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	b29b      	uxth	r3, r3
 800824c:	2000      	movs	r0, #0
 800824e:	9000      	str	r0, [sp, #0]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f7ff fb85 	bl	8007960 <USB_WritePacket>
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3728      	adds	r7, #40	@ 0x28
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	1ff80000 	.word	0x1ff80000
 8008264:	20001928 	.word	0x20001928

08008268 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	b29b      	uxth	r3, r3
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	0c9b      	lsrs	r3, r3, #18
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <USB_HC_Halt+0x3a>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d16c      	bne.n	800839e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082e2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d143      	bne.n	8008378 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	440a      	add	r2, r1
 8008306:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800830a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800830e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4413      	add	r3, r2
 8008318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	440a      	add	r2, r1
 8008326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800832a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800832e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4413      	add	r3, r2
 8008338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	440a      	add	r2, r1
 8008346:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800834a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800834e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	3301      	adds	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800835c:	d81d      	bhi.n	800839a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	4413      	add	r3, r2
 8008366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008374:	d0ec      	beq.n	8008350 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008376:	e080      	b.n	800847a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4413      	add	r3, r2
 8008380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	0151      	lsls	r1, r2, #5
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	440a      	add	r2, r1
 800838e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008392:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008396:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008398:	e06f      	b.n	800847a <USB_HC_Halt+0x1f0>
          break;
 800839a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800839c:	e06d      	b.n	800847a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083bc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d143      	bne.n	8008456 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083ec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	440a      	add	r2, r1
 8008404:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008408:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800840c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	440a      	add	r2, r1
 8008424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008428:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800842c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	3301      	adds	r3, #1
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800843a:	d81d      	bhi.n	8008478 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800844e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008452:	d0ec      	beq.n	800842e <USB_HC_Halt+0x1a4>
 8008454:	e011      	b.n	800847a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	440a      	add	r2, r1
 800846c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e000      	b.n	800847a <USB_HC_Halt+0x1f0>
          break;
 8008478:	bf00      	nop
    }
  }

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800849c:	2301      	movs	r3, #1
 800849e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	04da      	lsls	r2, r3, #19
 80084a4:	4b15      	ldr	r3, [pc, #84]	@ (80084fc <USB_DoPing+0x74>)
 80084a6:	4013      	ands	r3, r2
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e6:	461a      	mov	r2, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	1ff80000 	.word	0x1ff80000

08008500 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff f9a1 	bl	8007858 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008516:	2110      	movs	r1, #16
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff f9d9 	bl	80078d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff f9fc 	bl	800791c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008524:	2300      	movs	r3, #0
 8008526:	613b      	str	r3, [r7, #16]
 8008528:	e01f      	b.n	800856a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008540:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008548:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008550:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855e:	461a      	mov	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	3301      	adds	r3, #1
 8008568:	613b      	str	r3, [r7, #16]
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b0f      	cmp	r3, #15
 800856e:	d9dc      	bls.n	800852a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008570:	2300      	movs	r3, #0
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	e034      	b.n	80085e0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800858c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008594:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800859c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085aa:	461a      	mov	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3301      	adds	r3, #1
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085bc:	d80c      	bhi.n	80085d8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085d4:	d0ec      	beq.n	80085b0 <USB_StopHost+0xb0>
 80085d6:	e000      	b.n	80085da <USB_StopHost+0xda>
        break;
 80085d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	3301      	adds	r3, #1
 80085de:	613b      	str	r3, [r7, #16]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b0f      	cmp	r3, #15
 80085e4:	d9c7      	bls.n	8008576 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085ec:	461a      	mov	r2, r3
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f04f 32ff 	mov.w	r2, #4294967295
 80085fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff f91a 	bl	8007836 <USB_EnableGlobalInt>

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008610:	4904      	ldr	r1, [pc, #16]	@ (8008624 <MX_FATFS_Init+0x18>)
 8008612:	4805      	ldr	r0, [pc, #20]	@ (8008628 <MX_FATFS_Init+0x1c>)
 8008614:	f006 fa10 	bl	800ea38 <FATFS_LinkDriver>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	4b03      	ldr	r3, [pc, #12]	@ (800862c <MX_FATFS_Init+0x20>)
 800861e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008620:	bf00      	nop
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20001930 	.word	0x20001930
 8008628:	0800f654 	.word	0x0800f654
 800862c:	2000192c 	.word	0x2000192c

08008630 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008634:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008636:	4618      	mov	r0, r3
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	4619      	mov	r1, r3
 800866a:	4808      	ldr	r0, [pc, #32]	@ (800868c <USBH_status+0x34>)
 800866c:	f000 fe18 	bl	80092a0 <USBH_MSC_UnitIsReady>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <USBH_status+0x24>
  {
    res = RES_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]
 800867a:	e001      	b.n	8008680 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20001d9c 	.word	0x20001d9c

08008690 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b094      	sub	sp, #80	@ 0x50
 8008694:	af02      	add	r7, sp, #8
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80086a6:	7bf9      	ldrb	r1, [r7, #15]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4813      	ldr	r0, [pc, #76]	@ (8008700 <USBH_read+0x70>)
 80086b2:	f000 fe3f 	bl	8009334 <USBH_MSC_Read>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <USBH_read+0x34>
  {
    res = RES_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80086c2:	e017      	b.n	80086f4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80086c4:	f107 0210 	add.w	r2, r7, #16
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	4619      	mov	r1, r3
 80086cc:	480c      	ldr	r0, [pc, #48]	@ (8008700 <USBH_read+0x70>)
 80086ce:	f000 fe0d 	bl	80092ec <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80086d2:	7f7b      	ldrb	r3, [r7, #29]
 80086d4:	2b3a      	cmp	r3, #58	@ 0x3a
 80086d6:	d005      	beq.n	80086e4 <USBH_read+0x54>
 80086d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80086da:	dc07      	bgt.n	80086ec <USBH_read+0x5c>
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d001      	beq.n	80086e4 <USBH_read+0x54>
 80086e0:	2b28      	cmp	r3, #40	@ 0x28
 80086e2:	d103      	bne.n	80086ec <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80086e4:	2303      	movs	r3, #3
 80086e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80086ea:	e003      	b.n	80086f4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80086f2:	bf00      	nop
    }
  }

  return res;
 80086f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3748      	adds	r7, #72	@ 0x48
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20001d9c 	.word	0x20001d9c

08008704 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b094      	sub	sp, #80	@ 0x50
 8008708:	af02      	add	r7, sp, #8
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800871a:	7bf9      	ldrb	r1, [r7, #15]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	4817      	ldr	r0, [pc, #92]	@ (8008784 <USBH_write+0x80>)
 8008726:	f000 fe6e 	bl	8009406 <USBH_MSC_Write>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <USBH_write+0x34>
  {
    res = RES_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008736:	e01f      	b.n	8008778 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008738:	f107 0210 	add.w	r2, r7, #16
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	4619      	mov	r1, r3
 8008740:	4810      	ldr	r0, [pc, #64]	@ (8008784 <USBH_write+0x80>)
 8008742:	f000 fdd3 	bl	80092ec <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008746:	7f7b      	ldrb	r3, [r7, #29]
 8008748:	2b3a      	cmp	r3, #58	@ 0x3a
 800874a:	d00d      	beq.n	8008768 <USBH_write+0x64>
 800874c:	2b3a      	cmp	r3, #58	@ 0x3a
 800874e:	dc0f      	bgt.n	8008770 <USBH_write+0x6c>
 8008750:	2b28      	cmp	r3, #40	@ 0x28
 8008752:	d009      	beq.n	8008768 <USBH_write+0x64>
 8008754:	2b28      	cmp	r3, #40	@ 0x28
 8008756:	dc0b      	bgt.n	8008770 <USBH_write+0x6c>
 8008758:	2b04      	cmp	r3, #4
 800875a:	d005      	beq.n	8008768 <USBH_write+0x64>
 800875c:	2b27      	cmp	r3, #39	@ 0x27
 800875e:	d107      	bne.n	8008770 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008760:	2302      	movs	r3, #2
 8008762:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008766:	e007      	b.n	8008778 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008768:	2303      	movs	r3, #3
 800876a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800876e:	e003      	b.n	8008778 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008776:	bf00      	nop
    }
  }

  return res;
 8008778:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800877c:	4618      	mov	r0, r3
 800877e:	3748      	adds	r7, #72	@ 0x48
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20001d9c 	.word	0x20001d9c

08008788 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b090      	sub	sp, #64	@ 0x40
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	603a      	str	r2, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
 8008794:	460b      	mov	r3, r1
 8008796:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800879e:	79bb      	ldrb	r3, [r7, #6]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d852      	bhi.n	800884a <USBH_ioctl+0xc2>
 80087a4:	a201      	add	r2, pc, #4	@ (adr r2, 80087ac <USBH_ioctl+0x24>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	080087c5 	.word	0x080087c5
 80087b4:	080087ef 	.word	0x080087ef
 80087b8:	0800881b 	.word	0x0800881b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80087c2:	e045      	b.n	8008850 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80087c4:	f107 0208 	add.w	r2, r7, #8
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	4619      	mov	r1, r3
 80087cc:	4823      	ldr	r0, [pc, #140]	@ (800885c <USBH_ioctl+0xd4>)
 80087ce:	f000 fd8d 	bl	80092ec <USBH_MSC_GetLUNInfo>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80087e4:	e034      	b.n	8008850 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80087ec:	e030      	b.n	8008850 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80087ee:	f107 0208 	add.w	r2, r7, #8
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4619      	mov	r1, r3
 80087f6:	4819      	ldr	r0, [pc, #100]	@ (800885c <USBH_ioctl+0xd4>)
 80087f8:	f000 fd78 	bl	80092ec <USBH_MSC_GetLUNInfo>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d107      	bne.n	8008812 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008802:	8a3b      	ldrh	r3, [r7, #16]
 8008804:	461a      	mov	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008810:	e01e      	b.n	8008850 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008818:	e01a      	b.n	8008850 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800881a:	f107 0208 	add.w	r2, r7, #8
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	4619      	mov	r1, r3
 8008822:	480e      	ldr	r0, [pc, #56]	@ (800885c <USBH_ioctl+0xd4>)
 8008824:	f000 fd62 	bl	80092ec <USBH_MSC_GetLUNInfo>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800882e:	8a3b      	ldrh	r3, [r7, #16]
 8008830:	0a5b      	lsrs	r3, r3, #9
 8008832:	b29b      	uxth	r3, r3
 8008834:	461a      	mov	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008840:	e006      	b.n	8008850 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008848:	e002      	b.n	8008850 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800884a:	2304      	movs	r3, #4
 800884c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8008850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008854:	4618      	mov	r0, r3
 8008856:	3740      	adds	r7, #64	@ 0x40
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20001d9c 	.word	0x20001d9c

08008860 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b089      	sub	sp, #36	@ 0x24
 8008864:	af04      	add	r7, sp, #16
 8008866:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800886e:	7919      	ldrb	r1, [r3, #4]
 8008870:	2350      	movs	r3, #80	@ 0x50
 8008872:	2206      	movs	r2, #6
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 fc50 	bl	800a11a <USBH_FindInterface>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	2bff      	cmp	r3, #255	@ 0xff
 8008882:	d002      	beq.n	800888a <USBH_MSC_InterfaceInit+0x2a>
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d901      	bls.n	800888e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	e0ef      	b.n	8008a6e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fc25 	bl	800a0e2 <USBH_SelectInterface>
 8008898:	4603      	mov	r3, r0
 800889a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	e0e3      	b.n	8008a6e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80088ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80088b0:	f006 fcd6 	bl	800f260 <malloc>
 80088b4:	4603      	mov	r3, r0
 80088b6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80088c8:	2302      	movs	r3, #2
 80088ca:	e0d0      	b.n	8008a6e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80088cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088d0:	2100      	movs	r1, #0
 80088d2:	68b8      	ldr	r0, [r7, #8]
 80088d4:	f006 fd82 	bl	800f3dc <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	211a      	movs	r1, #26
 80088de:	fb01 f303 	mul.w	r3, r1, r3
 80088e2:	4413      	add	r3, r2
 80088e4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b25b      	sxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da16      	bge.n	800891e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	211a      	movs	r1, #26
 80088f6:	fb01 f303 	mul.w	r3, r1, r3
 80088fa:	4413      	add	r3, r2
 80088fc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008900:	781a      	ldrb	r2, [r3, #0]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	211a      	movs	r1, #26
 800890c:	fb01 f303 	mul.w	r3, r1, r3
 8008910:	4413      	add	r3, r2
 8008912:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008916:	881a      	ldrh	r2, [r3, #0]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	815a      	strh	r2, [r3, #10]
 800891c:	e015      	b.n	800894a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	211a      	movs	r1, #26
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	4413      	add	r3, r2
 800892a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	211a      	movs	r1, #26
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	4413      	add	r3, r2
 8008940:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008944:	881a      	ldrh	r2, [r3, #0]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	211a      	movs	r1, #26
 8008950:	fb01 f303 	mul.w	r3, r1, r3
 8008954:	4413      	add	r3, r2
 8008956:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	b25b      	sxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	da16      	bge.n	8008990 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	211a      	movs	r1, #26
 8008968:	fb01 f303 	mul.w	r3, r1, r3
 800896c:	4413      	add	r3, r2
 800896e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008972:	781a      	ldrb	r2, [r3, #0]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	211a      	movs	r1, #26
 800897e:	fb01 f303 	mul.w	r3, r1, r3
 8008982:	4413      	add	r3, r2
 8008984:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008988:	881a      	ldrh	r2, [r3, #0]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	815a      	strh	r2, [r3, #10]
 800898e:	e015      	b.n	80089bc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	211a      	movs	r1, #26
 8008996:	fb01 f303 	mul.w	r3, r1, r3
 800899a:	4413      	add	r3, r2
 800899c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	211a      	movs	r1, #26
 80089ac:	fb01 f303 	mul.w	r3, r1, r3
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80089b6:	881a      	ldrh	r2, [r3, #0]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2200      	movs	r2, #0
 80089c6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2200      	movs	r2, #0
 80089cc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	799b      	ldrb	r3, [r3, #6]
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f002 fdb6 	bl	800b546 <USBH_AllocPipe>
 80089da:	4603      	mov	r3, r0
 80089dc:	461a      	mov	r2, r3
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	79db      	ldrb	r3, [r3, #7]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f002 fdac 	bl	800b546 <USBH_AllocPipe>
 80089ee:	4603      	mov	r3, r0
 80089f0:	461a      	mov	r2, r3
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fdaa 	bl	8009550 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	7959      	ldrb	r1, [r3, #5]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	7998      	ldrb	r0, [r3, #6]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	8912      	ldrh	r2, [r2, #8]
 8008a14:	9202      	str	r2, [sp, #8]
 8008a16:	2202      	movs	r2, #2
 8008a18:	9201      	str	r2, [sp, #4]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f002 fd61 	bl	800b4e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	7919      	ldrb	r1, [r3, #4]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	79d8      	ldrb	r0, [r3, #7]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	8952      	ldrh	r2, [r2, #10]
 8008a3e:	9202      	str	r2, [sp, #8]
 8008a40:	2202      	movs	r2, #2
 8008a42:	9201      	str	r2, [sp, #4]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4623      	mov	r3, r4
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f002 fd4c 	bl	800b4e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	791b      	ldrb	r3, [r3, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f006 fb47 	bl	800f0ec <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	795b      	ldrb	r3, [r3, #5]
 8008a62:	2200      	movs	r2, #0
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f006 fb40 	bl	800f0ec <USBH_LL_SetToggle>

  return USBH_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}

08008a76 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	795b      	ldrb	r3, [r3, #5]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	795b      	ldrb	r3, [r3, #5]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f002 fd45 	bl	800b526 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	795b      	ldrb	r3, [r3, #5]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 fd70 	bl	800b588 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	791b      	ldrb	r3, [r3, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00e      	beq.n	8008ad4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	791b      	ldrb	r3, [r3, #4]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f002 fd32 	bl	800b526 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	791b      	ldrb	r3, [r3, #4]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f002 fd5d 	bl	800b588 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f006 fbc1 	bl	800f270 <free>
    phost->pActiveClass->pData = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008af4:	2200      	movs	r2, #0
 8008af6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b14:	2301      	movs	r3, #1
 8008b16:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	7b9b      	ldrb	r3, [r3, #14]
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d041      	beq.n	8008ba4 <USBH_MSC_ClassRequest+0xa2>
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	dc4b      	bgt.n	8008bbc <USBH_MSC_ClassRequest+0xba>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <USBH_MSC_ClassRequest+0x2a>
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d147      	bne.n	8008bbc <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fcee 	bl	8009512 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d104      	bne.n	8008b4a <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d137      	bne.n	8008bc0 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d804      	bhi.n	8008b62 <USBH_MSC_ClassRequest+0x60>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	e000      	b.n	8008b64 <USBH_MSC_ClassRequest+0x62>
 8008b62:	2202      	movs	r2, #2
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]
 8008b6c:	e014      	b.n	8008b98 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	2134      	movs	r1, #52	@ 0x34
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	3392      	adds	r3, #146	@ 0x92
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	2134      	movs	r1, #52	@ 0x34
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
 8008b8a:	4413      	add	r3, r2
 8008b8c:	33c1      	adds	r3, #193	@ 0xc1
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	3301      	adds	r3, #1
 8008b96:	73bb      	strb	r3, [r7, #14]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	7bba      	ldrb	r2, [r7, #14]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d3e5      	bcc.n	8008b6e <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008ba2:	e00d      	b.n	8008bc0 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f002 f873 	bl	800ac92 <USBH_ClrFeature>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d108      	bne.n	8008bc4 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	7bda      	ldrb	r2, [r3, #15]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008bba:	e003      	b.n	8008bc4 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008bbc:	bf00      	nop
 8008bbe:	e002      	b.n	8008bc6 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008bc0:	bf00      	nop
 8008bc2:	e000      	b.n	8008bc6 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008bc4:	bf00      	nop
  }

  return status;
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008be2:	2301      	movs	r3, #1
 8008be4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008be6:	2301      	movs	r3, #1
 8008be8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008bea:	2301      	movs	r3, #1
 8008bec:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	7b1b      	ldrb	r3, [r3, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <USBH_MSC_Process+0x2e>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	f000 826f 	beq.w	80090da <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008bfc:	e270      	b.n	80090e0 <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	7812      	ldrb	r2, [r2, #0]
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	f080 824e 	bcs.w	80090aa <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c14:	4619      	mov	r1, r3
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	2334      	movs	r3, #52	@ 0x34
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	4413      	add	r3, r2
 8008c20:	3391      	adds	r3, #145	@ 0x91
 8008c22:	2201      	movs	r2, #1
 8008c24:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	2334      	movs	r3, #52	@ 0x34
 8008c32:	fb01 f303 	mul.w	r3, r1, r3
 8008c36:	4413      	add	r3, r2
 8008c38:	3390      	adds	r3, #144	@ 0x90
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	f200 8242 	bhi.w	80090c6 <USBH_MSC_Process+0x4f6>
 8008c42:	a201      	add	r2, pc, #4	@ (adr r2, 8008c48 <USBH_MSC_Process+0x78>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	080090c7 	.word	0x080090c7
 8008c50:	08008d35 	.word	0x08008d35
 8008c54:	08008eb9 	.word	0x08008eb9
 8008c58:	08008c93 	.word	0x08008c93
 8008c5c:	08008f85 	.word	0x08008f85
 8008c60:	080090c7 	.word	0x080090c7
 8008c64:	080090c7 	.word	0x080090c7
 8008c68:	08009099 	.word	0x08009099
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c72:	4619      	mov	r1, r3
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	2334      	movs	r3, #52	@ 0x34
 8008c78:	fb01 f303 	mul.w	r3, r1, r3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	3390      	adds	r3, #144	@ 0x90
 8008c80:	2204      	movs	r2, #4
 8008c82:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 8008c90:	e222      	b.n	80090d8 <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c98:	b2d9      	uxtb	r1, r3
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	2334      	movs	r3, #52	@ 0x34
 8008ca4:	fb02 f303 	mul.w	r3, r2, r3
 8008ca8:	3398      	adds	r3, #152	@ 0x98
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4413      	add	r3, r2
 8008cae:	3307      	adds	r3, #7
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 ff69 	bl	8009b8a <USBH_MSC_SCSI_Inquiry>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10b      	bne.n	8008cda <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008cc8:	4619      	mov	r1, r3
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	2334      	movs	r3, #52	@ 0x34
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3390      	adds	r3, #144	@ 0x90
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d10c      	bne.n	8008cfa <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	2334      	movs	r3, #52	@ 0x34
 8008cec:	fb01 f303 	mul.w	r3, r1, r3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3390      	adds	r3, #144	@ 0x90
 8008cf4:	2205      	movs	r2, #5
 8008cf6:	701a      	strb	r2, [r3, #0]
            break;
 8008cf8:	e1e7      	b.n	80090ca <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	f040 81e4 	bne.w	80090ca <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d08:	4619      	mov	r1, r3
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	2334      	movs	r3, #52	@ 0x34
 8008d0e:	fb01 f303 	mul.w	r3, r1, r3
 8008d12:	4413      	add	r3, r2
 8008d14:	3390      	adds	r3, #144	@ 0x90
 8008d16:	2201      	movs	r2, #1
 8008d18:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d20:	4619      	mov	r1, r3
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	2334      	movs	r3, #52	@ 0x34
 8008d26:	fb01 f303 	mul.w	r3, r1, r3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3391      	adds	r3, #145	@ 0x91
 8008d2e:	2202      	movs	r2, #2
 8008d30:	701a      	strb	r2, [r3, #0]
            break;
 8008d32:	e1ca      	b.n	80090ca <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fe66 	bl	8009a10 <USBH_MSC_SCSI_TestUnitReady>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d149      	bne.n	8008de2 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d54:	4619      	mov	r1, r3
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	2334      	movs	r3, #52	@ 0x34
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	4413      	add	r3, r2
 8008d60:	3392      	adds	r3, #146	@ 0x92
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d6e:	4619      	mov	r1, r3
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	2334      	movs	r3, #52	@ 0x34
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
 8008d78:	4413      	add	r3, r2
 8008d7a:	33c1      	adds	r3, #193	@ 0xc1
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	e00b      	b.n	8008d9a <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d88:	4619      	mov	r1, r3
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	2334      	movs	r3, #52	@ 0x34
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	33c1      	adds	r3, #193	@ 0xc1
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008da0:	4619      	mov	r1, r3
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	2334      	movs	r3, #52	@ 0x34
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	3390      	adds	r3, #144	@ 0x90
 8008dae:	2203      	movs	r2, #3
 8008db0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008db8:	4619      	mov	r1, r3
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	2334      	movs	r3, #52	@ 0x34
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3391      	adds	r3, #145	@ 0x91
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	2334      	movs	r3, #52	@ 0x34
 8008dd6:	fb01 f303 	mul.w	r3, r1, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	3392      	adds	r3, #146	@ 0x92
 8008dde:	2200      	movs	r2, #0
 8008de0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d14a      	bne.n	8008e7e <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008dee:	4619      	mov	r1, r3
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	2334      	movs	r3, #52	@ 0x34
 8008df4:	fb01 f303 	mul.w	r3, r1, r3
 8008df8:	4413      	add	r3, r2
 8008dfa:	3392      	adds	r3, #146	@ 0x92
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d00c      	beq.n	8008e1c <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e08:	4619      	mov	r1, r3
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	2334      	movs	r3, #52	@ 0x34
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	4413      	add	r3, r2
 8008e14:	33c1      	adds	r3, #193	@ 0xc1
 8008e16:	2201      	movs	r2, #1
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	e00b      	b.n	8008e34 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e22:	4619      	mov	r1, r3
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	2334      	movs	r3, #52	@ 0x34
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	33c1      	adds	r3, #193	@ 0xc1
 8008e30:	2200      	movs	r2, #0
 8008e32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	2334      	movs	r3, #52	@ 0x34
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	3390      	adds	r3, #144	@ 0x90
 8008e48:	2205      	movs	r2, #5
 8008e4a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e52:	4619      	mov	r1, r3
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	2334      	movs	r3, #52	@ 0x34
 8008e58:	fb01 f303 	mul.w	r3, r1, r3
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3391      	adds	r3, #145	@ 0x91
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	2334      	movs	r3, #52	@ 0x34
 8008e70:	fb01 f303 	mul.w	r3, r1, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	3392      	adds	r3, #146	@ 0x92
 8008e78:	2202      	movs	r2, #2
 8008e7a:	701a      	strb	r2, [r3, #0]
            break;
 8008e7c:	e127      	b.n	80090ce <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	f040 8124 	bne.w	80090ce <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	2334      	movs	r3, #52	@ 0x34
 8008e92:	fb01 f303 	mul.w	r3, r1, r3
 8008e96:	4413      	add	r3, r2
 8008e98:	3390      	adds	r3, #144	@ 0x90
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	2334      	movs	r3, #52	@ 0x34
 8008eaa:	fb01 f303 	mul.w	r3, r1, r3
 8008eae:	4413      	add	r3, r2
 8008eb0:	3391      	adds	r3, #145	@ 0x91
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	701a      	strb	r2, [r3, #0]
            break;
 8008eb6:	e10a      	b.n	80090ce <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ebe:	b2d9      	uxtb	r1, r3
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	2334      	movs	r3, #52	@ 0x34
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	3390      	adds	r3, #144	@ 0x90
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fddc 	bl	8009a96 <USBH_MSC_SCSI_ReadCapacity>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d120      	bne.n	8008f2a <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008eee:	4619      	mov	r1, r3
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	2334      	movs	r3, #52	@ 0x34
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	4413      	add	r3, r2
 8008efa:	3390      	adds	r3, #144	@ 0x90
 8008efc:	2201      	movs	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f06:	4619      	mov	r1, r3
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	2334      	movs	r3, #52	@ 0x34
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	4413      	add	r3, r2
 8008f12:	3391      	adds	r3, #145	@ 0x91
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f1e:	3301      	adds	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8008f28:	e0d3      	b.n	80090d2 <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d10c      	bne.n	8008f4a <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f36:	4619      	mov	r1, r3
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	2334      	movs	r3, #52	@ 0x34
 8008f3c:	fb01 f303 	mul.w	r3, r1, r3
 8008f40:	4413      	add	r3, r2
 8008f42:	3390      	adds	r3, #144	@ 0x90
 8008f44:	2205      	movs	r2, #5
 8008f46:	701a      	strb	r2, [r3, #0]
            break;
 8008f48:	e0c3      	b.n	80090d2 <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	f040 80c0 	bne.w	80090d2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	2334      	movs	r3, #52	@ 0x34
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	4413      	add	r3, r2
 8008f64:	3390      	adds	r3, #144	@ 0x90
 8008f66:	2201      	movs	r2, #1
 8008f68:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f70:	4619      	mov	r1, r3
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	2334      	movs	r3, #52	@ 0x34
 8008f76:	fb01 f303 	mul.w	r3, r1, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3391      	adds	r3, #145	@ 0x91
 8008f7e:	2202      	movs	r2, #2
 8008f80:	701a      	strb	r2, [r3, #0]
            break;
 8008f82:	e0a6      	b.n	80090d2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f8a:	b2d9      	uxtb	r1, r3
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f92:	461a      	mov	r2, r3
 8008f94:	2334      	movs	r3, #52	@ 0x34
 8008f96:	fb02 f303 	mul.w	r3, r2, r3
 8008f9a:	3398      	adds	r3, #152	@ 0x98
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fe95 	bl	8009cd4 <USBH_MSC_SCSI_RequestSense>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d145      	bne.n	8009040 <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008fba:	4619      	mov	r1, r3
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	2334      	movs	r3, #52	@ 0x34
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	339c      	adds	r3, #156	@ 0x9c
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b06      	cmp	r3, #6
 8008fcc:	d00c      	beq.n	8008fe8 <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	2334      	movs	r3, #52	@ 0x34
 8008fda:	fb01 f303 	mul.w	r3, r1, r3
 8008fde:	4413      	add	r3, r2
 8008fe0:	339c      	adds	r3, #156	@ 0x9c
 8008fe2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d117      	bne.n	8009018 <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d80c      	bhi.n	8009018 <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009004:	4619      	mov	r1, r3
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	2334      	movs	r3, #52	@ 0x34
 800900a:	fb01 f303 	mul.w	r3, r1, r3
 800900e:	4413      	add	r3, r2
 8009010:	3390      	adds	r3, #144	@ 0x90
 8009012:	2202      	movs	r2, #2
 8009014:	701a      	strb	r2, [r3, #0]
                  break;
 8009016:	e05f      	b.n	80090d8 <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800901e:	4619      	mov	r1, r3
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	2334      	movs	r3, #52	@ 0x34
 8009024:	fb01 f303 	mul.w	r3, r1, r3
 8009028:	4413      	add	r3, r2
 800902a:	3390      	adds	r3, #144	@ 0x90
 800902c:	2201      	movs	r2, #1
 800902e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009036:	3301      	adds	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	2b02      	cmp	r3, #2
 8009044:	d10c      	bne.n	8009060 <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800904c:	4619      	mov	r1, r3
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	2334      	movs	r3, #52	@ 0x34
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	3390      	adds	r3, #144	@ 0x90
 800905a:	2208      	movs	r2, #8
 800905c:	701a      	strb	r2, [r3, #0]
            break;
 800905e:	e03a      	b.n	80090d6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	2b04      	cmp	r3, #4
 8009064:	d137      	bne.n	80090d6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800906c:	4619      	mov	r1, r3
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	2334      	movs	r3, #52	@ 0x34
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	4413      	add	r3, r2
 8009078:	3390      	adds	r3, #144	@ 0x90
 800907a:	2201      	movs	r2, #1
 800907c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009084:	4619      	mov	r1, r3
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	2334      	movs	r3, #52	@ 0x34
 800908a:	fb01 f303 	mul.w	r3, r1, r3
 800908e:	4413      	add	r3, r2
 8009090:	3391      	adds	r3, #145	@ 0x91
 8009092:	2202      	movs	r2, #2
 8009094:	701a      	strb	r2, [r3, #0]
            break;
 8009096:	e01e      	b.n	80090d6 <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800909e:	3301      	adds	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80090a8:	e016      	b.n	80090d8 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2201      	movs	r2, #1
 80090b6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090be:	2102      	movs	r1, #2
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	4798      	blx	r3
      break;
 80090c4:	e00c      	b.n	80090e0 <USBH_MSC_Process+0x510>
            break;
 80090c6:	bf00      	nop
 80090c8:	e00a      	b.n	80090e0 <USBH_MSC_Process+0x510>
            break;
 80090ca:	bf00      	nop
 80090cc:	e008      	b.n	80090e0 <USBH_MSC_Process+0x510>
            break;
 80090ce:	bf00      	nop
 80090d0:	e006      	b.n	80090e0 <USBH_MSC_Process+0x510>
            break;
 80090d2:	bf00      	nop
 80090d4:	e004      	b.n	80090e0 <USBH_MSC_Process+0x510>
            break;
 80090d6:	bf00      	nop
      break;
 80090d8:	e002      	b.n	80090e0 <USBH_MSC_Process+0x510>
      error = USBH_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]
      break;
 80090de:	bf00      	nop
  }
  return error;
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop

080090ec <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b088      	sub	sp, #32
 8009106:	af02      	add	r7, sp, #8
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009118:	2301      	movs	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	2134      	movs	r1, #52	@ 0x34
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	4413      	add	r3, r2
 800912c:	3390      	adds	r3, #144	@ 0x90
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b07      	cmp	r3, #7
 8009132:	d03c      	beq.n	80091ae <USBH_MSC_RdWrProcess+0xac>
 8009134:	2b07      	cmp	r3, #7
 8009136:	f300 80a7 	bgt.w	8009288 <USBH_MSC_RdWrProcess+0x186>
 800913a:	2b05      	cmp	r3, #5
 800913c:	d06c      	beq.n	8009218 <USBH_MSC_RdWrProcess+0x116>
 800913e:	2b06      	cmp	r3, #6
 8009140:	f040 80a2 	bne.w	8009288 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009144:	78f9      	ldrb	r1, [r7, #3]
 8009146:	2300      	movs	r3, #0
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	2300      	movs	r3, #0
 800914c:	2200      	movs	r2, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fea4 	bl	8009e9c <USBH_MSC_SCSI_Read>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10b      	bne.n	8009176 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	2134      	movs	r1, #52	@ 0x34
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	4413      	add	r3, r2
 800916a:	3390      	adds	r3, #144	@ 0x90
 800916c:	2201      	movs	r2, #1
 800916e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009174:	e08a      	b.n	800928c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d109      	bne.n	8009190 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	2134      	movs	r1, #52	@ 0x34
 8009182:	fb01 f303 	mul.w	r3, r1, r3
 8009186:	4413      	add	r3, r2
 8009188:	3390      	adds	r3, #144	@ 0x90
 800918a:	2205      	movs	r2, #5
 800918c:	701a      	strb	r2, [r3, #0]
      break;
 800918e:	e07d      	b.n	800928c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	2b04      	cmp	r3, #4
 8009194:	d17a      	bne.n	800928c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009196:	78fb      	ldrb	r3, [r7, #3]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	2134      	movs	r1, #52	@ 0x34
 800919c:	fb01 f303 	mul.w	r3, r1, r3
 80091a0:	4413      	add	r3, r2
 80091a2:	3390      	adds	r3, #144	@ 0x90
 80091a4:	2208      	movs	r2, #8
 80091a6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80091a8:	2302      	movs	r3, #2
 80091aa:	75fb      	strb	r3, [r7, #23]
      break;
 80091ac:	e06e      	b.n	800928c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80091ae:	78f9      	ldrb	r1, [r7, #3]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	2200      	movs	r2, #0
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fe04 	bl	8009dc6 <USBH_MSC_SCSI_Write>
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	2134      	movs	r1, #52	@ 0x34
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	3390      	adds	r3, #144	@ 0x90
 80091d6:	2201      	movs	r2, #1
 80091d8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80091de:	e057      	b.n	8009290 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d109      	bne.n	80091fa <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	2134      	movs	r1, #52	@ 0x34
 80091ec:	fb01 f303 	mul.w	r3, r1, r3
 80091f0:	4413      	add	r3, r2
 80091f2:	3390      	adds	r3, #144	@ 0x90
 80091f4:	2205      	movs	r2, #5
 80091f6:	701a      	strb	r2, [r3, #0]
      break;
 80091f8:	e04a      	b.n	8009290 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d147      	bne.n	8009290 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	2134      	movs	r1, #52	@ 0x34
 8009206:	fb01 f303 	mul.w	r3, r1, r3
 800920a:	4413      	add	r3, r2
 800920c:	3390      	adds	r3, #144	@ 0x90
 800920e:	2208      	movs	r2, #8
 8009210:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009212:	2302      	movs	r3, #2
 8009214:	75fb      	strb	r3, [r7, #23]
      break;
 8009216:	e03b      	b.n	8009290 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	2234      	movs	r2, #52	@ 0x34
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	3398      	adds	r3, #152	@ 0x98
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4413      	add	r3, r2
 8009226:	1d1a      	adds	r2, r3, #4
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fd51 	bl	8009cd4 <USBH_MSC_SCSI_RequestSense>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d113      	bne.n	8009264 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	2134      	movs	r1, #52	@ 0x34
 8009242:	fb01 f303 	mul.w	r3, r1, r3
 8009246:	4413      	add	r3, r2
 8009248:	3390      	adds	r3, #144	@ 0x90
 800924a:	2201      	movs	r2, #1
 800924c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	2134      	movs	r1, #52	@ 0x34
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	4413      	add	r3, r2
 800925a:	3391      	adds	r3, #145	@ 0x91
 800925c:	2202      	movs	r2, #2
 800925e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009260:	2302      	movs	r3, #2
 8009262:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	2b02      	cmp	r3, #2
 8009268:	d014      	beq.n	8009294 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b04      	cmp	r3, #4
 800926e:	d111      	bne.n	8009294 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	2134      	movs	r1, #52	@ 0x34
 8009276:	fb01 f303 	mul.w	r3, r1, r3
 800927a:	4413      	add	r3, r2
 800927c:	3390      	adds	r3, #144	@ 0x90
 800927e:	2208      	movs	r2, #8
 8009280:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009282:	2302      	movs	r3, #2
 8009284:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009286:	e005      	b.n	8009294 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009288:	bf00      	nop
 800928a:	e004      	b.n	8009296 <USBH_MSC_RdWrProcess+0x194>
      break;
 800928c:	bf00      	nop
 800928e:	e002      	b.n	8009296 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009290:	bf00      	nop
 8009292:	e000      	b.n	8009296 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009294:	bf00      	nop

  }
  return error;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b0b      	cmp	r3, #11
 80092be:	d10c      	bne.n	80092da <USBH_MSC_UnitIsReady+0x3a>
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	2134      	movs	r1, #52	@ 0x34
 80092c6:	fb01 f303 	mul.w	r3, r1, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	3391      	adds	r3, #145	@ 0x91
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e001      	b.n	80092de <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	460b      	mov	r3, r1
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b0b      	cmp	r3, #11
 800930c:	d10d      	bne.n	800932a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	2234      	movs	r2, #52	@ 0x34
 8009312:	fb02 f303 	mul.w	r3, r2, r3
 8009316:	3390      	adds	r3, #144	@ 0x90
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	4413      	add	r3, r2
 800931c:	2234      	movs	r2, #52	@ 0x34
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f006 f8c9 	bl	800f4b8 <memcpy>
    return USBH_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	e000      	b.n	800932c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800932a:	2302      	movs	r3, #2
  }
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af02      	add	r7, sp, #8
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	607a      	str	r2, [r7, #4]
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	460b      	mov	r3, r1
 8009342:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00e      	beq.n	8009378 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009360:	2b0b      	cmp	r3, #11
 8009362:	d109      	bne.n	8009378 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	2134      	movs	r1, #52	@ 0x34
 800936a:	fb01 f303 	mul.w	r3, r1, r3
 800936e:	4413      	add	r3, r2
 8009370:	3390      	adds	r3, #144	@ 0x90
 8009372:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009374:	2b01      	cmp	r3, #1
 8009376:	d001      	beq.n	800937c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009378:	2302      	movs	r3, #2
 800937a:	e040      	b.n	80093fe <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2206      	movs	r2, #6
 8009380:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009382:	7afb      	ldrb	r3, [r7, #11]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	2134      	movs	r1, #52	@ 0x34
 8009388:	fb01 f303 	mul.w	r3, r1, r3
 800938c:	4413      	add	r3, r2
 800938e:	3390      	adds	r3, #144	@ 0x90
 8009390:	2206      	movs	r2, #6
 8009392:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	b29a      	uxth	r2, r3
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800939e:	7af9      	ldrb	r1, [r7, #11]
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fd77 	bl	8009e9c <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80093b4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80093b6:	e016      	b.n	80093e6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad2      	subs	r2, r2, r3
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80093c8:	fb01 f303 	mul.w	r3, r1, r3
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d805      	bhi.n	80093dc <USBH_MSC_Read+0xa8>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2201      	movs	r2, #1
 80093e0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80093e2:	2302      	movs	r3, #2
 80093e4:	e00b      	b.n	80093fe <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80093e6:	7afb      	ldrb	r3, [r7, #11]
 80093e8:	4619      	mov	r1, r3
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7ff fe89 	bl	8009102 <USBH_MSC_RdWrProcess>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d0e0      	beq.n	80093b8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2201      	movs	r2, #1
 80093fa:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b088      	sub	sp, #32
 800940a:	af02      	add	r7, sp, #8
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
 8009412:	460b      	mov	r3, r1
 8009414:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00e      	beq.n	800944a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009432:	2b0b      	cmp	r3, #11
 8009434:	d109      	bne.n	800944a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	2134      	movs	r1, #52	@ 0x34
 800943c:	fb01 f303 	mul.w	r3, r1, r3
 8009440:	4413      	add	r3, r2
 8009442:	3390      	adds	r3, #144	@ 0x90
 8009444:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009446:	2b01      	cmp	r3, #1
 8009448:	d001      	beq.n	800944e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800944a:	2302      	movs	r3, #2
 800944c:	e040      	b.n	80094d0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2207      	movs	r2, #7
 8009452:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	2134      	movs	r1, #52	@ 0x34
 800945a:	fb01 f303 	mul.w	r3, r1, r3
 800945e:	4413      	add	r3, r2
 8009460:	3390      	adds	r3, #144	@ 0x90
 8009462:	2207      	movs	r2, #7
 8009464:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	b29a      	uxth	r2, r3
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009470:	7af9      	ldrb	r1, [r7, #11]
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 fca3 	bl	8009dc6 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009486:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009488:	e016      	b.n	80094b8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	f242 7110 	movw	r1, #10000	@ 0x2710
 800949a:	fb01 f303 	mul.w	r3, r1, r3
 800949e:	429a      	cmp	r2, r3
 80094a0:	d805      	bhi.n	80094ae <USBH_MSC_Write+0xa8>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d104      	bne.n	80094b8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	2201      	movs	r2, #1
 80094b2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80094b4:	2302      	movs	r3, #2
 80094b6:	e00b      	b.n	80094d0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	4619      	mov	r1, r3
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff fe20 	bl	8009102 <USBH_MSC_RdWrProcess>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d0e0      	beq.n	800948a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2201      	movs	r2, #1
 80094cc:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2221      	movs	r2, #33	@ 0x21
 80094e4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	22ff      	movs	r2, #255	@ 0xff
 80094ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80094fe:	2200      	movs	r2, #0
 8009500:	2100      	movs	r1, #0
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f001 fd9e 	bl	800b044 <USBH_CtlReq>
 8009508:	4603      	mov	r3, r0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	22a1      	movs	r2, #161	@ 0xa1
 8009520:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	22fe      	movs	r2, #254	@ 0xfe
 8009526:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800953a:	2201      	movs	r2, #1
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fd80 	bl	800b044 <USBH_CtlReq>
 8009544:	4603      	mov	r3, r0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4a09      	ldr	r2, [pc, #36]	@ (800958c <USBH_MSC_BOT_Init+0x3c>)
 8009566:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4a09      	ldr	r2, [pc, #36]	@ (8009590 <USBH_MSC_BOT_Init+0x40>)
 800956c:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	43425355 	.word	0x43425355
 8009590:	20304050 	.word	0x20304050

08009594 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af02      	add	r7, sp, #8
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80095a0:	2301      	movs	r3, #1
 80095a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80095a4:	2301      	movs	r3, #1
 80095a6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80095a8:	2301      	movs	r3, #1
 80095aa:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80095c4:	3b01      	subs	r3, #1
 80095c6:	2b0a      	cmp	r3, #10
 80095c8:	f200 819e 	bhi.w	8009908 <USBH_MSC_BOT_Process+0x374>
 80095cc:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <USBH_MSC_BOT_Process+0x40>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	08009601 	.word	0x08009601
 80095d8:	08009629 	.word	0x08009629
 80095dc:	08009693 	.word	0x08009693
 80095e0:	080096b1 	.word	0x080096b1
 80095e4:	08009735 	.word	0x08009735
 80095e8:	08009757 	.word	0x08009757
 80095ec:	080097ef 	.word	0x080097ef
 80095f0:	0800980b 	.word	0x0800980b
 80095f4:	0800985d 	.word	0x0800985d
 80095f8:	0800988d 	.word	0x0800988d
 80095fc:	080098ef 	.word	0x080098ef
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	795b      	ldrb	r3, [r3, #5]
 800961a:	2201      	movs	r2, #1
 800961c:	9200      	str	r2, [sp, #0]
 800961e:	221f      	movs	r2, #31
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 ff1e 	bl	800b462 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009626:	e17e      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	795b      	ldrb	r3, [r3, #5]
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f005 fd32 	bl	800f098 <USBH_LL_GetURBState>
 8009634:	4603      	mov	r3, r0
 8009636:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009638:	7d3b      	ldrb	r3, [r7, #20]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d118      	bne.n	8009670 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00f      	beq.n	8009666 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800964c:	b25b      	sxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	da04      	bge.n	800965c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2203      	movs	r2, #3
 8009656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800965a:	e157      	b.n	800990c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2205      	movs	r2, #5
 8009660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009664:	e152      	b.n	800990c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	2207      	movs	r2, #7
 800966a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800966e:	e14d      	b.n	800990c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009670:	7d3b      	ldrb	r3, [r7, #20]
 8009672:	2b02      	cmp	r3, #2
 8009674:	d104      	bne.n	8009680 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800967e:	e145      	b.n	800990c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009680:	7d3b      	ldrb	r3, [r7, #20]
 8009682:	2b05      	cmp	r3, #5
 8009684:	f040 8142 	bne.w	800990c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	220a      	movs	r2, #10
 800968c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009690:	e13c      	b.n	800990c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	895a      	ldrh	r2, [r3, #10]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	791b      	ldrb	r3, [r3, #4]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 ff03 	bl	800b4ac <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2204      	movs	r2, #4
 80096aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 80096ae:	e13a      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	791b      	ldrb	r3, [r3, #4]
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f005 fcee 	bl	800f098 <USBH_LL_GetURBState>
 80096bc:	4603      	mov	r3, r0
 80096be:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80096c0:	7d3b      	ldrb	r3, [r7, #20]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d12d      	bne.n	8009722 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	8952      	ldrh	r2, [r2, #10]
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d910      	bls.n	80096f4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	8952      	ldrh	r2, [r2, #10]
 80096dc:	441a      	add	r2, r3
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	8952      	ldrh	r2, [r2, #10]
 80096ec:	1a9a      	subs	r2, r3, r2
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80096f2:	e002      	b.n	80096fa <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2200      	movs	r2, #0
 80096f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	895a      	ldrh	r2, [r3, #10]
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	791b      	ldrb	r3, [r3, #4]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 fecb 	bl	800b4ac <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009716:	e0fb      	b.n	8009910 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2207      	movs	r2, #7
 800971c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009720:	e0f6      	b.n	8009910 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009722:	7d3b      	ldrb	r3, [r7, #20]
 8009724:	2b05      	cmp	r3, #5
 8009726:	f040 80f3 	bne.w	8009910 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2209      	movs	r2, #9
 800972e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009732:	e0ed      	b.n	8009910 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	891a      	ldrh	r2, [r3, #8]
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	795b      	ldrb	r3, [r3, #5]
 8009742:	2001      	movs	r0, #1
 8009744:	9000      	str	r0, [sp, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 fe8b 	bl	800b462 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2206      	movs	r2, #6
 8009750:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009754:	e0e7      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	795b      	ldrb	r3, [r3, #5]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f005 fc9b 	bl	800f098 <USBH_LL_GetURBState>
 8009762:	4603      	mov	r3, r0
 8009764:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009766:	7d3b      	ldrb	r3, [r7, #20]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d12f      	bne.n	80097cc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	8912      	ldrh	r2, [r2, #8]
 8009774:	4293      	cmp	r3, r2
 8009776:	d910      	bls.n	800979a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	8912      	ldrh	r2, [r2, #8]
 8009782:	441a      	add	r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	8912      	ldrh	r2, [r2, #8]
 8009792:	1a9a      	subs	r2, r3, r2
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009798:	e002      	b.n	80097a0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2200      	movs	r2, #0
 800979e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00c      	beq.n	80097c2 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	891a      	ldrh	r2, [r3, #8]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	795b      	ldrb	r3, [r3, #5]
 80097b6:	2001      	movs	r0, #1
 80097b8:	9000      	str	r0, [sp, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 fe51 	bl	800b462 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80097c0:	e0a8      	b.n	8009914 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2207      	movs	r2, #7
 80097c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80097ca:	e0a3      	b.n	8009914 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097cc:	7d3b      	ldrb	r3, [r7, #20]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d104      	bne.n	80097dc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2205      	movs	r2, #5
 80097d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80097da:	e09b      	b.n	8009914 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80097dc:	7d3b      	ldrb	r3, [r7, #20]
 80097de:	2b05      	cmp	r3, #5
 80097e0:	f040 8098 	bne.w	8009914 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	220a      	movs	r2, #10
 80097e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80097ec:	e092      	b.n	8009914 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	791b      	ldrb	r3, [r3, #4]
 80097f8:	220d      	movs	r2, #13
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 fe56 	bl	800b4ac <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2208      	movs	r2, #8
 8009804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009808:	e08d      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	791b      	ldrb	r3, [r3, #4]
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f005 fc41 	bl	800f098 <USBH_LL_GetURBState>
 8009816:	4603      	mov	r3, r0
 8009818:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800981a:	7d3b      	ldrb	r3, [r7, #20]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d115      	bne.n	800984c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f8a9 	bl	8009988 <USBH_MSC_DecodeCSW>
 8009836:	4603      	mov	r3, r0
 8009838:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800983a:	7d7b      	ldrb	r3, [r7, #21]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d102      	bne.n	8009846 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009844:	e068      	b.n	8009918 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009846:	2302      	movs	r3, #2
 8009848:	75fb      	strb	r3, [r7, #23]
      break;
 800984a:	e065      	b.n	8009918 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800984c:	7d3b      	ldrb	r3, [r7, #20]
 800984e:	2b05      	cmp	r3, #5
 8009850:	d162      	bne.n	8009918 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2209      	movs	r2, #9
 8009856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800985a:	e05d      	b.n	8009918 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	2200      	movs	r2, #0
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f864 	bl	8009930 <USBH_MSC_BOT_Abort>
 8009868:	4603      	mov	r3, r0
 800986a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800986c:	7dbb      	ldrb	r3, [r7, #22]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d104      	bne.n	800987c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	2207      	movs	r2, #7
 8009876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800987a:	e04f      	b.n	800991c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800987c:	7dbb      	ldrb	r3, [r7, #22]
 800987e:	2b04      	cmp	r3, #4
 8009880:	d14c      	bne.n	800991c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	220b      	movs	r2, #11
 8009886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800988a:	e047      	b.n	800991c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	2201      	movs	r2, #1
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f84c 	bl	8009930 <USBH_MSC_BOT_Abort>
 8009898:	4603      	mov	r3, r0
 800989a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800989c:	7dbb      	ldrb	r3, [r7, #22]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d11d      	bne.n	80098de <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	795b      	ldrb	r3, [r3, #5]
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f005 fc52 	bl	800f152 <USBH_LL_GetToggle>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	7959      	ldrb	r1, [r3, #5]
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	f1c3 0301 	rsb	r3, r3, #1
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f005 fc13 	bl	800f0ec <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	791b      	ldrb	r3, [r3, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f005 fc0c 	bl	800f0ec <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	2209      	movs	r2, #9
 80098d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80098dc:	e020      	b.n	8009920 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80098de:	7dbb      	ldrb	r3, [r7, #22]
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d11d      	bne.n	8009920 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	220b      	movs	r2, #11
 80098e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80098ec:	e018      	b.n	8009920 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff fdf2 	bl	80094d8 <USBH_MSC_BOT_REQ_Reset>
 80098f4:	4603      	mov	r3, r0
 80098f6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d112      	bne.n	8009924 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8009906:	e00d      	b.n	8009924 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009908:	bf00      	nop
 800990a:	e00c      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>
      break;
 800990c:	bf00      	nop
 800990e:	e00a      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>
      break;
 8009910:	bf00      	nop
 8009912:	e008      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>
      break;
 8009914:	bf00      	nop
 8009916:	e006      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>
      break;
 8009918:	bf00      	nop
 800991a:	e004      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>
      break;
 800991c:	bf00      	nop
 800991e:	e002      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>
      break;
 8009920:	bf00      	nop
 8009922:	e000      	b.n	8009926 <USBH_MSC_BOT_Process+0x392>
      break;
 8009924:	bf00      	nop
  }
  return status;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
 800993c:	4613      	mov	r3, r2
 800993e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009940:	2302      	movs	r3, #2
 8009942:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800994e:	78bb      	ldrb	r3, [r7, #2]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <USBH_MSC_BOT_Abort+0x2a>
 8009954:	2b01      	cmp	r3, #1
 8009956:	d009      	beq.n	800996c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009958:	e011      	b.n	800997e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	79db      	ldrb	r3, [r3, #7]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 f996 	bl	800ac92 <USBH_ClrFeature>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
      break;
 800996a:	e008      	b.n	800997e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	799b      	ldrb	r3, [r3, #6]
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 f98d 	bl	800ac92 <USBH_ClrFeature>
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]
      break;
 800997c:	bf00      	nop
  }
  return status;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800999a:	2301      	movs	r3, #1
 800999c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	791b      	ldrb	r3, [r3, #4]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f005 fae5 	bl	800ef74 <USBH_LL_GetLastXferSize>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b0d      	cmp	r3, #13
 80099ae:	d002      	beq.n	80099b6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80099b0:	2302      	movs	r3, #2
 80099b2:	73fb      	strb	r3, [r7, #15]
 80099b4:	e024      	b.n	8009a00 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099ba:	4a14      	ldr	r2, [pc, #80]	@ (8009a0c <USBH_MSC_DecodeCSW+0x84>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d11d      	bne.n	80099fc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d119      	bne.n	8009a00 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80099d6:	2300      	movs	r3, #0
 80099d8:	73fb      	strb	r3, [r7, #15]
 80099da:	e011      	b.n	8009a00 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d102      	bne.n	80099ec <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80099e6:	2301      	movs	r3, #1
 80099e8:	73fb      	strb	r3, [r7, #15]
 80099ea:	e009      	b.n	8009a00 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d104      	bne.n	8009a00 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80099f6:	2302      	movs	r3, #2
 80099f8:	73fb      	strb	r3, [r7, #15]
 80099fa:	e001      	b.n	8009a00 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80099fc:	2302      	movs	r3, #2
 80099fe:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	53425355 	.word	0x53425355

08009a10 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d002      	beq.n	8009a3a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d021      	beq.n	8009a7c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009a38:	e028      	b.n	8009a8c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	3363      	adds	r3, #99	@ 0x63
 8009a54:	2210      	movs	r2, #16
 8009a56:	2100      	movs	r1, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f005 fcbf 	bl	800f3dc <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2202      	movs	r2, #2
 8009a72:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8009a76:	2301      	movs	r3, #1
 8009a78:	73fb      	strb	r3, [r7, #15]
      break;
 8009a7a:	e007      	b.n	8009a8c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff fd87 	bl	8009594 <USBH_MSC_BOT_Process>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8a:	bf00      	nop
  }

  return error;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b086      	sub	sp, #24
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d002      	beq.n	8009ac2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d027      	beq.n	8009b10 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009ac0:	e05e      	b.n	8009b80 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2280      	movs	r2, #128	@ 0x80
 8009acc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	220a      	movs	r2, #10
 8009ad4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	3363      	adds	r3, #99	@ 0x63
 8009adc:	2210      	movs	r2, #16
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f005 fc7b 	bl	800f3dc <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2225      	movs	r2, #37	@ 0x25
 8009aea:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2202      	movs	r2, #2
 8009afa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f103 0210 	add.w	r2, r3, #16
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0e:	e037      	b.n	8009b80 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	4619      	mov	r1, r3
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff fd3d 	bl	8009594 <USBH_MSC_BOT_Process>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d12c      	bne.n	8009b7e <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b2a:	3303      	adds	r3, #3
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b36:	3302      	adds	r3, #2
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b44:	3301      	adds	r3, #1
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b4a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	061b      	lsls	r3, r3, #24
 8009b56:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b62:	3307      	adds	r3, #7
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b6e:	3306      	adds	r3, #6
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	4313      	orrs	r3, r2
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	809a      	strh	r2, [r3, #4]
      break;
 8009b7e:	bf00      	nop
  }

  return error;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b086      	sub	sp, #24
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	460b      	mov	r3, r1
 8009b94:	607a      	str	r2, [r7, #4]
 8009b96:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d002      	beq.n	8009bb6 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d03d      	beq.n	8009c30 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009bb4:	e089      	b.n	8009cca <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2224      	movs	r2, #36	@ 0x24
 8009bba:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2280      	movs	r2, #128	@ 0x80
 8009bc0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	220a      	movs	r2, #10
 8009bc8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	3363      	adds	r3, #99	@ 0x63
 8009bd0:	220a      	movs	r2, #10
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f005 fc01 	bl	800f3dc <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2212      	movs	r2, #18
 8009bde:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	015b      	lsls	r3, r3, #5
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2224      	movs	r2, #36	@ 0x24
 8009c02:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f103 0210 	add.w	r2, r3, #16
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c2e:	e04c      	b.n	8009cca <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	4619      	mov	r1, r3
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff fcad 	bl	8009594 <USBH_MSC_BOT_Process>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d141      	bne.n	8009cc8 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009c44:	2222      	movs	r2, #34	@ 0x22
 8009c46:	2100      	movs	r1, #0
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f005 fbc7 	bl	800f3dc <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	f003 031f 	and.w	r3, r3, #31
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c76:	3301      	adds	r3, #1
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	b25b      	sxtb	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	da03      	bge.n	8009c88 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	709a      	strb	r2, [r3, #2]
 8009c86:	e002      	b.n	8009c8e <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	1cd8      	adds	r0, r3, #3
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c98:	3308      	adds	r3, #8
 8009c9a:	2208      	movs	r2, #8
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f005 fc0b 	bl	800f4b8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f103 000c 	add.w	r0, r3, #12
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cae:	3310      	adds	r3, #16
 8009cb0:	2210      	movs	r2, #16
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	f005 fc00 	bl	800f4b8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	331d      	adds	r3, #29
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8009cc2:	3220      	adds	r2, #32
 8009cc4:	6812      	ldr	r2, [r2, #0]
 8009cc6:	601a      	str	r2, [r3, #0]
      break;
 8009cc8:	bf00      	nop
  }

  return error;
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d002      	beq.n	8009d00 <USBH_MSC_SCSI_RequestSense+0x2c>
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d03d      	beq.n	8009d7a <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009cfe:	e05d      	b.n	8009dbc <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	220e      	movs	r2, #14
 8009d04:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2280      	movs	r2, #128	@ 0x80
 8009d0a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	220a      	movs	r2, #10
 8009d12:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	3363      	adds	r3, #99	@ 0x63
 8009d1a:	2210      	movs	r2, #16
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f005 fb5c 	bl	800f3dc <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2203      	movs	r2, #3
 8009d28:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	015b      	lsls	r3, r3, #5
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	220e      	movs	r2, #14
 8009d4c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f103 0210 	add.w	r2, r3, #16
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009d74:	2301      	movs	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
      break;
 8009d78:	e020      	b.n	8009dbc <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f7ff fc08 	bl	8009594 <USBH_MSC_BOT_Process>
 8009d84:	4603      	mov	r3, r0
 8009d86:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d115      	bne.n	8009dba <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d94:	3302      	adds	r3, #2
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f003 030f 	and.w	r3, r3, #15
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009da8:	7b1a      	ldrb	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009db4:	7b5a      	ldrb	r2, [r3, #13]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	709a      	strb	r2, [r3, #2]
      break;
 8009dba:	bf00      	nop
  }

  return error;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b086      	sub	sp, #24
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d002      	beq.n	8009df4 <USBH_MSC_SCSI_Write+0x2e>
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d047      	beq.n	8009e82 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009df2:	e04e      	b.n	8009e92 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	fb03 f202 	mul.w	r2, r3, r2
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	220a      	movs	r2, #10
 8009e12:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3363      	adds	r3, #99	@ 0x63
 8009e1a:	2210      	movs	r2, #16
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f005 fadc 	bl	800f3dc <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	222a      	movs	r2, #42	@ 0x2a
 8009e28:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009e2c:	79fa      	ldrb	r2, [r7, #7]
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009e34:	79ba      	ldrb	r2, [r7, #6]
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009e3c:	797a      	ldrb	r2, [r7, #5]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009e44:	1d3b      	adds	r3, r7, #4
 8009e46:	781a      	ldrb	r2, [r3, #0]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009e4e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009e58:	f107 0320 	add.w	r3, r7, #32
 8009e5c:	781a      	ldrb	r2, [r3, #0]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e80:	e007      	b.n	8009e92 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	4619      	mov	r1, r3
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f7ff fb84 	bl	8009594 <USBH_MSC_BOT_Process>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e90:	bf00      	nop
  }

  return error;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009eac:	2302      	movs	r3, #2
 8009eae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d002      	beq.n	8009eca <USBH_MSC_SCSI_Read+0x2e>
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d047      	beq.n	8009f58 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009ec8:	e04e      	b.n	8009f68 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	fb03 f202 	mul.w	r2, r3, r2
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2280      	movs	r2, #128	@ 0x80
 8009ee0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	220a      	movs	r2, #10
 8009ee8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	3363      	adds	r3, #99	@ 0x63
 8009ef0:	2210      	movs	r2, #16
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f005 fa71 	bl	800f3dc <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2228      	movs	r2, #40	@ 0x28
 8009efe:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009f02:	79fa      	ldrb	r2, [r7, #7]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009f0a:	79ba      	ldrb	r2, [r7, #6]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009f12:	797a      	ldrb	r2, [r7, #5]
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009f1a:	1d3b      	adds	r3, r7, #4
 8009f1c:	781a      	ldrb	r2, [r3, #0]
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009f24:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009f2e:	f107 0320 	add.w	r3, r7, #32
 8009f32:	781a      	ldrb	r2, [r3, #0]
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	2202      	movs	r2, #2
 8009f46:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009f52:	2301      	movs	r3, #1
 8009f54:	75fb      	strb	r3, [r7, #23]
      break;
 8009f56:	e007      	b.n	8009f68 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f58:	7afb      	ldrb	r3, [r7, #11]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fb19 	bl	8009594 <USBH_MSC_BOT_Process>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]
      break;
 8009f66:	bf00      	nop
  }

  return error;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	60b9      	str	r1, [r7, #8]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009f86:	2302      	movs	r3, #2
 8009f88:	e029      	b.n	8009fde <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	79fa      	ldrb	r2, [r7, #7]
 8009f8e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 f81f 	bl	8009fe6 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f004 ff18 	bl	800ee0c <USBH_LL_Init>

  return USBH_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	e009      	b.n	800a00c <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	33e0      	adds	r3, #224	@ 0xe0
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	2200      	movs	r2, #0
 800a004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3301      	adds	r3, #1
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b0e      	cmp	r3, #14
 800a010:	d9f2      	bls.n	8009ff8 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e009      	b.n	800a02c <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a022:	2200      	movs	r2, #0
 800a024:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a032:	d3f1      	bcc.n	800a018 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2240      	movs	r2, #64	@ 0x40
 800a058:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d016      	beq.n	800a0d0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10e      	bne.n	800a0ca <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a0b2:	1c59      	adds	r1, r3, #1
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	33de      	adds	r3, #222	@ 0xde
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
 800a0c8:	e004      	b.n	800a0d4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	73fb      	strb	r3, [r7, #15]
 800a0ce:	e001      	b.n	800a0d4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a0f8:	78fa      	ldrb	r2, [r7, #3]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d204      	bcs.n	800a108 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a106:	e001      	b.n	800a10c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a108:	2302      	movs	r3, #2
 800a10a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b087      	sub	sp, #28
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	4608      	mov	r0, r1
 800a124:	4611      	mov	r1, r2
 800a126:	461a      	mov	r2, r3
 800a128:	4603      	mov	r3, r0
 800a12a:	70fb      	strb	r3, [r7, #3]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70bb      	strb	r3, [r7, #2]
 800a130:	4613      	mov	r3, r2
 800a132:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a138:	2300      	movs	r3, #0
 800a13a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a142:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a144:	e025      	b.n	800a192 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	221a      	movs	r2, #26
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
 800a14e:	3308      	adds	r3, #8
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	3302      	adds	r3, #2
 800a156:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	795b      	ldrb	r3, [r3, #5]
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d002      	beq.n	800a168 <USBH_FindInterface+0x4e>
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	2bff      	cmp	r3, #255	@ 0xff
 800a166:	d111      	bne.n	800a18c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a16c:	78ba      	ldrb	r2, [r7, #2]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d002      	beq.n	800a178 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a172:	78bb      	ldrb	r3, [r7, #2]
 800a174:	2bff      	cmp	r3, #255	@ 0xff
 800a176:	d109      	bne.n	800a18c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a17c:	787a      	ldrb	r2, [r7, #1]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d002      	beq.n	800a188 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a182:	787b      	ldrb	r3, [r7, #1]
 800a184:	2bff      	cmp	r3, #255	@ 0xff
 800a186:	d101      	bne.n	800a18c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
 800a18a:	e006      	b.n	800a19a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	3301      	adds	r3, #1
 800a190:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d9d6      	bls.n	800a146 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a198:	23ff      	movs	r3, #255	@ 0xff
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f004 fe68 	bl	800ee84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f004 ff81 	bl	800f0be <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af04      	add	r7, sp, #16
 800a1ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d102      	bne.n	800a1ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2203      	movs	r2, #3
 800a1e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b0b      	cmp	r3, #11
 800a1f2:	f200 81b0 	bhi.w	800a556 <USBH_Process+0x38e>
 800a1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1fc <USBH_Process+0x34>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a22d 	.word	0x0800a22d
 800a200:	0800a25f 	.word	0x0800a25f
 800a204:	0800a2c7 	.word	0x0800a2c7
 800a208:	0800a4f1 	.word	0x0800a4f1
 800a20c:	0800a557 	.word	0x0800a557
 800a210:	0800a367 	.word	0x0800a367
 800a214:	0800a497 	.word	0x0800a497
 800a218:	0800a39d 	.word	0x0800a39d
 800a21c:	0800a3bd 	.word	0x0800a3bd
 800a220:	0800a3db 	.word	0x0800a3db
 800a224:	0800a409 	.word	0x0800a409
 800a228:	0800a4d9 	.word	0x0800a4d9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8190 	beq.w	800a55a <USBH_Process+0x392>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a240:	20c8      	movs	r0, #200	@ 0xc8
 800a242:	f004 ffb9 	bl	800f1b8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f004 fe79 	bl	800ef3e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a25c:	e17d      	b.n	800a55a <USBH_Process+0x392>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a264:	2b01      	cmp	r3, #1
 800a266:	d107      	bne.n	800a278 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a276:	e17f      	b.n	800a578 <USBH_Process+0x3b0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a27e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a282:	d914      	bls.n	800a2ae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a28a:	3301      	adds	r3, #1
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d903      	bls.n	800a2a6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	220d      	movs	r2, #13
 800a2a2:	701a      	strb	r2, [r3, #0]
      break;
 800a2a4:	e168      	b.n	800a578 <USBH_Process+0x3b0>
            phost->gState = HOST_IDLE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	701a      	strb	r2, [r3, #0]
      break;
 800a2ac:	e164      	b.n	800a578 <USBH_Process+0x3b0>
          phost->Timeout += 10U;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a2b4:	f103 020a 	add.w	r2, r3, #10
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a2be:	200a      	movs	r0, #10
 800a2c0:	f004 ff7a 	bl	800f1b8 <USBH_Delay>
      break;
 800a2c4:	e158      	b.n	800a578 <USBH_Process+0x3b0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a2d6:	2104      	movs	r1, #4
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a2dc:	2064      	movs	r0, #100	@ 0x64
 800a2de:	f004 ff6b 	bl	800f1b8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f004 fe04 	bl	800eef0 <USBH_LL_GetSpeed>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2205      	movs	r2, #5
 800a2f6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 f923 	bl	800b546 <USBH_AllocPipe>
 800a300:	4603      	mov	r3, r0
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a308:	2180      	movs	r1, #128	@ 0x80
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f001 f91b 	bl	800b546 <USBH_AllocPipe>
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	7919      	ldrb	r1, [r3, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a32c:	9202      	str	r2, [sp, #8]
 800a32e:	2200      	movs	r2, #0
 800a330:	9201      	str	r2, [sp, #4]
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4603      	mov	r3, r0
 800a336:	2280      	movs	r2, #128	@ 0x80
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 f8d5 	bl	800b4e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7959      	ldrb	r1, [r3, #5]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a352:	9202      	str	r2, [sp, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	9201      	str	r2, [sp, #4]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	4603      	mov	r3, r0
 800a35c:	2200      	movs	r2, #0
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 f8c2 	bl	800b4e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a364:	e108      	b.n	800a578 <USBH_Process+0x3b0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f90c 	bl	800a584 <USBH_HandleEnum>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	f040 80f2 	bne.w	800a55e <USBH_Process+0x396>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d103      	bne.n	800a394 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2208      	movs	r2, #8
 800a390:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a392:	e0e4      	b.n	800a55e <USBH_Process+0x396>
          phost->gState = HOST_INPUT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2207      	movs	r2, #7
 800a398:	701a      	strb	r2, [r3, #0]
      break;
 800a39a:	e0e0      	b.n	800a55e <USBH_Process+0x396>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 80dd 	beq.w	800a562 <USBH_Process+0x39a>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a3ba:	e0d2      	b.n	800a562 <USBH_Process+0x39a>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fc1d 	bl	800ac04 <USBH_SetCfg>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 80ca 	bne.w	800a566 <USBH_Process+0x39e>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2209      	movs	r2, #9
 800a3d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3d8:	e0c5      	b.n	800a566 <USBH_Process+0x39e>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a3e0:	f003 0320 	and.w	r3, r3, #32
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <USBH_Process+0x238>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fc2d 	bl	800ac4a <USBH_SetFeature>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f040 80b9 	bne.w	800a56a <USBH_Process+0x3a2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	220a      	movs	r2, #10
 800a3fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3fe:	e0b4      	b.n	800a56a <USBH_Process+0x3a2>
        phost->gState = HOST_CHECK_CLASS;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220a      	movs	r2, #10
 800a404:	701a      	strb	r2, [r3, #0]
      break;
 800a406:	e0b0      	b.n	800a56a <USBH_Process+0x3a2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f000 80ad 	beq.w	800a56e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]
 800a420:	e016      	b.n	800a450 <USBH_Process+0x288>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a422:	7bfa      	ldrb	r2, [r7, #15]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	32de      	adds	r2, #222	@ 0xde
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	791a      	ldrb	r2, [r3, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a434:	429a      	cmp	r2, r3
 800a436:	d108      	bne.n	800a44a <USBH_Process+0x282>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a438:	7bfa      	ldrb	r2, [r7, #15]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	32de      	adds	r2, #222	@ 0xde
 800a43e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a448:	e005      	b.n	800a456 <USBH_Process+0x28e>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	3301      	adds	r3, #1
 800a44e:	73fb      	strb	r3, [r7, #15]
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0e5      	beq.n	800a422 <USBH_Process+0x25a>
          }
        }

        if (phost->pActiveClass != NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d016      	beq.n	800a48e <USBH_Process+0x2c6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	4798      	blx	r3
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d109      	bne.n	800a486 <USBH_Process+0x2be>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2206      	movs	r2, #6
 800a476:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a47e:	2103      	movs	r1, #3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a484:	e073      	b.n	800a56e <USBH_Process+0x3a6>
            phost->gState = HOST_ABORT_STATE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	220d      	movs	r2, #13
 800a48a:	701a      	strb	r2, [r3, #0]
      break;
 800a48c:	e06f      	b.n	800a56e <USBH_Process+0x3a6>
          phost->gState = HOST_ABORT_STATE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	220d      	movs	r2, #13
 800a492:	701a      	strb	r2, [r3, #0]
      break;
 800a494:	e06b      	b.n	800a56e <USBH_Process+0x3a6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d017      	beq.n	800a4d0 <USBH_Process+0x308>
      {
        status = phost->pActiveClass->Requests(phost);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <USBH_Process+0x2f8>
        {
          phost->gState = HOST_CLASS;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	220b      	movs	r2, #11
 800a4bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a4be:	e058      	b.n	800a572 <USBH_Process+0x3aa>
        else if (status == USBH_FAIL)
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d154      	bne.n	800a572 <USBH_Process+0x3aa>
          phost->gState = HOST_ABORT_STATE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	220d      	movs	r2, #13
 800a4cc:	701a      	strb	r2, [r3, #0]
      break;
 800a4ce:	e050      	b.n	800a572 <USBH_Process+0x3aa>
        phost->gState = HOST_ABORT_STATE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	220d      	movs	r2, #13
 800a4d4:	701a      	strb	r2, [r3, #0]
      break;
 800a4d6:	e04c      	b.n	800a572 <USBH_Process+0x3aa>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d049      	beq.n	800a576 <USBH_Process+0x3ae>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
      }
      break;
 800a4ee:	e042      	b.n	800a576 <USBH_Process+0x3ae>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      DeInitStateMachine(phost);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff fd74 	bl	8009fe6 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a504:	2b00      	cmp	r3, #0
 800a506:	d009      	beq.n	800a51c <USBH_Process+0x354>
      {
        phost->pActiveClass->DeInit(phost);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a522:	2b00      	cmp	r3, #0
 800a524:	d005      	beq.n	800a532 <USBH_Process+0x36a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a52c:	2105      	movs	r1, #5
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d107      	bne.n	800a54e <USBH_Process+0x386>
      {
        phost->device.is_ReEnumerated = 0U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff fe2d 	bl	800a1a6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a54c:	e014      	b.n	800a578 <USBH_Process+0x3b0>
        USBH_LL_Start(phost);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f004 fc98 	bl	800ee84 <USBH_LL_Start>
      break;
 800a554:	e010      	b.n	800a578 <USBH_Process+0x3b0>

    case HOST_ABORT_STATE:
    default :
      break;
 800a556:	bf00      	nop
 800a558:	e00e      	b.n	800a578 <USBH_Process+0x3b0>
      break;
 800a55a:	bf00      	nop
 800a55c:	e00c      	b.n	800a578 <USBH_Process+0x3b0>
      break;
 800a55e:	bf00      	nop
 800a560:	e00a      	b.n	800a578 <USBH_Process+0x3b0>
    break;
 800a562:	bf00      	nop
 800a564:	e008      	b.n	800a578 <USBH_Process+0x3b0>
      break;
 800a566:	bf00      	nop
 800a568:	e006      	b.n	800a578 <USBH_Process+0x3b0>
      break;
 800a56a:	bf00      	nop
 800a56c:	e004      	b.n	800a578 <USBH_Process+0x3b0>
      break;
 800a56e:	bf00      	nop
 800a570:	e002      	b.n	800a578 <USBH_Process+0x3b0>
      break;
 800a572:	bf00      	nop
 800a574:	e000      	b.n	800a578 <USBH_Process+0x3b0>
      break;
 800a576:	bf00      	nop
  }
  return USBH_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop

0800a584 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af04      	add	r7, sp, #16
 800a58a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a58c:	2301      	movs	r3, #1
 800a58e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a590:	2301      	movs	r3, #1
 800a592:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	785b      	ldrb	r3, [r3, #1]
 800a598:	2b07      	cmp	r3, #7
 800a59a:	f200 81bd 	bhi.w	800a918 <USBH_HandleEnum+0x394>
 800a59e:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a4 <USBH_HandleEnum+0x20>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5c5 	.word	0x0800a5c5
 800a5a8:	0800a67f 	.word	0x0800a67f
 800a5ac:	0800a6e9 	.word	0x0800a6e9
 800a5b0:	0800a773 	.word	0x0800a773
 800a5b4:	0800a7dd 	.word	0x0800a7dd
 800a5b8:	0800a84d 	.word	0x0800a84d
 800a5bc:	0800a893 	.word	0x0800a893
 800a5c0:	0800a8d9 	.word	0x0800a8d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a5c4:	2108      	movs	r1, #8
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa4c 	bl	800aa64 <USBH_Get_DevDesc>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d12e      	bne.n	800a634 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	7919      	ldrb	r1, [r3, #4]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5fa:	9202      	str	r2, [sp, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	9201      	str	r2, [sp, #4]
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4603      	mov	r3, r0
 800a604:	2280      	movs	r2, #128	@ 0x80
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 ff6e 	bl	800b4e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7959      	ldrb	r1, [r3, #5]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a620:	9202      	str	r2, [sp, #8]
 800a622:	2200      	movs	r2, #0
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	4603      	mov	r3, r0
 800a62a:	2200      	movs	r2, #0
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 ff5b 	bl	800b4e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a632:	e173      	b.n	800a91c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	2b03      	cmp	r3, #3
 800a638:	f040 8170 	bne.w	800a91c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a642:	3301      	adds	r3, #1
 800a644:	b2da      	uxtb	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a652:	2b03      	cmp	r3, #3
 800a654:	d903      	bls.n	800a65e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	220d      	movs	r2, #13
 800a65a:	701a      	strb	r2, [r3, #0]
      break;
 800a65c:	e15e      	b.n	800a91c <USBH_HandleEnum+0x398>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	795b      	ldrb	r3, [r3, #5]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 ff8f 	bl	800b588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	791b      	ldrb	r3, [r3, #4]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 ff89 	bl	800b588 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
      break;
 800a67c:	e14e      	b.n	800a91c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a67e:	2112      	movs	r1, #18
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f9ef 	bl	800aa64 <USBH_Get_DevDesc>
 800a686:	4603      	mov	r3, r0
 800a688:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d103      	bne.n	800a698 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a696:	e143      	b.n	800a920 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	f040 8140 	bne.w	800a920 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d903      	bls.n	800a6c2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	220d      	movs	r2, #13
 800a6be:	701a      	strb	r2, [r3, #0]
      break;
 800a6c0:	e12e      	b.n	800a920 <USBH_HandleEnum+0x39c>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	795b      	ldrb	r3, [r3, #5]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 ff5d 	bl	800b588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	791b      	ldrb	r3, [r3, #4]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 ff57 	bl	800b588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	701a      	strb	r2, [r3, #0]
      break;
 800a6e6:	e11b      	b.n	800a920 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fa66 	bl	800abbc <USBH_SetAddress>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d130      	bne.n	800a75c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a6fa:	2002      	movs	r0, #2
 800a6fc:	f004 fd5c 	bl	800f1b8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2203      	movs	r2, #3
 800a70c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7919      	ldrb	r1, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a722:	9202      	str	r2, [sp, #8]
 800a724:	2200      	movs	r2, #0
 800a726:	9201      	str	r2, [sp, #4]
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	4603      	mov	r3, r0
 800a72c:	2280      	movs	r2, #128	@ 0x80
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 feda 	bl	800b4e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7959      	ldrb	r1, [r3, #5]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a748:	9202      	str	r2, [sp, #8]
 800a74a:	2200      	movs	r2, #0
 800a74c:	9201      	str	r2, [sp, #4]
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	4603      	mov	r3, r0
 800a752:	2200      	movs	r2, #0
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fec7 	bl	800b4e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a75a:	e0e3      	b.n	800a924 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	2b03      	cmp	r3, #3
 800a760:	f040 80e0 	bne.w	800a924 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	220d      	movs	r2, #13
 800a768:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	705a      	strb	r2, [r3, #1]
      break;
 800a770:	e0d8      	b.n	800a924 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a772:	2109      	movs	r1, #9
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f99d 	bl	800aab4 <USBH_Get_CfgDesc>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d103      	bne.n	800a78c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2204      	movs	r2, #4
 800a788:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a78a:	e0cd      	b.n	800a928 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
 800a78e:	2b03      	cmp	r3, #3
 800a790:	f040 80ca 	bne.w	800a928 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a79a:	3301      	adds	r3, #1
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d903      	bls.n	800a7b6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	220d      	movs	r2, #13
 800a7b2:	701a      	strb	r2, [r3, #0]
      break;
 800a7b4:	e0b8      	b.n	800a928 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	795b      	ldrb	r3, [r3, #5]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fee3 	bl	800b588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	791b      	ldrb	r3, [r3, #4]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fedd 	bl	800b588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	701a      	strb	r2, [r3, #0]
      break;
 800a7da:	e0a5      	b.n	800a928 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f965 	bl	800aab4 <USBH_Get_CfgDesc>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d103      	bne.n	800a7fc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2205      	movs	r2, #5
 800a7f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7fa:	e097      	b.n	800a92c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	f040 8094 	bne.w	800a92c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a80a:	3301      	adds	r3, #1
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d903      	bls.n	800a826 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	220d      	movs	r2, #13
 800a822:	701a      	strb	r2, [r3, #0]
      break;
 800a824:	e082      	b.n	800a92c <USBH_HandleEnum+0x3a8>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	795b      	ldrb	r3, [r3, #5]
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 feab 	bl	800b588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	791b      	ldrb	r3, [r3, #4]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fea5 	bl	800b588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	701a      	strb	r2, [r3, #0]
      break;
 800a84a:	e06f      	b.n	800a92c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a852:	2b00      	cmp	r3, #0
 800a854:	d019      	beq.n	800a88a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a862:	23ff      	movs	r3, #255	@ 0xff
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f949 	bl	800aafc <USBH_Get_StringDesc>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d103      	bne.n	800a87c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2206      	movs	r2, #6
 800a878:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a87a:	e059      	b.n	800a930 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d156      	bne.n	800a930 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2206      	movs	r2, #6
 800a886:	705a      	strb	r2, [r3, #1]
      break;
 800a888:	e052      	b.n	800a930 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2206      	movs	r2, #6
 800a88e:	705a      	strb	r2, [r3, #1]
      break;
 800a890:	e04e      	b.n	800a930 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d019      	beq.n	800a8d0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a8a8:	23ff      	movs	r3, #255	@ 0xff
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f926 	bl	800aafc <USBH_Get_StringDesc>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d103      	bne.n	800a8c2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2207      	movs	r2, #7
 800a8be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8c0:	e038      	b.n	800a934 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d135      	bne.n	800a934 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2207      	movs	r2, #7
 800a8cc:	705a      	strb	r2, [r3, #1]
      break;
 800a8ce:	e031      	b.n	800a934 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2207      	movs	r2, #7
 800a8d4:	705a      	strb	r2, [r3, #1]
      break;
 800a8d6:	e02d      	b.n	800a934 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d017      	beq.n	800a912 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8ee:	23ff      	movs	r3, #255	@ 0xff
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f903 	bl	800aafc <USBH_Get_StringDesc>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a904:	e018      	b.n	800a938 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d115      	bne.n	800a938 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	73fb      	strb	r3, [r7, #15]
      break;
 800a910:	e012      	b.n	800a938 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
      break;
 800a916:	e00f      	b.n	800a938 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a918:	bf00      	nop
 800a91a:	e00e      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a91c:	bf00      	nop
 800a91e:	e00c      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a920:	bf00      	nop
 800a922:	e00a      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a924:	bf00      	nop
 800a926:	e008      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a928:	bf00      	nop
 800a92a:	e006      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a92c:	bf00      	nop
 800a92e:	e004      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a930:	bf00      	nop
 800a932:	e002      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a934:	bf00      	nop
 800a936:	e000      	b.n	800a93a <USBH_HandleEnum+0x3b6>
      break;
 800a938:	bf00      	nop
  }
  return Status;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b082      	sub	sp, #8
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f804 	bl	800a986 <USBH_HandleSof>
}
 800a97e:	bf00      	nop
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b0b      	cmp	r3, #11
 800a996:	d10a      	bne.n	800a9ae <USBH_HandleSof+0x28>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d005      	beq.n	800a9ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	4798      	blx	r3
  }
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a9c6:	bf00      	nop
}
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a9e2:	bf00      	nop
}
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f004 fa3c 	bl	800eeba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	791b      	ldrb	r3, [r3, #4]
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fd9d 	bl	800b588 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	795b      	ldrb	r3, [r3, #5]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fd97 	bl	800b588 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa82:	2100      	movs	r1, #0
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f864 	bl	800ab52 <USBH_GetDescriptor>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	b292      	uxth	r2, r2
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	f000 f918 	bl	800acda <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	331c      	adds	r3, #28
 800aac4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aac6:	887b      	ldrh	r3, [r7, #2]
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aad0:	2100      	movs	r1, #0
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f83d 	bl	800ab52 <USBH_GetDescriptor>
 800aad8:	4603      	mov	r3, r0
 800aada:	72fb      	strb	r3, [r7, #11]
 800aadc:	7afb      	ldrb	r3, [r7, #11]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d107      	bne.n	800aaf2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aae8:	887a      	ldrh	r2, [r7, #2]
 800aaea:	68f9      	ldr	r1, [r7, #12]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 f960 	bl	800adb2 <USBH_ParseCfgDesc>
  }

  return status;
 800aaf2:	7afb      	ldrb	r3, [r7, #11]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	607a      	str	r2, [r7, #4]
 800ab06:	461a      	mov	r2, r3
 800ab08:	460b      	mov	r3, r1
 800ab0a:	72fb      	strb	r3, [r7, #11]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ab10:	7afb      	ldrb	r3, [r7, #11]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ab18:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ab20:	893b      	ldrh	r3, [r7, #8]
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	460b      	mov	r3, r1
 800ab26:	2100      	movs	r1, #0
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f000 f812 	bl	800ab52 <USBH_GetDescriptor>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	75fb      	strb	r3, [r7, #23]
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d107      	bne.n	800ab48 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ab3e:	893a      	ldrh	r2, [r7, #8]
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fa31 	bl	800afaa <USBH_ParseStringDesc>
  }

  return status;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	607b      	str	r3, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	72fb      	strb	r3, [r7, #11]
 800ab60:	4613      	mov	r3, r2
 800ab62:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	789b      	ldrb	r3, [r3, #2]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d11c      	bne.n	800aba6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab6c:	7afb      	ldrb	r3, [r7, #11]
 800ab6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2206      	movs	r2, #6
 800ab7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	893a      	ldrh	r2, [r7, #8]
 800ab82:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ab84:	893b      	ldrh	r3, [r7, #8]
 800ab86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ab8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab8e:	d104      	bne.n	800ab9a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f240 4209 	movw	r2, #1033	@ 0x409
 800ab96:	829a      	strh	r2, [r3, #20]
 800ab98:	e002      	b.n	800aba0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8b3a      	ldrh	r2, [r7, #24]
 800aba4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aba6:	8b3b      	ldrh	r3, [r7, #24]
 800aba8:	461a      	mov	r2, r3
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 fa49 	bl	800b044 <USBH_CtlReq>
 800abb2:	4603      	mov	r3, r0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	460b      	mov	r3, r1
 800abc6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	789b      	ldrb	r3, [r3, #2]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d10f      	bne.n	800abf0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2205      	movs	r2, #5
 800abda:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	b29a      	uxth	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800abf0:	2200      	movs	r2, #0
 800abf2:	2100      	movs	r1, #0
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fa25 	bl	800b044 <USBH_CtlReq>
 800abfa:	4603      	mov	r3, r0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	789b      	ldrb	r3, [r3, #2]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d10e      	bne.n	800ac36 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2209      	movs	r2, #9
 800ac22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	887a      	ldrh	r2, [r7, #2]
 800ac28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa02 	bl	800b044 <USBH_CtlReq>
 800ac40:	4603      	mov	r3, r0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	460b      	mov	r3, r1
 800ac54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	789b      	ldrb	r3, [r3, #2]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d10f      	bne.n	800ac7e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2203      	movs	r2, #3
 800ac68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2100      	movs	r1, #0
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f9de 	bl	800b044 <USBH_CtlReq>
 800ac88:	4603      	mov	r3, r0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	789b      	ldrb	r3, [r3, #2]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d10f      	bne.n	800acc6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2202      	movs	r2, #2
 800acaa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	b29a      	uxth	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800acc6:	2200      	movs	r2, #0
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f9ba 	bl	800b044 <USBH_CtlReq>
 800acd0:	4603      	mov	r3, r0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800acda:	b480      	push	{r7}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	4613      	mov	r3, r2
 800ace6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	785a      	ldrb	r2, [r3, #1]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	3302      	adds	r3, #2
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	3303      	adds	r3, #3
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	791a      	ldrb	r2, [r3, #4]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	795a      	ldrb	r2, [r3, #5]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	799a      	ldrb	r2, [r3, #6]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	79da      	ldrb	r2, [r3, #7]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ad32:	88fb      	ldrh	r3, [r7, #6]
 800ad34:	2b08      	cmp	r3, #8
 800ad36:	d936      	bls.n	800ada6 <USBH_ParseDevDesc+0xcc>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	3309      	adds	r3, #9
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	021b      	lsls	r3, r3, #8
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	330a      	adds	r3, #10
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	330b      	adds	r3, #11
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	021b      	lsls	r3, r3, #8
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	4313      	orrs	r3, r2
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	330d      	adds	r3, #13
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	021b      	lsls	r3, r3, #8
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	7b9a      	ldrb	r2, [r3, #14]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	7bda      	ldrb	r2, [r3, #15]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	7c1a      	ldrb	r2, [r3, #16]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	7c5a      	ldrb	r2, [r3, #17]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	745a      	strb	r2, [r3, #17]
  }
}
 800ada6:	bf00      	nop
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b08a      	sub	sp, #40	@ 0x28
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	4613      	mov	r3, r2
 800adbe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t                      ep_ix = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	785a      	ldrb	r2, [r3, #1]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	3302      	adds	r3, #2
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	461a      	mov	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	3303      	adds	r3, #3
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	021b      	lsls	r3, r3, #8
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	4313      	orrs	r3, r2
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	791a      	ldrb	r2, [r3, #4]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	795a      	ldrb	r2, [r3, #5]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	799a      	ldrb	r2, [r3, #6]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	79da      	ldrb	r2, [r3, #7]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	7a1a      	ldrb	r2, [r3, #8]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ae26:	88fb      	ldrh	r3, [r7, #6]
 800ae28:	2b09      	cmp	r3, #9
 800ae2a:	d95f      	bls.n	800aeec <USBH_ParseCfgDesc+0x13a>
  {
    ptr = USB_LEN_CFG_DESC;
 800ae2c:	2309      	movs	r3, #9
 800ae2e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae34:	e051      	b.n	800aeda <USBH_ParseCfgDesc+0x128>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae36:	f107 0316 	add.w	r3, r7, #22
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae3e:	f000 f8e7 	bl	800b010 <USBH_GetNextDesc>
 800ae42:	6278      	str	r0, [r7, #36]	@ 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ae44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d146      	bne.n	800aeda <USBH_ParseCfgDesc+0x128>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ae4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae50:	221a      	movs	r2, #26
 800ae52:	fb02 f303 	mul.w	r3, r2, r3
 800ae56:	3308      	adds	r3, #8
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	3302      	adds	r3, #2
 800ae5e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ae60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae62:	69f8      	ldr	r0, [r7, #28]
 800ae64:	f000 f846 	bl	800aef4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae72:	e022      	b.n	800aeba <USBH_ParseCfgDesc+0x108>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae74:	f107 0316 	add.w	r3, r7, #22
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae7c:	f000 f8c8 	bl	800b010 <USBH_GetNextDesc>
 800ae80:	6278      	str	r0, [r7, #36]	@ 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	785b      	ldrb	r3, [r3, #1]
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	d117      	bne.n	800aeba <USBH_ParseCfgDesc+0x108>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ae8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae8e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800ae92:	3201      	adds	r2, #1
 800ae94:	00d2      	lsls	r2, r2, #3
 800ae96:	211a      	movs	r1, #26
 800ae98:	fb01 f303 	mul.w	r3, r1, r3
 800ae9c:	4413      	add	r3, r2
 800ae9e:	3308      	adds	r3, #8
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4413      	add	r3, r2
 800aea4:	3304      	adds	r3, #4
 800aea6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800aea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aeaa:	69b8      	ldr	r0, [r7, #24]
 800aeac:	f000 f851 	bl	800af52 <USBH_ParseEPDesc>
            ep_ix++;
 800aeb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	791b      	ldrb	r3, [r3, #4]
 800aebe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d204      	bcs.n	800aed0 <USBH_ParseCfgDesc+0x11e>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	885a      	ldrh	r2, [r3, #2]
 800aeca:	8afb      	ldrh	r3, [r7, #22]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d8d1      	bhi.n	800ae74 <USBH_ParseCfgDesc+0xc2>
          }
        }
        if_ix++;
 800aed0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aed4:	3301      	adds	r3, #1
 800aed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aeda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d804      	bhi.n	800aeec <USBH_ParseCfgDesc+0x13a>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	885a      	ldrh	r2, [r3, #2]
 800aee6:	8afb      	ldrh	r3, [r7, #22]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d8a4      	bhi.n	800ae36 <USBH_ParseCfgDesc+0x84>
      }
    }
  }
}
 800aeec:	bf00      	nop
 800aeee:	3728      	adds	r7, #40	@ 0x28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781a      	ldrb	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	785a      	ldrb	r2, [r3, #1]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	789a      	ldrb	r2, [r3, #2]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	78da      	ldrb	r2, [r3, #3]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	791a      	ldrb	r2, [r3, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	795a      	ldrb	r2, [r3, #5]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	799a      	ldrb	r2, [r3, #6]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	79da      	ldrb	r2, [r3, #7]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	7a1a      	ldrb	r2, [r3, #8]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	721a      	strb	r2, [r3, #8]
}
 800af46:	bf00      	nop
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781a      	ldrb	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	785a      	ldrb	r2, [r3, #1]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	789a      	ldrb	r2, [r3, #2]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	78da      	ldrb	r2, [r3, #3]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	3304      	adds	r3, #4
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	3305      	adds	r3, #5
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	799a      	ldrb	r2, [r3, #6]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	719a      	strb	r2, [r3, #6]
}
 800af9e:	bf00      	nop
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800afaa:	b480      	push	{r7}
 800afac:	b087      	sub	sp, #28
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	4613      	mov	r3, r2
 800afb6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	3301      	adds	r3, #1
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b03      	cmp	r3, #3
 800afc0:	d120      	bne.n	800b004 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	1e9a      	subs	r2, r3, #2
 800afc8:	88fb      	ldrh	r3, [r7, #6]
 800afca:	4293      	cmp	r3, r2
 800afcc:	bf28      	it	cs
 800afce:	4613      	movcs	r3, r2
 800afd0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3302      	adds	r3, #2
 800afd6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800afd8:	2300      	movs	r3, #0
 800afda:	82fb      	strh	r3, [r7, #22]
 800afdc:	e00b      	b.n	800aff6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800afde:	8afb      	ldrh	r3, [r7, #22]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4413      	add	r3, r2
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	3301      	adds	r3, #1
 800afee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aff0:	8afb      	ldrh	r3, [r7, #22]
 800aff2:	3302      	adds	r3, #2
 800aff4:	82fb      	strh	r3, [r7, #22]
 800aff6:	8afa      	ldrh	r2, [r7, #22]
 800aff8:	8abb      	ldrh	r3, [r7, #20]
 800affa:	429a      	cmp	r2, r3
 800affc:	d3ef      	bcc.n	800afde <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2200      	movs	r2, #0
 800b002:	701a      	strb	r2, [r3, #0]
  }
}
 800b004:	bf00      	nop
 800b006:	371c      	adds	r7, #28
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	7812      	ldrb	r2, [r2, #0]
 800b022:	4413      	add	r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4413      	add	r3, r2
 800b034:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b036:	68fb      	ldr	r3, [r7, #12]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	4613      	mov	r3, r2
 800b050:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b052:	2301      	movs	r3, #1
 800b054:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	789b      	ldrb	r3, [r3, #2]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d002      	beq.n	800b064 <USBH_CtlReq+0x20>
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d00f      	beq.n	800b082 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b062:	e027      	b.n	800b0b4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	88fa      	ldrh	r2, [r7, #6]
 800b06e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2202      	movs	r2, #2
 800b07a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b07c:	2301      	movs	r3, #1
 800b07e:	75fb      	strb	r3, [r7, #23]
      break;
 800b080:	e018      	b.n	800b0b4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 f81c 	bl	800b0c0 <USBH_HandleControl>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <USBH_CtlReq+0x54>
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	2b03      	cmp	r3, #3
 800b096:	d106      	bne.n	800b0a6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2201      	movs	r2, #1
 800b09c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	761a      	strb	r2, [r3, #24]
      break;
 800b0a4:	e005      	b.n	800b0b2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d102      	bne.n	800b0b2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	709a      	strb	r2, [r3, #2]
      break;
 800b0b2:	bf00      	nop
  }
  return status;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	7e1b      	ldrb	r3, [r3, #24]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	2b0a      	cmp	r3, #10
 800b0d8:	f200 8156 	bhi.w	800b388 <USBH_HandleControl+0x2c8>
 800b0dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e4 <USBH_HandleControl+0x24>)
 800b0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e2:	bf00      	nop
 800b0e4:	0800b111 	.word	0x0800b111
 800b0e8:	0800b12b 	.word	0x0800b12b
 800b0ec:	0800b195 	.word	0x0800b195
 800b0f0:	0800b1bb 	.word	0x0800b1bb
 800b0f4:	0800b1f3 	.word	0x0800b1f3
 800b0f8:	0800b21d 	.word	0x0800b21d
 800b0fc:	0800b26f 	.word	0x0800b26f
 800b100:	0800b291 	.word	0x0800b291
 800b104:	0800b2cd 	.word	0x0800b2cd
 800b108:	0800b2f3 	.word	0x0800b2f3
 800b10c:	0800b331 	.word	0x0800b331
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f103 0110 	add.w	r1, r3, #16
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	795b      	ldrb	r3, [r3, #5]
 800b11a:	461a      	mov	r2, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f943 	bl	800b3a8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2202      	movs	r2, #2
 800b126:	761a      	strb	r2, [r3, #24]
      break;
 800b128:	e139      	b.n	800b39e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	795b      	ldrb	r3, [r3, #5]
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f003 ffb1 	bl	800f098 <USBH_LL_GetURBState>
 800b136:	4603      	mov	r3, r0
 800b138:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d11e      	bne.n	800b17e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	7c1b      	ldrb	r3, [r3, #16]
 800b144:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b148:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	8adb      	ldrh	r3, [r3, #22]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b152:	7b7b      	ldrb	r3, [r7, #13]
 800b154:	2b80      	cmp	r3, #128	@ 0x80
 800b156:	d103      	bne.n	800b160 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2203      	movs	r2, #3
 800b15c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b15e:	e115      	b.n	800b38c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2205      	movs	r2, #5
 800b164:	761a      	strb	r2, [r3, #24]
      break;
 800b166:	e111      	b.n	800b38c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b168:	7b7b      	ldrb	r3, [r7, #13]
 800b16a:	2b80      	cmp	r3, #128	@ 0x80
 800b16c:	d103      	bne.n	800b176 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2209      	movs	r2, #9
 800b172:	761a      	strb	r2, [r3, #24]
      break;
 800b174:	e10a      	b.n	800b38c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2207      	movs	r2, #7
 800b17a:	761a      	strb	r2, [r3, #24]
      break;
 800b17c:	e106      	b.n	800b38c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	2b04      	cmp	r3, #4
 800b182:	d003      	beq.n	800b18c <USBH_HandleControl+0xcc>
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	2b02      	cmp	r3, #2
 800b188:	f040 8100 	bne.w	800b38c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	220b      	movs	r2, #11
 800b190:	761a      	strb	r2, [r3, #24]
      break;
 800b192:	e0fb      	b.n	800b38c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6899      	ldr	r1, [r3, #8]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	899a      	ldrh	r2, [r3, #12]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	791b      	ldrb	r3, [r3, #4]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f93a 	bl	800b426 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2204      	movs	r2, #4
 800b1b6:	761a      	strb	r2, [r3, #24]
      break;
 800b1b8:	e0f1      	b.n	800b39e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	791b      	ldrb	r3, [r3, #4]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f003 ff69 	bl	800f098 <USBH_LL_GetURBState>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d102      	bne.n	800b1d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2209      	movs	r2, #9
 800b1d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	2b05      	cmp	r3, #5
 800b1da:	d102      	bne.n	800b1e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1e0:	e0d6      	b.n	800b390 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	f040 80d3 	bne.w	800b390 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	220b      	movs	r2, #11
 800b1ee:	761a      	strb	r2, [r3, #24]
      break;
 800b1f0:	e0ce      	b.n	800b390 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6899      	ldr	r1, [r3, #8]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	899a      	ldrh	r2, [r3, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	795b      	ldrb	r3, [r3, #5]
 800b1fe:	2001      	movs	r0, #1
 800b200:	9000      	str	r0, [sp, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f8ea 	bl	800b3dc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b20e:	b29a      	uxth	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2206      	movs	r2, #6
 800b218:	761a      	strb	r2, [r3, #24]
      break;
 800b21a:	e0c0      	b.n	800b39e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	795b      	ldrb	r3, [r3, #5]
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f003 ff38 	bl	800f098 <USBH_LL_GetURBState>
 800b228:	4603      	mov	r3, r0
 800b22a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b22c:	7bbb      	ldrb	r3, [r7, #14]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d103      	bne.n	800b23a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2207      	movs	r2, #7
 800b236:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b238:	e0ac      	b.n	800b394 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b23a:	7bbb      	ldrb	r3, [r7, #14]
 800b23c:	2b05      	cmp	r3, #5
 800b23e:	d105      	bne.n	800b24c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	220c      	movs	r2, #12
 800b244:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b246:	2303      	movs	r3, #3
 800b248:	73fb      	strb	r3, [r7, #15]
      break;
 800b24a:	e0a3      	b.n	800b394 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d103      	bne.n	800b25a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2205      	movs	r2, #5
 800b256:	761a      	strb	r2, [r3, #24]
      break;
 800b258:	e09c      	b.n	800b394 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b25a:	7bbb      	ldrb	r3, [r7, #14]
 800b25c:	2b04      	cmp	r3, #4
 800b25e:	f040 8099 	bne.w	800b394 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	220b      	movs	r2, #11
 800b266:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b268:	2302      	movs	r3, #2
 800b26a:	73fb      	strb	r3, [r7, #15]
      break;
 800b26c:	e092      	b.n	800b394 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	791b      	ldrb	r3, [r3, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	2100      	movs	r1, #0
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f8d5 	bl	800b426 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2208      	movs	r2, #8
 800b28c:	761a      	strb	r2, [r3, #24]

      break;
 800b28e:	e086      	b.n	800b39e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	791b      	ldrb	r3, [r3, #4]
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f003 fefe 	bl	800f098 <USBH_LL_GetURBState>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d105      	bne.n	800b2b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	220d      	movs	r2, #13
 800b2aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b2b0:	e072      	b.n	800b398 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d103      	bne.n	800b2c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	220b      	movs	r2, #11
 800b2bc:	761a      	strb	r2, [r3, #24]
      break;
 800b2be:	e06b      	b.n	800b398 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b05      	cmp	r3, #5
 800b2c4:	d168      	bne.n	800b398 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ca:	e065      	b.n	800b398 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	795b      	ldrb	r3, [r3, #5]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	9200      	str	r2, [sp, #0]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f87f 	bl	800b3dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	220a      	movs	r2, #10
 800b2ee:	761a      	strb	r2, [r3, #24]
      break;
 800b2f0:	e055      	b.n	800b39e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	795b      	ldrb	r3, [r3, #5]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f003 fecd 	bl	800f098 <USBH_LL_GetURBState>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d105      	bne.n	800b314 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	220d      	movs	r2, #13
 800b310:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b312:	e043      	b.n	800b39c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	2b02      	cmp	r3, #2
 800b318:	d103      	bne.n	800b322 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2209      	movs	r2, #9
 800b31e:	761a      	strb	r2, [r3, #24]
      break;
 800b320:	e03c      	b.n	800b39c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	2b04      	cmp	r3, #4
 800b326:	d139      	bne.n	800b39c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	220b      	movs	r2, #11
 800b32c:	761a      	strb	r2, [r3, #24]
      break;
 800b32e:	e035      	b.n	800b39c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	7e5b      	ldrb	r3, [r3, #25]
 800b334:	3301      	adds	r3, #1
 800b336:	b2da      	uxtb	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	765a      	strb	r2, [r3, #25]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	7e5b      	ldrb	r3, [r3, #25]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d806      	bhi.n	800b352 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b350:	e025      	b.n	800b39e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b358:	2106      	movs	r1, #6
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	795b      	ldrb	r3, [r3, #5]
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f90c 	bl	800b588 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	791b      	ldrb	r3, [r3, #4]
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f906 	bl	800b588 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b382:	2302      	movs	r3, #2
 800b384:	73fb      	strb	r3, [r7, #15]
      break;
 800b386:	e00a      	b.n	800b39e <USBH_HandleControl+0x2de>

    default:
      break;
 800b388:	bf00      	nop
 800b38a:	e008      	b.n	800b39e <USBH_HandleControl+0x2de>
      break;
 800b38c:	bf00      	nop
 800b38e:	e006      	b.n	800b39e <USBH_HandleControl+0x2de>
      break;
 800b390:	bf00      	nop
 800b392:	e004      	b.n	800b39e <USBH_HandleControl+0x2de>
      break;
 800b394:	bf00      	nop
 800b396:	e002      	b.n	800b39e <USBH_HandleControl+0x2de>
      break;
 800b398:	bf00      	nop
 800b39a:	e000      	b.n	800b39e <USBH_HandleControl+0x2de>
      break;
 800b39c:	bf00      	nop
  }

  return status;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af04      	add	r7, sp, #16
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b3b6:	79f9      	ldrb	r1, [r7, #7]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9303      	str	r3, [sp, #12]
 800b3bc:	2308      	movs	r3, #8
 800b3be:	9302      	str	r3, [sp, #8]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	9301      	str	r3, [sp, #4]
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f003 fe32 	bl	800f036 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b088      	sub	sp, #32
 800b3e0:	af04      	add	r7, sp, #16
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	80fb      	strh	r3, [r7, #6]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b400:	7979      	ldrb	r1, [r7, #5]
 800b402:	7e3b      	ldrb	r3, [r7, #24]
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	88fb      	ldrh	r3, [r7, #6]
 800b408:	9302      	str	r3, [sp, #8]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	2301      	movs	r3, #1
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	2200      	movs	r2, #0
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f003 fe0d 	bl	800f036 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b088      	sub	sp, #32
 800b42a:	af04      	add	r7, sp, #16
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	4611      	mov	r1, r2
 800b432:	461a      	mov	r2, r3
 800b434:	460b      	mov	r3, r1
 800b436:	80fb      	strh	r3, [r7, #6]
 800b438:	4613      	mov	r3, r2
 800b43a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b43c:	7979      	ldrb	r1, [r7, #5]
 800b43e:	2300      	movs	r3, #0
 800b440:	9303      	str	r3, [sp, #12]
 800b442:	88fb      	ldrh	r3, [r7, #6]
 800b444:	9302      	str	r3, [sp, #8]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	2301      	movs	r3, #1
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	2201      	movs	r2, #1
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f003 fdef 	bl	800f036 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b458:	2300      	movs	r3, #0

}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b088      	sub	sp, #32
 800b466:	af04      	add	r7, sp, #16
 800b468:	60f8      	str	r0, [r7, #12]
 800b46a:	60b9      	str	r1, [r7, #8]
 800b46c:	4611      	mov	r1, r2
 800b46e:	461a      	mov	r2, r3
 800b470:	460b      	mov	r3, r1
 800b472:	80fb      	strh	r3, [r7, #6]
 800b474:	4613      	mov	r3, r2
 800b476:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b486:	7979      	ldrb	r1, [r7, #5]
 800b488:	7e3b      	ldrb	r3, [r7, #24]
 800b48a:	9303      	str	r3, [sp, #12]
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	9302      	str	r3, [sp, #8]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	9301      	str	r3, [sp, #4]
 800b494:	2301      	movs	r3, #1
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	2302      	movs	r3, #2
 800b49a:	2200      	movs	r2, #0
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f003 fdca 	bl	800f036 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af04      	add	r7, sp, #16
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	80fb      	strh	r3, [r7, #6]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b4c2:	7979      	ldrb	r1, [r7, #5]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9303      	str	r3, [sp, #12]
 800b4c8:	88fb      	ldrh	r3, [r7, #6]
 800b4ca:	9302      	str	r3, [sp, #8]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f003 fdac 	bl	800f036 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af04      	add	r7, sp, #16
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	4608      	mov	r0, r1
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	70fb      	strb	r3, [r7, #3]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70bb      	strb	r3, [r7, #2]
 800b4fe:	4613      	mov	r3, r2
 800b500:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b502:	7878      	ldrb	r0, [r7, #1]
 800b504:	78ba      	ldrb	r2, [r7, #2]
 800b506:	78f9      	ldrb	r1, [r7, #3]
 800b508:	8b3b      	ldrh	r3, [r7, #24]
 800b50a:	9302      	str	r3, [sp, #8]
 800b50c:	7d3b      	ldrb	r3, [r7, #20]
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	7c3b      	ldrb	r3, [r7, #16]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	4603      	mov	r3, r0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f003 fd3f 	bl	800ef9a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b082      	sub	sp, #8
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b532:	78fb      	ldrb	r3, [r7, #3]
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f003 fd5e 	bl	800eff8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f836 	bl	800b5c4 <USBH_GetFreePipe>
 800b558:	4603      	mov	r3, r0
 800b55a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b55c:	89fb      	ldrh	r3, [r7, #14]
 800b55e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b562:	4293      	cmp	r3, r2
 800b564:	d00a      	beq.n	800b57c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b566:	78fa      	ldrb	r2, [r7, #3]
 800b568:	89fb      	ldrh	r3, [r7, #14]
 800b56a:	f003 030f 	and.w	r3, r3, #15
 800b56e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	33e0      	adds	r3, #224	@ 0xe0
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b57c:	89fb      	ldrh	r3, [r7, #14]
 800b57e:	b2db      	uxtb	r3, r3
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	2b0a      	cmp	r3, #10
 800b598:	d80d      	bhi.n	800b5b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	33e0      	adds	r3, #224	@ 0xe0
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	33e0      	adds	r3, #224	@ 0xe0
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
 800b5d4:	e00f      	b.n	800b5f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	33e0      	adds	r3, #224	@ 0xe0
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d102      	bne.n	800b5f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	e007      	b.n	800b600 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	73fb      	strb	r3, [r7, #15]
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	2b0a      	cmp	r3, #10
 800b5fa:	d9ec      	bls.n	800b5d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b5fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b616:	79fb      	ldrb	r3, [r7, #7]
 800b618:	4a08      	ldr	r2, [pc, #32]	@ (800b63c <disk_status+0x30>)
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	79fa      	ldrb	r2, [r7, #7]
 800b624:	4905      	ldr	r1, [pc, #20]	@ (800b63c <disk_status+0x30>)
 800b626:	440a      	add	r2, r1
 800b628:	7a12      	ldrb	r2, [r2, #8]
 800b62a:	4610      	mov	r0, r2
 800b62c:	4798      	blx	r3
 800b62e:	4603      	mov	r3, r0
 800b630:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b632:	7bfb      	ldrb	r3, [r7, #15]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20001d90 	.word	0x20001d90

0800b640 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	4a0d      	ldr	r2, [pc, #52]	@ (800b688 <disk_initialize+0x48>)
 800b652:	5cd3      	ldrb	r3, [r2, r3]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d111      	bne.n	800b67c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b658:	79fb      	ldrb	r3, [r7, #7]
 800b65a:	4a0b      	ldr	r2, [pc, #44]	@ (800b688 <disk_initialize+0x48>)
 800b65c:	2101      	movs	r1, #1
 800b65e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	4a09      	ldr	r2, [pc, #36]	@ (800b688 <disk_initialize+0x48>)
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	79fa      	ldrb	r2, [r7, #7]
 800b66e:	4906      	ldr	r1, [pc, #24]	@ (800b688 <disk_initialize+0x48>)
 800b670:	440a      	add	r2, r1
 800b672:	7a12      	ldrb	r2, [r2, #8]
 800b674:	4610      	mov	r0, r2
 800b676:	4798      	blx	r3
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20001d90 	.word	0x20001d90

0800b68c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b68c:	b590      	push	{r4, r7, lr}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	607a      	str	r2, [r7, #4]
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	4a0a      	ldr	r2, [pc, #40]	@ (800b6c8 <disk_read+0x3c>)
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	689c      	ldr	r4, [r3, #8]
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	4a07      	ldr	r2, [pc, #28]	@ (800b6c8 <disk_read+0x3c>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	7a18      	ldrb	r0, [r3, #8]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	68b9      	ldr	r1, [r7, #8]
 800b6b6:	47a0      	blx	r4
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	371c      	adds	r7, #28
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd90      	pop	{r4, r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20001d90 	.word	0x20001d90

0800b6cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b6cc:	b590      	push	{r4, r7, lr}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60b9      	str	r1, [r7, #8]
 800b6d4:	607a      	str	r2, [r7, #4]
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	4a0a      	ldr	r2, [pc, #40]	@ (800b708 <disk_write+0x3c>)
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	68dc      	ldr	r4, [r3, #12]
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	4a07      	ldr	r2, [pc, #28]	@ (800b708 <disk_write+0x3c>)
 800b6ec:	4413      	add	r3, r2
 800b6ee:	7a18      	ldrb	r0, [r3, #8]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	68b9      	ldr	r1, [r7, #8]
 800b6f6:	47a0      	blx	r4
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	371c      	adds	r7, #28
 800b702:	46bd      	mov	sp, r7
 800b704:	bd90      	pop	{r4, r7, pc}
 800b706:	bf00      	nop
 800b708:	20001d90 	.word	0x20001d90

0800b70c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	603a      	str	r2, [r7, #0]
 800b716:	71fb      	strb	r3, [r7, #7]
 800b718:	460b      	mov	r3, r1
 800b71a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	4a09      	ldr	r2, [pc, #36]	@ (800b744 <disk_ioctl+0x38>)
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	79fa      	ldrb	r2, [r7, #7]
 800b72a:	4906      	ldr	r1, [pc, #24]	@ (800b744 <disk_ioctl+0x38>)
 800b72c:	440a      	add	r2, r1
 800b72e:	7a10      	ldrb	r0, [r2, #8]
 800b730:	79b9      	ldrb	r1, [r7, #6]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	4798      	blx	r3
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]
  return res;
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20001d90 	.word	0x20001d90

0800b748 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3301      	adds	r3, #1
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b758:	89fb      	ldrh	r3, [r7, #14]
 800b75a:	021b      	lsls	r3, r3, #8
 800b75c:	b21a      	sxth	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	b21b      	sxth	r3, r3
 800b764:	4313      	orrs	r3, r2
 800b766:	b21b      	sxth	r3, r3
 800b768:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b76a:	89fb      	ldrh	r3, [r7, #14]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3303      	adds	r3, #3
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	021b      	lsls	r3, r3, #8
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	3202      	adds	r2, #2
 800b790:	7812      	ldrb	r2, [r2, #0]
 800b792:	4313      	orrs	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	021b      	lsls	r3, r3, #8
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	3201      	adds	r2, #1
 800b79e:	7812      	ldrb	r2, [r2, #0]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	021b      	lsls	r3, r3, #8
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	7812      	ldrb	r2, [r2, #0]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]
	return rv;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b083      	sub	sp, #12
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	1c5a      	adds	r2, r3, #1
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	887a      	ldrh	r2, [r7, #2]
 800b7d2:	b2d2      	uxtb	r2, r2
 800b7d4:	701a      	strb	r2, [r3, #0]
 800b7d6:	887b      	ldrh	r3, [r7, #2]
 800b7d8:	0a1b      	lsrs	r3, r3, #8
 800b7da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	887a      	ldrh	r2, [r7, #2]
 800b7e4:	b2d2      	uxtb	r2, r2
 800b7e6:	701a      	strb	r2, [r3, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	b2d2      	uxtb	r2, r2
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	0a1b      	lsrs	r3, r3, #8
 800b80e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	607a      	str	r2, [r7, #4]
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	b2d2      	uxtb	r2, r2
 800b81a:	701a      	strb	r2, [r3, #0]
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	0a1b      	lsrs	r3, r3, #8
 800b820:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	b2d2      	uxtb	r2, r2
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	0a1b      	lsrs	r3, r3, #8
 800b832:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	1c5a      	adds	r2, r3, #1
 800b838:	607a      	str	r2, [r7, #4]
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	b2d2      	uxtb	r2, r2
 800b83e:	701a      	strb	r2, [r3, #0]
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00d      	beq.n	800b882 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	1c53      	adds	r3, r2, #1
 800b86a:	613b      	str	r3, [r7, #16]
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	1c59      	adds	r1, r3, #1
 800b870:	6179      	str	r1, [r7, #20]
 800b872:	7812      	ldrb	r2, [r2, #0]
 800b874:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	3b01      	subs	r3, #1
 800b87a:	607b      	str	r3, [r7, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1f1      	bne.n	800b866 <mem_cpy+0x1a>
	}
}
 800b882:	bf00      	nop
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b88e:	b480      	push	{r7}
 800b890:	b087      	sub	sp, #28
 800b892:	af00      	add	r7, sp, #0
 800b894:	60f8      	str	r0, [r7, #12]
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	617a      	str	r2, [r7, #20]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	607b      	str	r3, [r7, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1f3      	bne.n	800b89e <mem_set+0x10>
}
 800b8b6:	bf00      	nop
 800b8b8:	bf00      	nop
 800b8ba:	371c      	adds	r7, #28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b8c4:	b480      	push	{r7}
 800b8c6:	b089      	sub	sp, #36	@ 0x24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	61fb      	str	r3, [r7, #28]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	61fa      	str	r2, [r7, #28]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	61ba      	str	r2, [r7, #24]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	1acb      	subs	r3, r1, r3
 800b8f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	607b      	str	r3, [r7, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <mem_cmp+0x40>
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d0eb      	beq.n	800b8dc <mem_cmp+0x18>

	return r;
 800b904:	697b      	ldr	r3, [r7, #20]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3724      	adds	r7, #36	@ 0x24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b912:	b480      	push	{r7}
 800b914:	b083      	sub	sp, #12
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b91c:	e002      	b.n	800b924 <chk_chr+0x12>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3301      	adds	r3, #1
 800b922:	607b      	str	r3, [r7, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d005      	beq.n	800b938 <chk_chr+0x26>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	4293      	cmp	r3, r2
 800b936:	d1f2      	bne.n	800b91e <chk_chr+0xc>
	return *str;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	781b      	ldrb	r3, [r3, #0]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b952:	2300      	movs	r3, #0
 800b954:	60bb      	str	r3, [r7, #8]
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	e029      	b.n	800b9b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b95c:	4a27      	ldr	r2, [pc, #156]	@ (800b9fc <chk_lock+0xb4>)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	011b      	lsls	r3, r3, #4
 800b962:	4413      	add	r3, r2
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d01d      	beq.n	800b9a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b96a:	4a24      	ldr	r2, [pc, #144]	@ (800b9fc <chk_lock+0xb4>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	4413      	add	r3, r2
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d116      	bne.n	800b9aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b97c:	4a1f      	ldr	r2, [pc, #124]	@ (800b9fc <chk_lock+0xb4>)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	011b      	lsls	r3, r3, #4
 800b982:	4413      	add	r3, r2
 800b984:	3304      	adds	r3, #4
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d10c      	bne.n	800b9aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b990:	4a1a      	ldr	r2, [pc, #104]	@ (800b9fc <chk_lock+0xb4>)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	011b      	lsls	r3, r3, #4
 800b996:	4413      	add	r3, r2
 800b998:	3308      	adds	r3, #8
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d102      	bne.n	800b9aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9a4:	e007      	b.n	800b9b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d9d2      	bls.n	800b95c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d109      	bne.n	800b9d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d102      	bne.n	800b9c8 <chk_lock+0x80>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d101      	bne.n	800b9cc <chk_lock+0x84>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e010      	b.n	800b9ee <chk_lock+0xa6>
 800b9cc:	2312      	movs	r3, #18
 800b9ce:	e00e      	b.n	800b9ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d108      	bne.n	800b9e8 <chk_lock+0xa0>
 800b9d6:	4a09      	ldr	r2, [pc, #36]	@ (800b9fc <chk_lock+0xb4>)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	4413      	add	r3, r2
 800b9de:	330c      	adds	r3, #12
 800b9e0:	881b      	ldrh	r3, [r3, #0]
 800b9e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9e6:	d101      	bne.n	800b9ec <chk_lock+0xa4>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	e000      	b.n	800b9ee <chk_lock+0xa6>
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	20001b70 	.word	0x20001b70

0800ba00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba06:	2300      	movs	r3, #0
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	e002      	b.n	800ba12 <enq_lock+0x12>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	607b      	str	r3, [r7, #4]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d806      	bhi.n	800ba26 <enq_lock+0x26>
 800ba18:	4a09      	ldr	r2, [pc, #36]	@ (800ba40 <enq_lock+0x40>)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	011b      	lsls	r3, r3, #4
 800ba1e:	4413      	add	r3, r2
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1f2      	bne.n	800ba0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	bf14      	ite	ne
 800ba2c:	2301      	movne	r3, #1
 800ba2e:	2300      	moveq	r3, #0
 800ba30:	b2db      	uxtb	r3, r3
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	20001b70 	.word	0x20001b70

0800ba44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	e01f      	b.n	800ba94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ba54:	4a41      	ldr	r2, [pc, #260]	@ (800bb5c <inc_lock+0x118>)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	4413      	add	r3, r2
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d113      	bne.n	800ba8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ba66:	4a3d      	ldr	r2, [pc, #244]	@ (800bb5c <inc_lock+0x118>)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	4413      	add	r3, r2
 800ba6e:	3304      	adds	r3, #4
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d109      	bne.n	800ba8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba7a:	4a38      	ldr	r2, [pc, #224]	@ (800bb5c <inc_lock+0x118>)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	4413      	add	r3, r2
 800ba82:	3308      	adds	r3, #8
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d006      	beq.n	800ba9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3301      	adds	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d9dc      	bls.n	800ba54 <inc_lock+0x10>
 800ba9a:	e000      	b.n	800ba9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d132      	bne.n	800bb0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800baa4:	2300      	movs	r3, #0
 800baa6:	60fb      	str	r3, [r7, #12]
 800baa8:	e002      	b.n	800bab0 <inc_lock+0x6c>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3301      	adds	r3, #1
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d806      	bhi.n	800bac4 <inc_lock+0x80>
 800bab6:	4a29      	ldr	r2, [pc, #164]	@ (800bb5c <inc_lock+0x118>)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	4413      	add	r3, r2
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1f2      	bne.n	800baaa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d101      	bne.n	800bace <inc_lock+0x8a>
 800baca:	2300      	movs	r3, #0
 800bacc:	e040      	b.n	800bb50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4922      	ldr	r1, [pc, #136]	@ (800bb5c <inc_lock+0x118>)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	011b      	lsls	r3, r3, #4
 800bad8:	440b      	add	r3, r1
 800bada:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	689a      	ldr	r2, [r3, #8]
 800bae0:	491e      	ldr	r1, [pc, #120]	@ (800bb5c <inc_lock+0x118>)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	011b      	lsls	r3, r3, #4
 800bae6:	440b      	add	r3, r1
 800bae8:	3304      	adds	r3, #4
 800baea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	695a      	ldr	r2, [r3, #20]
 800baf0:	491a      	ldr	r1, [pc, #104]	@ (800bb5c <inc_lock+0x118>)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	011b      	lsls	r3, r3, #4
 800baf6:	440b      	add	r3, r1
 800baf8:	3308      	adds	r3, #8
 800bafa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bafc:	4a17      	ldr	r2, [pc, #92]	@ (800bb5c <inc_lock+0x118>)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	4413      	add	r3, r2
 800bb04:	330c      	adds	r3, #12
 800bb06:	2200      	movs	r2, #0
 800bb08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d009      	beq.n	800bb24 <inc_lock+0xe0>
 800bb10:	4a12      	ldr	r2, [pc, #72]	@ (800bb5c <inc_lock+0x118>)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	4413      	add	r3, r2
 800bb18:	330c      	adds	r3, #12
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <inc_lock+0xe0>
 800bb20:	2300      	movs	r3, #0
 800bb22:	e015      	b.n	800bb50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d108      	bne.n	800bb3c <inc_lock+0xf8>
 800bb2a:	4a0c      	ldr	r2, [pc, #48]	@ (800bb5c <inc_lock+0x118>)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	4413      	add	r3, r2
 800bb32:	330c      	adds	r3, #12
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	3301      	adds	r3, #1
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	e001      	b.n	800bb40 <inc_lock+0xfc>
 800bb3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb40:	4906      	ldr	r1, [pc, #24]	@ (800bb5c <inc_lock+0x118>)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	440b      	add	r3, r1
 800bb48:	330c      	adds	r3, #12
 800bb4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3301      	adds	r3, #1
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	20001b70 	.word	0x20001b70

0800bb60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	607b      	str	r3, [r7, #4]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d825      	bhi.n	800bbc0 <dec_lock+0x60>
		n = Files[i].ctr;
 800bb74:	4a17      	ldr	r2, [pc, #92]	@ (800bbd4 <dec_lock+0x74>)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	011b      	lsls	r3, r3, #4
 800bb7a:	4413      	add	r3, r2
 800bb7c:	330c      	adds	r3, #12
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb82:	89fb      	ldrh	r3, [r7, #14]
 800bb84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb88:	d101      	bne.n	800bb8e <dec_lock+0x2e>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bb8e:	89fb      	ldrh	r3, [r7, #14]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <dec_lock+0x3a>
 800bb94:	89fb      	ldrh	r3, [r7, #14]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bb9a:	4a0e      	ldr	r2, [pc, #56]	@ (800bbd4 <dec_lock+0x74>)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	330c      	adds	r3, #12
 800bba4:	89fa      	ldrh	r2, [r7, #14]
 800bba6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bba8:	89fb      	ldrh	r3, [r7, #14]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d105      	bne.n	800bbba <dec_lock+0x5a>
 800bbae:	4a09      	ldr	r2, [pc, #36]	@ (800bbd4 <dec_lock+0x74>)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	011b      	lsls	r3, r3, #4
 800bbb4:	4413      	add	r3, r2
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	737b      	strb	r3, [r7, #13]
 800bbbe:	e001      	b.n	800bbc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bbc4:	7b7b      	ldrb	r3, [r7, #13]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	20001b70 	.word	0x20001b70

0800bbd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60fb      	str	r3, [r7, #12]
 800bbe4:	e010      	b.n	800bc08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbe6:	4a0d      	ldr	r2, [pc, #52]	@ (800bc1c <clear_lock+0x44>)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	011b      	lsls	r3, r3, #4
 800bbec:	4413      	add	r3, r2
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d105      	bne.n	800bc02 <clear_lock+0x2a>
 800bbf6:	4a09      	ldr	r2, [pc, #36]	@ (800bc1c <clear_lock+0x44>)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	011b      	lsls	r3, r3, #4
 800bbfc:	4413      	add	r3, r2
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d9eb      	bls.n	800bbe6 <clear_lock+0xe>
	}
}
 800bc0e:	bf00      	nop
 800bc10:	bf00      	nop
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20001b70 	.word	0x20001b70

0800bc20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	78db      	ldrb	r3, [r3, #3]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d034      	beq.n	800bc9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7858      	ldrb	r0, [r3, #1]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc44:	2301      	movs	r3, #1
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	f7ff fd40 	bl	800b6cc <disk_write>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d002      	beq.n	800bc58 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	73fb      	strb	r3, [r7, #15]
 800bc56:	e022      	b.n	800bc9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	1ad2      	subs	r2, r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d217      	bcs.n	800bc9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	789b      	ldrb	r3, [r3, #2]
 800bc72:	613b      	str	r3, [r7, #16]
 800bc74:	e010      	b.n	800bc98 <sync_window+0x78>
					wsect += fs->fsize;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7858      	ldrb	r0, [r3, #1]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	f7ff fd1d 	bl	800b6cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d8eb      	bhi.n	800bc76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d01b      	beq.n	800bcf8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7ff ffad 	bl	800bc20 <sync_window>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d113      	bne.n	800bcf8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7858      	ldrb	r0, [r3, #1]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bcda:	2301      	movs	r3, #1
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	f7ff fcd5 	bl	800b68c <disk_read>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d004      	beq.n	800bcf2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bce8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff ff87 	bl	800bc20 <sync_window>
 800bd12:	4603      	mov	r3, r0
 800bd14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d158      	bne.n	800bdce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d148      	bne.n	800bdb6 <sync_fs+0xb2>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	791b      	ldrb	r3, [r3, #4]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d144      	bne.n	800bdb6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3334      	adds	r3, #52	@ 0x34
 800bd30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd34:	2100      	movs	r1, #0
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff fda9 	bl	800b88e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3334      	adds	r3, #52	@ 0x34
 800bd40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd44:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fd38 	bl	800b7be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3334      	adds	r3, #52	@ 0x34
 800bd52:	4921      	ldr	r1, [pc, #132]	@ (800bdd8 <sync_fs+0xd4>)
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7ff fd4d 	bl	800b7f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3334      	adds	r3, #52	@ 0x34
 800bd5e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd62:	491e      	ldr	r1, [pc, #120]	@ (800bddc <sync_fs+0xd8>)
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7ff fd45 	bl	800b7f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3334      	adds	r3, #52	@ 0x34
 800bd6e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	4619      	mov	r1, r3
 800bd78:	4610      	mov	r0, r2
 800bd7a:	f7ff fd3b 	bl	800b7f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	3334      	adds	r3, #52	@ 0x34
 800bd82:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f7ff fd31 	bl	800b7f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7858      	ldrb	r0, [r3, #1]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdaa:	2301      	movs	r3, #1
 800bdac:	f7ff fc8e 	bl	800b6cc <disk_write>
			fs->fsi_flag = 0;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	785b      	ldrb	r3, [r3, #1]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff fca4 	bl	800b70c <disk_ioctl>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d001      	beq.n	800bdce <sync_fs+0xca>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	41615252 	.word	0x41615252
 800bddc:	61417272 	.word	0x61417272

0800bde0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	3b02      	subs	r3, #2
 800bdee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	3b02      	subs	r3, #2
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d301      	bcc.n	800be00 <clust2sect+0x20>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e008      	b.n	800be12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	895b      	ldrh	r3, [r3, #10]
 800be04:	461a      	mov	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	fb03 f202 	mul.w	r2, r3, r2
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be10:	4413      	add	r3, r2
}
 800be12:	4618      	mov	r0, r3
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b086      	sub	sp, #24
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d904      	bls.n	800be3e <get_fat+0x20>
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d302      	bcc.n	800be44 <get_fat+0x26>
		val = 1;	/* Internal error */
 800be3e:	2301      	movs	r3, #1
 800be40:	617b      	str	r3, [r7, #20]
 800be42:	e08e      	b.n	800bf62 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be44:	f04f 33ff 	mov.w	r3, #4294967295
 800be48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d061      	beq.n	800bf16 <get_fat+0xf8>
 800be52:	2b03      	cmp	r3, #3
 800be54:	dc7b      	bgt.n	800bf4e <get_fat+0x130>
 800be56:	2b01      	cmp	r3, #1
 800be58:	d002      	beq.n	800be60 <get_fat+0x42>
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d041      	beq.n	800bee2 <get_fat+0xc4>
 800be5e:	e076      	b.n	800bf4e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	085b      	lsrs	r3, r3, #1
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4413      	add	r3, r2
 800be6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	0a5b      	lsrs	r3, r3, #9
 800be76:	4413      	add	r3, r2
 800be78:	4619      	mov	r1, r3
 800be7a:	6938      	ldr	r0, [r7, #16]
 800be7c:	f7ff ff14 	bl	800bca8 <move_window>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d166      	bne.n	800bf54 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	60fa      	str	r2, [r7, #12]
 800be8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	4413      	add	r3, r2
 800be94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800be98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	0a5b      	lsrs	r3, r3, #9
 800bea2:	4413      	add	r3, r2
 800bea4:	4619      	mov	r1, r3
 800bea6:	6938      	ldr	r0, [r7, #16]
 800bea8:	f7ff fefe 	bl	800bca8 <move_window>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d152      	bne.n	800bf58 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	4413      	add	r3, r2
 800bebc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bec0:	021b      	lsls	r3, r3, #8
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d002      	beq.n	800bed8 <get_fat+0xba>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	091b      	lsrs	r3, r3, #4
 800bed6:	e002      	b.n	800bede <get_fat+0xc0>
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bede:	617b      	str	r3, [r7, #20]
			break;
 800bee0:	e03f      	b.n	800bf62 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	0a1b      	lsrs	r3, r3, #8
 800beea:	4413      	add	r3, r2
 800beec:	4619      	mov	r1, r3
 800beee:	6938      	ldr	r0, [r7, #16]
 800bef0:	f7ff feda 	bl	800bca8 <move_window>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d130      	bne.n	800bf5c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bf08:	4413      	add	r3, r2
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7ff fc1c 	bl	800b748 <ld_word>
 800bf10:	4603      	mov	r3, r0
 800bf12:	617b      	str	r3, [r7, #20]
			break;
 800bf14:	e025      	b.n	800bf62 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	09db      	lsrs	r3, r3, #7
 800bf1e:	4413      	add	r3, r2
 800bf20:	4619      	mov	r1, r3
 800bf22:	6938      	ldr	r0, [r7, #16]
 800bf24:	f7ff fec0 	bl	800bca8 <move_window>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d118      	bne.n	800bf60 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf3c:	4413      	add	r3, r2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff fc1a 	bl	800b778 <ld_dword>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bf4a:	617b      	str	r3, [r7, #20]
			break;
 800bf4c:	e009      	b.n	800bf62 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf4e:	2301      	movs	r3, #1
 800bf50:	617b      	str	r3, [r7, #20]
 800bf52:	e006      	b.n	800bf62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf54:	bf00      	nop
 800bf56:	e004      	b.n	800bf62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf58:	bf00      	nop
 800bf5a:	e002      	b.n	800bf62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf5c:	bf00      	nop
 800bf5e:	e000      	b.n	800bf62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf60:	bf00      	nop
		}
	}

	return val;
 800bf62:	697b      	ldr	r3, [r7, #20]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3718      	adds	r7, #24
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf6c:	b590      	push	{r4, r7, lr}
 800bf6e:	b089      	sub	sp, #36	@ 0x24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf78:	2302      	movs	r3, #2
 800bf7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	f240 80d9 	bls.w	800c136 <put_fat+0x1ca>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	f080 80d3 	bcs.w	800c136 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	f000 8096 	beq.w	800c0c6 <put_fat+0x15a>
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	f300 80cb 	bgt.w	800c136 <put_fat+0x1ca>
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d002      	beq.n	800bfaa <put_fat+0x3e>
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d06e      	beq.n	800c086 <put_fat+0x11a>
 800bfa8:	e0c5      	b.n	800c136 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	085b      	lsrs	r3, r3, #1
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	0a5b      	lsrs	r3, r3, #9
 800bfc0:	4413      	add	r3, r2
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f7ff fe6f 	bl	800bca8 <move_window>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfce:	7ffb      	ldrb	r3, [r7, #31]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f040 80a9 	bne.w	800c128 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	1c59      	adds	r1, r3, #1
 800bfe0:	61b9      	str	r1, [r7, #24]
 800bfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe6:	4413      	add	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00d      	beq.n	800c010 <put_fat+0xa4>
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	b25b      	sxtb	r3, r3
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	b25a      	sxtb	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	011b      	lsls	r3, r3, #4
 800c006:	b25b      	sxtb	r3, r3
 800c008:	4313      	orrs	r3, r2
 800c00a:	b25b      	sxtb	r3, r3
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	e001      	b.n	800c014 <put_fat+0xa8>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	697a      	ldr	r2, [r7, #20]
 800c016:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2201      	movs	r2, #1
 800c01c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	0a5b      	lsrs	r3, r3, #9
 800c026:	4413      	add	r3, r2
 800c028:	4619      	mov	r1, r3
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff fe3c 	bl	800bca8 <move_window>
 800c030:	4603      	mov	r3, r0
 800c032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c034:	7ffb      	ldrb	r3, [r7, #31]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d178      	bne.n	800c12c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c046:	4413      	add	r3, r2
 800c048:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <put_fat+0xf0>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	091b      	lsrs	r3, r3, #4
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	e00e      	b.n	800c07a <put_fat+0x10e>
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	b25b      	sxtb	r3, r3
 800c062:	f023 030f 	bic.w	r3, r3, #15
 800c066:	b25a      	sxtb	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	0a1b      	lsrs	r3, r3, #8
 800c06c:	b25b      	sxtb	r3, r3
 800c06e:	f003 030f 	and.w	r3, r3, #15
 800c072:	b25b      	sxtb	r3, r3
 800c074:	4313      	orrs	r3, r2
 800c076:	b25b      	sxtb	r3, r3
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2201      	movs	r2, #1
 800c082:	70da      	strb	r2, [r3, #3]
			break;
 800c084:	e057      	b.n	800c136 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	0a1b      	lsrs	r3, r3, #8
 800c08e:	4413      	add	r3, r2
 800c090:	4619      	mov	r1, r3
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f7ff fe08 	bl	800bca8 <move_window>
 800c098:	4603      	mov	r3, r0
 800c09a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c09c:	7ffb      	ldrb	r3, [r7, #31]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d146      	bne.n	800c130 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c0b0:	4413      	add	r3, r2
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	b292      	uxth	r2, r2
 800c0b6:	4611      	mov	r1, r2
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fb80 	bl	800b7be <st_word>
			fs->wflag = 1;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	70da      	strb	r2, [r3, #3]
			break;
 800c0c4:	e037      	b.n	800c136 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	09db      	lsrs	r3, r3, #7
 800c0ce:	4413      	add	r3, r2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff fde8 	bl	800bca8 <move_window>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0dc:	7ffb      	ldrb	r3, [r7, #31]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d128      	bne.n	800c134 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c0f6:	4413      	add	r3, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff fb3d 	bl	800b778 <ld_dword>
 800c0fe:	4603      	mov	r3, r0
 800c100:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c104:	4323      	orrs	r3, r4
 800c106:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c116:	4413      	add	r3, r2
 800c118:	6879      	ldr	r1, [r7, #4]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff fb6a 	bl	800b7f4 <st_dword>
			fs->wflag = 1;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	70da      	strb	r2, [r3, #3]
			break;
 800c126:	e006      	b.n	800c136 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c128:	bf00      	nop
 800c12a:	e004      	b.n	800c136 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c12c:	bf00      	nop
 800c12e:	e002      	b.n	800c136 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c130:	bf00      	nop
 800c132:	e000      	b.n	800c136 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c134:	bf00      	nop
		}
	}
	return res;
 800c136:	7ffb      	ldrb	r3, [r7, #31]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3724      	adds	r7, #36	@ 0x24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd90      	pop	{r4, r7, pc}

0800c140 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b088      	sub	sp, #32
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d904      	bls.n	800c166 <remove_chain+0x26>
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	429a      	cmp	r2, r3
 800c164:	d301      	bcc.n	800c16a <remove_chain+0x2a>
 800c166:	2302      	movs	r3, #2
 800c168:	e04b      	b.n	800c202 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00c      	beq.n	800c18a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c170:	f04f 32ff 	mov.w	r2, #4294967295
 800c174:	6879      	ldr	r1, [r7, #4]
 800c176:	69b8      	ldr	r0, [r7, #24]
 800c178:	f7ff fef8 	bl	800bf6c <put_fat>
 800c17c:	4603      	mov	r3, r0
 800c17e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c180:	7ffb      	ldrb	r3, [r7, #31]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <remove_chain+0x4a>
 800c186:	7ffb      	ldrb	r3, [r7, #31]
 800c188:	e03b      	b.n	800c202 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f7ff fe46 	bl	800be1e <get_fat>
 800c192:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d031      	beq.n	800c1fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d101      	bne.n	800c1a4 <remove_chain+0x64>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	e02e      	b.n	800c202 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1aa:	d101      	bne.n	800c1b0 <remove_chain+0x70>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e028      	b.n	800c202 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	68b9      	ldr	r1, [r7, #8]
 800c1b4:	69b8      	ldr	r0, [r7, #24]
 800c1b6:	f7ff fed9 	bl	800bf6c <put_fat>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c1be:	7ffb      	ldrb	r3, [r7, #31]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <remove_chain+0x88>
 800c1c4:	7ffb      	ldrb	r3, [r7, #31]
 800c1c6:	e01c      	b.n	800c202 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	695a      	ldr	r2, [r3, #20]
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	3b02      	subs	r3, #2
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d20b      	bcs.n	800c1ee <remove_chain+0xae>
			fs->free_clst++;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	695b      	ldr	r3, [r3, #20]
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	791b      	ldrb	r3, [r3, #4]
 800c1e4:	f043 0301 	orr.w	r3, r3, #1
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d3c6      	bcc.n	800c18a <remove_chain+0x4a>
 800c1fc:	e000      	b.n	800c200 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c1fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b088      	sub	sp, #32
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10d      	bne.n	800c23c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <create_chain+0x2c>
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	69ba      	ldr	r2, [r7, #24]
 800c232:	429a      	cmp	r2, r3
 800c234:	d31b      	bcc.n	800c26e <create_chain+0x64>
 800c236:	2301      	movs	r3, #1
 800c238:	61bb      	str	r3, [r7, #24]
 800c23a:	e018      	b.n	800c26e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f7ff fded 	bl	800be1e <get_fat>
 800c244:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d801      	bhi.n	800c250 <create_chain+0x46>
 800c24c:	2301      	movs	r3, #1
 800c24e:	e070      	b.n	800c332 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c256:	d101      	bne.n	800c25c <create_chain+0x52>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	e06a      	b.n	800c332 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	429a      	cmp	r2, r3
 800c264:	d201      	bcs.n	800c26a <create_chain+0x60>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	e063      	b.n	800c332 <create_chain+0x128>
		scl = clst;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	3301      	adds	r3, #1
 800c276:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	69fa      	ldr	r2, [r7, #28]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d307      	bcc.n	800c292 <create_chain+0x88>
				ncl = 2;
 800c282:	2302      	movs	r3, #2
 800c284:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d901      	bls.n	800c292 <create_chain+0x88>
 800c28e:	2300      	movs	r3, #0
 800c290:	e04f      	b.n	800c332 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c292:	69f9      	ldr	r1, [r7, #28]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff fdc2 	bl	800be1e <get_fat>
 800c29a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00e      	beq.n	800c2c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d003      	beq.n	800c2b0 <create_chain+0xa6>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d101      	bne.n	800c2b4 <create_chain+0xaa>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	e03e      	b.n	800c332 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2b4:	69fa      	ldr	r2, [r7, #28]
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d1da      	bne.n	800c272 <create_chain+0x68>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	e038      	b.n	800c332 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c2c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c6:	69f9      	ldr	r1, [r7, #28]
 800c2c8:	6938      	ldr	r0, [r7, #16]
 800c2ca:	f7ff fe4f 	bl	800bf6c <put_fat>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d109      	bne.n	800c2ec <create_chain+0xe2>
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d006      	beq.n	800c2ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2de:	69fa      	ldr	r2, [r7, #28]
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6938      	ldr	r0, [r7, #16]
 800c2e4:	f7ff fe42 	bl	800bf6c <put_fat>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d116      	bne.n	800c320 <create_chain+0x116>
		fs->last_clst = ncl;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	69fa      	ldr	r2, [r7, #28]
 800c2f6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	695a      	ldr	r2, [r3, #20]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	3b02      	subs	r3, #2
 800c302:	429a      	cmp	r2, r3
 800c304:	d804      	bhi.n	800c310 <create_chain+0x106>
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	1e5a      	subs	r2, r3, #1
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	791b      	ldrb	r3, [r3, #4]
 800c314:	f043 0301 	orr.w	r3, r3, #1
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	711a      	strb	r2, [r3, #4]
 800c31e:	e007      	b.n	800c330 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c320:	7dfb      	ldrb	r3, [r7, #23]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d102      	bne.n	800c32c <create_chain+0x122>
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	e000      	b.n	800c32e <create_chain+0x124>
 800c32c:	2301      	movs	r3, #1
 800c32e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c330:	69fb      	ldr	r3, [r7, #28]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3720      	adds	r7, #32
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b087      	sub	sp, #28
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c34e:	3304      	adds	r3, #4
 800c350:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	0a5b      	lsrs	r3, r3, #9
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	8952      	ldrh	r2, [r2, #10]
 800c35a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c35e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	1d1a      	adds	r2, r3, #4
 800c364:	613a      	str	r2, [r7, #16]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <clmt_clust+0x3a>
 800c370:	2300      	movs	r3, #0
 800c372:	e010      	b.n	800c396 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d307      	bcc.n	800c38c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	617b      	str	r3, [r7, #20]
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	3304      	adds	r3, #4
 800c388:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c38a:	e7e9      	b.n	800c360 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c38c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	4413      	add	r3, r2
}
 800c396:	4618      	mov	r0, r3
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b086      	sub	sp, #24
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c3b8:	d204      	bcs.n	800c3c4 <dir_sdi+0x22>
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	f003 031f 	and.w	r3, r3, #31
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	e063      	b.n	800c490 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d106      	bne.n	800c3e8 <dir_sdi+0x46>
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d902      	bls.n	800c3e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10c      	bne.n	800c408 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	095b      	lsrs	r3, r3, #5
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	8912      	ldrh	r2, [r2, #8]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d301      	bcc.n	800c3fe <dir_sdi+0x5c>
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	e048      	b.n	800c490 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	61da      	str	r2, [r3, #28]
 800c406:	e029      	b.n	800c45c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	895b      	ldrh	r3, [r3, #10]
 800c40c:	025b      	lsls	r3, r3, #9
 800c40e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c410:	e019      	b.n	800c446 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6979      	ldr	r1, [r7, #20]
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff fd01 	bl	800be1e <get_fat>
 800c41c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c424:	d101      	bne.n	800c42a <dir_sdi+0x88>
 800c426:	2301      	movs	r3, #1
 800c428:	e032      	b.n	800c490 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d904      	bls.n	800c43a <dir_sdi+0x98>
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	429a      	cmp	r2, r3
 800c438:	d301      	bcc.n	800c43e <dir_sdi+0x9c>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e028      	b.n	800c490 <dir_sdi+0xee>
			ofs -= csz;
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d2e1      	bcs.n	800c412 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c44e:	6979      	ldr	r1, [r7, #20]
 800c450:	6938      	ldr	r0, [r7, #16]
 800c452:	f7ff fcc5 	bl	800bde0 <clust2sect>
 800c456:	4602      	mov	r2, r0
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <dir_sdi+0xcc>
 800c46a:	2302      	movs	r3, #2
 800c46c:	e010      	b.n	800c490 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	69da      	ldr	r2, [r3, #28]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	0a5b      	lsrs	r3, r3, #9
 800c476:	441a      	add	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c488:	441a      	add	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3718      	adds	r7, #24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	695b      	ldr	r3, [r3, #20]
 800c4ac:	3320      	adds	r3, #32
 800c4ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	69db      	ldr	r3, [r3, #28]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d003      	beq.n	800c4c0 <dir_next+0x28>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c4be:	d301      	bcc.n	800c4c4 <dir_next+0x2c>
 800c4c0:	2304      	movs	r3, #4
 800c4c2:	e0aa      	b.n	800c61a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f040 8098 	bne.w	800c600 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	1c5a      	adds	r2, r3, #1
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10b      	bne.n	800c4fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	095b      	lsrs	r3, r3, #5
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	8912      	ldrh	r2, [r2, #8]
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	f0c0 8088 	bcc.w	800c600 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	61da      	str	r2, [r3, #28]
 800c4f6:	2304      	movs	r3, #4
 800c4f8:	e08f      	b.n	800c61a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	0a5b      	lsrs	r3, r3, #9
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	8952      	ldrh	r2, [r2, #10]
 800c502:	3a01      	subs	r2, #1
 800c504:	4013      	ands	r3, r2
 800c506:	2b00      	cmp	r3, #0
 800c508:	d17a      	bne.n	800c600 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7ff fc83 	bl	800be1e <get_fat>
 800c518:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d801      	bhi.n	800c524 <dir_next+0x8c>
 800c520:	2302      	movs	r3, #2
 800c522:	e07a      	b.n	800c61a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52a:	d101      	bne.n	800c530 <dir_next+0x98>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e074      	b.n	800c61a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	429a      	cmp	r2, r3
 800c538:	d358      	bcc.n	800c5ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d104      	bne.n	800c54a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	61da      	str	r2, [r3, #28]
 800c546:	2304      	movs	r3, #4
 800c548:	e067      	b.n	800c61a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	4619      	mov	r1, r3
 800c552:	4610      	mov	r0, r2
 800c554:	f7ff fe59 	bl	800c20a <create_chain>
 800c558:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <dir_next+0xcc>
 800c560:	2307      	movs	r3, #7
 800c562:	e05a      	b.n	800c61a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d101      	bne.n	800c56e <dir_next+0xd6>
 800c56a:	2302      	movs	r3, #2
 800c56c:	e055      	b.n	800c61a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c574:	d101      	bne.n	800c57a <dir_next+0xe2>
 800c576:	2301      	movs	r3, #1
 800c578:	e04f      	b.n	800c61a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f7ff fb50 	bl	800bc20 <sync_window>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <dir_next+0xf2>
 800c586:	2301      	movs	r3, #1
 800c588:	e047      	b.n	800c61a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	3334      	adds	r3, #52	@ 0x34
 800c58e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c592:	2100      	movs	r1, #0
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff f97a 	bl	800b88e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c59a:	2300      	movs	r3, #0
 800c59c:	613b      	str	r3, [r7, #16]
 800c59e:	6979      	ldr	r1, [r7, #20]
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f7ff fc1d 	bl	800bde0 <clust2sect>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5ac:	e012      	b.n	800c5d4 <dir_next+0x13c>
						fs->wflag = 1;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7ff fb33 	bl	800bc20 <sync_window>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <dir_next+0x12c>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e02a      	b.n	800c61a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	613b      	str	r3, [r7, #16]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	895b      	ldrh	r3, [r3, #10]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d3e6      	bcc.n	800c5ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c5f2:	6979      	ldr	r1, [r7, #20]
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f7ff fbf3 	bl	800bde0 <clust2sect>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c612:	441a      	add	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b086      	sub	sp, #24
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c632:	2100      	movs	r1, #0
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff feb4 	bl	800c3a2 <dir_sdi>
 800c63a:	4603      	mov	r3, r0
 800c63c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d12b      	bne.n	800c69c <dir_alloc+0x7a>
		n = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	69db      	ldr	r3, [r3, #28]
 800c64c:	4619      	mov	r1, r3
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7ff fb2a 	bl	800bca8 <move_window>
 800c654:	4603      	mov	r3, r0
 800c656:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c658:	7dfb      	ldrb	r3, [r7, #23]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d11d      	bne.n	800c69a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a1b      	ldr	r3, [r3, #32]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2be5      	cmp	r3, #229	@ 0xe5
 800c666:	d004      	beq.n	800c672 <dir_alloc+0x50>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d107      	bne.n	800c682 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	3301      	adds	r3, #1
 800c676:	613b      	str	r3, [r7, #16]
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d102      	bne.n	800c686 <dir_alloc+0x64>
 800c680:	e00c      	b.n	800c69c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c682:	2300      	movs	r3, #0
 800c684:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c686:	2101      	movs	r1, #1
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff ff05 	bl	800c498 <dir_next>
 800c68e:	4603      	mov	r3, r0
 800c690:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c692:	7dfb      	ldrb	r3, [r7, #23]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0d7      	beq.n	800c648 <dir_alloc+0x26>
 800c698:	e000      	b.n	800c69c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c69a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c69c:	7dfb      	ldrb	r3, [r7, #23]
 800c69e:	2b04      	cmp	r3, #4
 800c6a0:	d101      	bne.n	800c6a6 <dir_alloc+0x84>
 800c6a2:	2307      	movs	r3, #7
 800c6a4:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	331a      	adds	r3, #26
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7ff f842 	bl	800b748 <ld_word>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d109      	bne.n	800c6e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	3314      	adds	r3, #20
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff f837 	bl	800b748 <ld_word>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	041b      	lsls	r3, r3, #16
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b084      	sub	sp, #16
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	60f8      	str	r0, [r7, #12]
 800c6f6:	60b9      	str	r1, [r7, #8]
 800c6f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	331a      	adds	r3, #26
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	b292      	uxth	r2, r2
 800c702:	4611      	mov	r1, r2
 800c704:	4618      	mov	r0, r3
 800c706:	f7ff f85a 	bl	800b7be <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d109      	bne.n	800c726 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	f103 0214 	add.w	r2, r3, #20
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	0c1b      	lsrs	r3, r3, #16
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	4619      	mov	r1, r3
 800c720:	4610      	mov	r0, r2
 800c722:	f7ff f84c 	bl	800b7be <st_word>
	}
}
 800c726:	bf00      	nop
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	331a      	adds	r3, #26
 800c73e:	4618      	mov	r0, r3
 800c740:	f7ff f802 	bl	800b748 <ld_word>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <cmp_lfn+0x1e>
 800c74a:	2300      	movs	r3, #0
 800c74c:	e059      	b.n	800c802 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c756:	1e5a      	subs	r2, r3, #1
 800c758:	4613      	mov	r3, r2
 800c75a:	005b      	lsls	r3, r3, #1
 800c75c:	4413      	add	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c764:	2301      	movs	r3, #1
 800c766:	81fb      	strh	r3, [r7, #14]
 800c768:	2300      	movs	r3, #0
 800c76a:	613b      	str	r3, [r7, #16]
 800c76c:	e033      	b.n	800c7d6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c76e:	4a27      	ldr	r2, [pc, #156]	@ (800c80c <cmp_lfn+0xdc>)
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	4413      	add	r3, r2
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	461a      	mov	r2, r3
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	4413      	add	r3, r2
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fe ffe3 	bl	800b748 <ld_word>
 800c782:	4603      	mov	r3, r0
 800c784:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c786:	89fb      	ldrh	r3, [r7, #14]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01a      	beq.n	800c7c2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	2bfe      	cmp	r3, #254	@ 0xfe
 800c790:	d812      	bhi.n	800c7b8 <cmp_lfn+0x88>
 800c792:	89bb      	ldrh	r3, [r7, #12]
 800c794:	4618      	mov	r0, r3
 800c796:	f002 f99b 	bl	800ead0 <ff_wtoupper>
 800c79a:	4603      	mov	r3, r0
 800c79c:	461c      	mov	r4, r3
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	617a      	str	r2, [r7, #20]
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f002 f98f 	bl	800ead0 <ff_wtoupper>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	429c      	cmp	r4, r3
 800c7b6:	d001      	beq.n	800c7bc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e022      	b.n	800c802 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c7bc:	89bb      	ldrh	r3, [r7, #12]
 800c7be:	81fb      	strh	r3, [r7, #14]
 800c7c0:	e006      	b.n	800c7d0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c7c2:	89bb      	ldrh	r3, [r7, #12]
 800c7c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d001      	beq.n	800c7d0 <cmp_lfn+0xa0>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e018      	b.n	800c802 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	613b      	str	r3, [r7, #16]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	2b0c      	cmp	r3, #12
 800c7da:	d9c8      	bls.n	800c76e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00b      	beq.n	800c800 <cmp_lfn+0xd0>
 800c7e8:	89fb      	ldrh	r3, [r7, #14]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d008      	beq.n	800c800 <cmp_lfn+0xd0>
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	881b      	ldrh	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <cmp_lfn+0xd0>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	e000      	b.n	800c802 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c800:	2301      	movs	r3, #1
}
 800c802:	4618      	mov	r0, r3
 800c804:	371c      	adds	r7, #28
 800c806:	46bd      	mov	sp, r7
 800c808:	bd90      	pop	{r4, r7, pc}
 800c80a:	bf00      	nop
 800c80c:	0800f6e8 	.word	0x0800f6e8

0800c810 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	331a      	adds	r3, #26
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fe ff92 	bl	800b748 <ld_word>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d001      	beq.n	800c82e <pick_lfn+0x1e>
 800c82a:	2300      	movs	r3, #0
 800c82c:	e04d      	b.n	800c8ca <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c836:	1e5a      	subs	r2, r3, #1
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c844:	2301      	movs	r3, #1
 800c846:	81fb      	strh	r3, [r7, #14]
 800c848:	2300      	movs	r3, #0
 800c84a:	613b      	str	r3, [r7, #16]
 800c84c:	e028      	b.n	800c8a0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c84e:	4a21      	ldr	r2, [pc, #132]	@ (800c8d4 <pick_lfn+0xc4>)
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	4413      	add	r3, r2
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	4413      	add	r3, r2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fe ff73 	bl	800b748 <ld_word>
 800c862:	4603      	mov	r3, r0
 800c864:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c866:	89fb      	ldrh	r3, [r7, #14]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00f      	beq.n	800c88c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	2bfe      	cmp	r3, #254	@ 0xfe
 800c870:	d901      	bls.n	800c876 <pick_lfn+0x66>
 800c872:	2300      	movs	r3, #0
 800c874:	e029      	b.n	800c8ca <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c876:	89bb      	ldrh	r3, [r7, #12]
 800c878:	81fb      	strh	r3, [r7, #14]
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	1c5a      	adds	r2, r3, #1
 800c87e:	617a      	str	r2, [r7, #20]
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	4413      	add	r3, r2
 800c886:	89fa      	ldrh	r2, [r7, #14]
 800c888:	801a      	strh	r2, [r3, #0]
 800c88a:	e006      	b.n	800c89a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c88c:	89bb      	ldrh	r3, [r7, #12]
 800c88e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c892:	4293      	cmp	r3, r2
 800c894:	d001      	beq.n	800c89a <pick_lfn+0x8a>
 800c896:	2300      	movs	r3, #0
 800c898:	e017      	b.n	800c8ca <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	3301      	adds	r3, #1
 800c89e:	613b      	str	r3, [r7, #16]
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	2b0c      	cmp	r3, #12
 800c8a4:	d9d3      	bls.n	800c84e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2bfe      	cmp	r3, #254	@ 0xfe
 800c8b6:	d901      	bls.n	800c8bc <pick_lfn+0xac>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e006      	b.n	800c8ca <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c8c8:	2301      	movs	r3, #1
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	0800f6e8 	.word	0x0800f6e8

0800c8d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b088      	sub	sp, #32
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	71fb      	strb	r3, [r7, #7]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	330d      	adds	r3, #13
 800c8f2:	79ba      	ldrb	r2, [r7, #6]
 800c8f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	330b      	adds	r3, #11
 800c8fa:	220f      	movs	r2, #15
 800c8fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	330c      	adds	r3, #12
 800c902:	2200      	movs	r2, #0
 800c904:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	331a      	adds	r3, #26
 800c90a:	2100      	movs	r1, #0
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe ff56 	bl	800b7be <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c912:	79fb      	ldrb	r3, [r7, #7]
 800c914:	1e5a      	subs	r2, r3, #1
 800c916:	4613      	mov	r3, r2
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4413      	add	r3, r2
 800c920:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	82fb      	strh	r3, [r7, #22]
 800c926:	2300      	movs	r3, #0
 800c928:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c92a:	8afb      	ldrh	r3, [r7, #22]
 800c92c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c930:	4293      	cmp	r3, r2
 800c932:	d007      	beq.n	800c944 <put_lfn+0x6c>
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	1c5a      	adds	r2, r3, #1
 800c938:	61fa      	str	r2, [r7, #28]
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c944:	4a17      	ldr	r2, [pc, #92]	@ (800c9a4 <put_lfn+0xcc>)
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	4413      	add	r3, r2
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	4413      	add	r3, r2
 800c952:	8afa      	ldrh	r2, [r7, #22]
 800c954:	4611      	mov	r1, r2
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe ff31 	bl	800b7be <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c95c:	8afb      	ldrh	r3, [r7, #22]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d102      	bne.n	800c968 <put_lfn+0x90>
 800c962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c966:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	3301      	adds	r3, #1
 800c96c:	61bb      	str	r3, [r7, #24]
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	2b0c      	cmp	r3, #12
 800c972:	d9da      	bls.n	800c92a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c974:	8afb      	ldrh	r3, [r7, #22]
 800c976:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d006      	beq.n	800c98c <put_lfn+0xb4>
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	4413      	add	r3, r2
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d103      	bne.n	800c994 <put_lfn+0xbc>
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c992:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	79fa      	ldrb	r2, [r7, #7]
 800c998:	701a      	strb	r2, [r3, #0]
}
 800c99a:	bf00      	nop
 800c99c:	3720      	adds	r7, #32
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	0800f6e8 	.word	0x0800f6e8

0800c9a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08c      	sub	sp, #48	@ 0x30
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c9b6:	220b      	movs	r2, #11
 800c9b8:	68b9      	ldr	r1, [r7, #8]
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f7fe ff46 	bl	800b84c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	2b05      	cmp	r3, #5
 800c9c4:	d92b      	bls.n	800ca1e <gen_numname+0x76>
		sr = seq;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c9ca:	e022      	b.n	800ca12 <gen_numname+0x6a>
			wc = *lfn++;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	1c9a      	adds	r2, r3, #2
 800c9d0:	607a      	str	r2, [r7, #4]
 800c9d2:	881b      	ldrh	r3, [r3, #0]
 800c9d4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9da:	e017      	b.n	800ca0c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	005a      	lsls	r2, r3, #1
 800c9e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9e2:	f003 0301 	and.w	r3, r3, #1
 800c9e6:	4413      	add	r3, r2
 800c9e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c9ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9ec:	085b      	lsrs	r3, r3, #1
 800c9ee:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d005      	beq.n	800ca06 <gen_numname+0x5e>
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ca00:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ca04:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ca06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca08:	3301      	adds	r3, #1
 800ca0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0e:	2b0f      	cmp	r3, #15
 800ca10:	d9e4      	bls.n	800c9dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1d8      	bne.n	800c9cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ca1e:	2307      	movs	r3, #7
 800ca20:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	f003 030f 	and.w	r3, r3, #15
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	3330      	adds	r3, #48	@ 0x30
 800ca2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ca32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ca36:	2b39      	cmp	r3, #57	@ 0x39
 800ca38:	d904      	bls.n	800ca44 <gen_numname+0x9c>
 800ca3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ca3e:	3307      	adds	r3, #7
 800ca40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ca44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca46:	1e5a      	subs	r2, r3, #1
 800ca48:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ca4a:	3330      	adds	r3, #48	@ 0x30
 800ca4c:	443b      	add	r3, r7
 800ca4e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ca52:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	091b      	lsrs	r3, r3, #4
 800ca5a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1df      	bne.n	800ca22 <gen_numname+0x7a>
	ns[i] = '~';
 800ca62:	f107 0214 	add.w	r2, r7, #20
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	4413      	add	r3, r2
 800ca6a:	227e      	movs	r2, #126	@ 0x7e
 800ca6c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ca6e:	2300      	movs	r3, #0
 800ca70:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca72:	e002      	b.n	800ca7a <gen_numname+0xd2>
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	3301      	adds	r3, #1
 800ca78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d205      	bcs.n	800ca8e <gen_numname+0xe6>
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca86:	4413      	add	r3, r2
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	2b20      	cmp	r3, #32
 800ca8c:	d1f2      	bne.n	800ca74 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca90:	2b07      	cmp	r3, #7
 800ca92:	d807      	bhi.n	800caa4 <gen_numname+0xfc>
 800ca94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ca9a:	3330      	adds	r3, #48	@ 0x30
 800ca9c:	443b      	add	r3, r7
 800ca9e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800caa2:	e000      	b.n	800caa6 <gen_numname+0xfe>
 800caa4:	2120      	movs	r1, #32
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	1c5a      	adds	r2, r3, #1
 800caaa:	627a      	str	r2, [r7, #36]	@ 0x24
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	4413      	add	r3, r2
 800cab0:	460a      	mov	r2, r1
 800cab2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab6:	2b07      	cmp	r3, #7
 800cab8:	d9e9      	bls.n	800ca8e <gen_numname+0xe6>
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	3730      	adds	r7, #48	@ 0x30
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cad0:	230b      	movs	r3, #11
 800cad2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	0852      	lsrs	r2, r2, #1
 800cada:	01db      	lsls	r3, r3, #7
 800cadc:	4313      	orrs	r3, r2
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	1c59      	adds	r1, r3, #1
 800cae4:	6079      	str	r1, [r7, #4]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	4413      	add	r3, r2
 800caea:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	3b01      	subs	r3, #1
 800caf0:	60bb      	str	r3, [r7, #8]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1ed      	bne.n	800cad4 <sum_sfn+0x10>
	return sum;
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cb10:	2304      	movs	r3, #4
 800cb12:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800cb1a:	23ff      	movs	r3, #255	@ 0xff
 800cb1c:	757b      	strb	r3, [r7, #21]
 800cb1e:	23ff      	movs	r3, #255	@ 0xff
 800cb20:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800cb22:	e081      	b.n	800cc28 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	69db      	ldr	r3, [r3, #28]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f7ff f8bc 	bl	800bca8 <move_window>
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d17c      	bne.n	800cc34 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a1b      	ldr	r3, [r3, #32]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800cb42:	7dbb      	ldrb	r3, [r7, #22]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cb48:	2304      	movs	r3, #4
 800cb4a:	75fb      	strb	r3, [r7, #23]
 800cb4c:	e077      	b.n	800cc3e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	330b      	adds	r3, #11
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb5a:	73fb      	strb	r3, [r7, #15]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7bfa      	ldrb	r2, [r7, #15]
 800cb60:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cb62:	7dbb      	ldrb	r3, [r7, #22]
 800cb64:	2be5      	cmp	r3, #229	@ 0xe5
 800cb66:	d00e      	beq.n	800cb86 <dir_read+0x80>
 800cb68:	7dbb      	ldrb	r3, [r7, #22]
 800cb6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb6c:	d00b      	beq.n	800cb86 <dir_read+0x80>
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	f023 0320 	bic.w	r3, r3, #32
 800cb74:	2b08      	cmp	r3, #8
 800cb76:	bf0c      	ite	eq
 800cb78:	2301      	moveq	r3, #1
 800cb7a:	2300      	movne	r3, #0
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	461a      	mov	r2, r3
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d002      	beq.n	800cb8c <dir_read+0x86>
				ord = 0xFF;
 800cb86:	23ff      	movs	r3, #255	@ 0xff
 800cb88:	757b      	strb	r3, [r7, #21]
 800cb8a:	e044      	b.n	800cc16 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
 800cb8e:	2b0f      	cmp	r3, #15
 800cb90:	d12f      	bne.n	800cbf2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cb92:	7dbb      	ldrb	r3, [r7, #22]
 800cb94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00d      	beq.n	800cbb8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	7b5b      	ldrb	r3, [r3, #13]
 800cba2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cba4:	7dbb      	ldrb	r3, [r7, #22]
 800cba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbaa:	75bb      	strb	r3, [r7, #22]
 800cbac:	7dbb      	ldrb	r3, [r7, #22]
 800cbae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	695a      	ldr	r2, [r3, #20]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cbb8:	7dba      	ldrb	r2, [r7, #22]
 800cbba:	7d7b      	ldrb	r3, [r7, #21]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d115      	bne.n	800cbec <dir_read+0xe6>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	330d      	adds	r3, #13
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	7d3a      	ldrb	r2, [r7, #20]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d10e      	bne.n	800cbec <dir_read+0xe6>
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	68da      	ldr	r2, [r3, #12]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7ff fe19 	bl	800c810 <pick_lfn>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d003      	beq.n	800cbec <dir_read+0xe6>
 800cbe4:	7d7b      	ldrb	r3, [r7, #21]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	e000      	b.n	800cbee <dir_read+0xe8>
 800cbec:	23ff      	movs	r3, #255	@ 0xff
 800cbee:	757b      	strb	r3, [r7, #21]
 800cbf0:	e011      	b.n	800cc16 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cbf2:	7d7b      	ldrb	r3, [r7, #21]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d109      	bne.n	800cc0c <dir_read+0x106>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a1b      	ldr	r3, [r3, #32]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7ff ff61 	bl	800cac4 <sum_sfn>
 800cc02:	4603      	mov	r3, r0
 800cc04:	461a      	mov	r2, r3
 800cc06:	7d3b      	ldrb	r3, [r7, #20]
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d015      	beq.n	800cc38 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc12:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800cc14:	e010      	b.n	800cc38 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cc16:	2100      	movs	r1, #0
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff fc3d 	bl	800c498 <dir_next>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d109      	bne.n	800cc3c <dir_read+0x136>
	while (dp->sect) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	69db      	ldr	r3, [r3, #28]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f47f af79 	bne.w	800cb24 <dir_read+0x1e>
 800cc32:	e004      	b.n	800cc3e <dir_read+0x138>
		if (res != FR_OK) break;
 800cc34:	bf00      	nop
 800cc36:	e002      	b.n	800cc3e <dir_read+0x138>
					break;
 800cc38:	bf00      	nop
 800cc3a:	e000      	b.n	800cc3e <dir_read+0x138>
		if (res != FR_OK) break;
 800cc3c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <dir_read+0x144>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	61da      	str	r2, [r3, #28]
	return res;
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3718      	adds	r7, #24
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cc62:	2100      	movs	r1, #0
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fb9c 	bl	800c3a2 <dir_sdi>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <dir_find+0x24>
 800cc74:	7dfb      	ldrb	r3, [r7, #23]
 800cc76:	e0a9      	b.n	800cdcc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc78:	23ff      	movs	r3, #255	@ 0xff
 800cc7a:	753b      	strb	r3, [r7, #20]
 800cc7c:	7d3b      	ldrb	r3, [r7, #20]
 800cc7e:	757b      	strb	r3, [r7, #21]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f04f 32ff 	mov.w	r2, #4294967295
 800cc86:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	69db      	ldr	r3, [r3, #28]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6938      	ldr	r0, [r7, #16]
 800cc90:	f7ff f80a 	bl	800bca8 <move_window>
 800cc94:	4603      	mov	r3, r0
 800cc96:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f040 8090 	bne.w	800cdc0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a1b      	ldr	r3, [r3, #32]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cca8:	7dbb      	ldrb	r3, [r7, #22]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d102      	bne.n	800ccb4 <dir_find+0x60>
 800ccae:	2304      	movs	r3, #4
 800ccb0:	75fb      	strb	r3, [r7, #23]
 800ccb2:	e08a      	b.n	800cdca <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	330b      	adds	r3, #11
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ccc0:	73fb      	strb	r3, [r7, #15]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	7bfa      	ldrb	r2, [r7, #15]
 800ccc6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ccc8:	7dbb      	ldrb	r3, [r7, #22]
 800ccca:	2be5      	cmp	r3, #229	@ 0xe5
 800cccc:	d007      	beq.n	800ccde <dir_find+0x8a>
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	f003 0308 	and.w	r3, r3, #8
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d009      	beq.n	800ccec <dir_find+0x98>
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
 800ccda:	2b0f      	cmp	r3, #15
 800ccdc:	d006      	beq.n	800ccec <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ccde:	23ff      	movs	r3, #255	@ 0xff
 800cce0:	757b      	strb	r3, [r7, #21]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f04f 32ff 	mov.w	r2, #4294967295
 800cce8:	631a      	str	r2, [r3, #48]	@ 0x30
 800ccea:	e05e      	b.n	800cdaa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
 800ccee:	2b0f      	cmp	r3, #15
 800ccf0:	d136      	bne.n	800cd60 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ccf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d154      	bne.n	800cdaa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cd00:	7dbb      	ldrb	r3, [r7, #22]
 800cd02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00d      	beq.n	800cd26 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	7b5b      	ldrb	r3, [r3, #13]
 800cd10:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cd12:	7dbb      	ldrb	r3, [r7, #22]
 800cd14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd18:	75bb      	strb	r3, [r7, #22]
 800cd1a:	7dbb      	ldrb	r3, [r7, #22]
 800cd1c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	695a      	ldr	r2, [r3, #20]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd26:	7dba      	ldrb	r2, [r7, #22]
 800cd28:	7d7b      	ldrb	r3, [r7, #21]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d115      	bne.n	800cd5a <dir_find+0x106>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	330d      	adds	r3, #13
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	7d3a      	ldrb	r2, [r7, #20]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d10e      	bne.n	800cd5a <dir_find+0x106>
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	68da      	ldr	r2, [r3, #12]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	4619      	mov	r1, r3
 800cd46:	4610      	mov	r0, r2
 800cd48:	f7ff fcf2 	bl	800c730 <cmp_lfn>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d003      	beq.n	800cd5a <dir_find+0x106>
 800cd52:	7d7b      	ldrb	r3, [r7, #21]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	e000      	b.n	800cd5c <dir_find+0x108>
 800cd5a:	23ff      	movs	r3, #255	@ 0xff
 800cd5c:	757b      	strb	r3, [r7, #21]
 800cd5e:	e024      	b.n	800cdaa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd60:	7d7b      	ldrb	r3, [r7, #21]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d109      	bne.n	800cd7a <dir_find+0x126>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff feaa 	bl	800cac4 <sum_sfn>
 800cd70:	4603      	mov	r3, r0
 800cd72:	461a      	mov	r2, r3
 800cd74:	7d3b      	ldrb	r3, [r7, #20]
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d024      	beq.n	800cdc4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <dir_find+0x14a>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6a18      	ldr	r0, [r3, #32]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3324      	adds	r3, #36	@ 0x24
 800cd90:	220b      	movs	r2, #11
 800cd92:	4619      	mov	r1, r3
 800cd94:	f7fe fd96 	bl	800b8c4 <mem_cmp>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d014      	beq.n	800cdc8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd9e:	23ff      	movs	r3, #255	@ 0xff
 800cda0:	757b      	strb	r3, [r7, #21]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295
 800cda8:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cdaa:	2100      	movs	r1, #0
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff fb73 	bl	800c498 <dir_next>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f43f af65 	beq.w	800cc88 <dir_find+0x34>
 800cdbe:	e004      	b.n	800cdca <dir_find+0x176>
		if (res != FR_OK) break;
 800cdc0:	bf00      	nop
 800cdc2:	e002      	b.n	800cdca <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cdc4:	bf00      	nop
 800cdc6:	e000      	b.n	800cdca <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cdc8:	bf00      	nop

	return res;
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3718      	adds	r7, #24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08c      	sub	sp, #48	@ 0x30
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cde8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <dir_register+0x20>
 800cdf0:	2306      	movs	r3, #6
 800cdf2:	e0e0      	b.n	800cfb6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdf8:	e002      	b.n	800ce00 <dir_register+0x2c>
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	68da      	ldr	r2, [r3, #12]
 800ce04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	881b      	ldrh	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1f4      	bne.n	800cdfa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800ce16:	f107 030c 	add.w	r3, r7, #12
 800ce1a:	220c      	movs	r2, #12
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe fd15 	bl	800b84c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d032      	beq.n	800ce92 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2240      	movs	r2, #64	@ 0x40
 800ce30:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ce34:	2301      	movs	r3, #1
 800ce36:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce38:	e016      	b.n	800ce68 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	68da      	ldr	r2, [r3, #12]
 800ce44:	f107 010c 	add.w	r1, r7, #12
 800ce48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4a:	f7ff fdad 	bl	800c9a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff ff00 	bl	800cc54 <dir_find>
 800ce54:	4603      	mov	r3, r0
 800ce56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ce5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	3301      	adds	r3, #1
 800ce66:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	2b63      	cmp	r3, #99	@ 0x63
 800ce6c:	d9e5      	bls.n	800ce3a <dir_register+0x66>
 800ce6e:	e000      	b.n	800ce72 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ce70:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ce72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce74:	2b64      	cmp	r3, #100	@ 0x64
 800ce76:	d101      	bne.n	800ce7c <dir_register+0xa8>
 800ce78:	2307      	movs	r3, #7
 800ce7a:	e09c      	b.n	800cfb6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ce7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	d002      	beq.n	800ce8a <dir_register+0xb6>
 800ce84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ce88:	e095      	b.n	800cfb6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ce8a:	7dfa      	ldrb	r2, [r7, #23]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	f003 0302 	and.w	r3, r3, #2
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d007      	beq.n	800ceac <dir_register+0xd8>
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9e:	330c      	adds	r3, #12
 800cea0:	4a47      	ldr	r2, [pc, #284]	@ (800cfc0 <dir_register+0x1ec>)
 800cea2:	fba2 2303 	umull	r2, r3, r2, r3
 800cea6:	089b      	lsrs	r3, r3, #2
 800cea8:	3301      	adds	r3, #1
 800ceaa:	e000      	b.n	800ceae <dir_register+0xda>
 800ceac:	2301      	movs	r3, #1
 800ceae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ceb0:	6a39      	ldr	r1, [r7, #32]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff fbb5 	bl	800c622 <dir_alloc>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cebe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d148      	bne.n	800cf58 <dir_register+0x184>
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	623b      	str	r3, [r7, #32]
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d042      	beq.n	800cf58 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	695a      	ldr	r2, [r3, #20]
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	015b      	lsls	r3, r3, #5
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff fa5f 	bl	800c3a2 <dir_sdi>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ceea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d132      	bne.n	800cf58 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3324      	adds	r3, #36	@ 0x24
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff fde4 	bl	800cac4 <sum_sfn>
 800cefc:	4603      	mov	r3, r0
 800cefe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	4619      	mov	r1, r3
 800cf06:	69f8      	ldr	r0, [r7, #28]
 800cf08:	f7fe fece 	bl	800bca8 <move_window>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800cf12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d11d      	bne.n	800cf56 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	68d8      	ldr	r0, [r3, #12]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a19      	ldr	r1, [r3, #32]
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	7efb      	ldrb	r3, [r7, #27]
 800cf28:	f7ff fcd6 	bl	800c8d8 <put_lfn>
				fs->wflag = 1;
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cf32:	2100      	movs	r1, #0
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff faaf 	bl	800c498 <dir_next>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800cf40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d107      	bne.n	800cf58 <dir_register+0x184>
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	623b      	str	r3, [r7, #32]
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1d5      	bne.n	800cf00 <dir_register+0x12c>
 800cf54:	e000      	b.n	800cf58 <dir_register+0x184>
				if (res != FR_OK) break;
 800cf56:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d128      	bne.n	800cfb2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	69db      	ldr	r3, [r3, #28]
 800cf64:	4619      	mov	r1, r3
 800cf66:	69f8      	ldr	r0, [r7, #28]
 800cf68:	f7fe fe9e 	bl	800bca8 <move_window>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800cf72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d11b      	bne.n	800cfb2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	2220      	movs	r2, #32
 800cf80:	2100      	movs	r1, #0
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fe fc83 	bl	800b88e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a18      	ldr	r0, [r3, #32]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	3324      	adds	r3, #36	@ 0x24
 800cf90:	220b      	movs	r2, #11
 800cf92:	4619      	mov	r1, r3
 800cf94:	f7fe fc5a 	bl	800b84c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	330c      	adds	r3, #12
 800cfa4:	f002 0218 	and.w	r2, r2, #24
 800cfa8:	b2d2      	uxtb	r2, r2
 800cfaa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cfb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3730      	adds	r7, #48	@ 0x30
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	4ec4ec4f 	.word	0x4ec4ec4f

0800cfc4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 80ca 	beq.w	800d178 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfec:	d032      	beq.n	800d054 <get_fileinfo+0x90>
			i = j = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	61bb      	str	r3, [r7, #24]
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cff6:	e01b      	b.n	800d030 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cff8:	89fb      	ldrh	r3, [r7, #14]
 800cffa:	2100      	movs	r1, #0
 800cffc:	4618      	mov	r0, r3
 800cffe:	f001 fd2b 	bl	800ea58 <ff_convert>
 800d002:	4603      	mov	r3, r0
 800d004:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d006:	89fb      	ldrh	r3, [r7, #14]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d102      	bne.n	800d012 <get_fileinfo+0x4e>
 800d00c:	2300      	movs	r3, #0
 800d00e:	61fb      	str	r3, [r7, #28]
 800d010:	e01a      	b.n	800d048 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	2bfe      	cmp	r3, #254	@ 0xfe
 800d016:	d902      	bls.n	800d01e <get_fileinfo+0x5a>
 800d018:	2300      	movs	r3, #0
 800d01a:	61fb      	str	r3, [r7, #28]
 800d01c:	e014      	b.n	800d048 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	61fa      	str	r2, [r7, #28]
 800d024:	89fa      	ldrh	r2, [r7, #14]
 800d026:	b2d1      	uxtb	r1, r2
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	4413      	add	r3, r2
 800d02c:	460a      	mov	r2, r1
 800d02e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	68da      	ldr	r2, [r3, #12]
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	1c59      	adds	r1, r3, #1
 800d038:	61b9      	str	r1, [r7, #24]
 800d03a:	005b      	lsls	r3, r3, #1
 800d03c:	4413      	add	r3, r2
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	81fb      	strh	r3, [r7, #14]
 800d042:	89fb      	ldrh	r3, [r7, #14]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1d7      	bne.n	800cff8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	4413      	add	r3, r2
 800d04e:	3316      	adds	r3, #22
 800d050:	2200      	movs	r2, #0
 800d052:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	61bb      	str	r3, [r7, #24]
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	4413      	add	r3, r2
 800d062:	3316      	adds	r3, #22
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d068:	e04d      	b.n	800d106 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a1a      	ldr	r2, [r3, #32]
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	1c59      	adds	r1, r3, #1
 800d072:	61f9      	str	r1, [r7, #28]
 800d074:	4413      	add	r3, r2
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d07a:	7dfb      	ldrb	r3, [r7, #23]
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d041      	beq.n	800d104 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	2b05      	cmp	r3, #5
 800d084:	d101      	bne.n	800d08a <get_fileinfo+0xc6>
 800d086:	23e5      	movs	r3, #229	@ 0xe5
 800d088:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	2b09      	cmp	r3, #9
 800d08e:	d10f      	bne.n	800d0b0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800d090:	89bb      	ldrh	r3, [r7, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d105      	bne.n	800d0a2 <get_fileinfo+0xde>
 800d096:	683a      	ldr	r2, [r7, #0]
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	4413      	add	r3, r2
 800d09c:	3316      	adds	r3, #22
 800d09e:	222e      	movs	r2, #46	@ 0x2e
 800d0a0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	61ba      	str	r2, [r7, #24]
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	222e      	movs	r2, #46	@ 0x2e
 800d0ae:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	3309      	adds	r3, #9
 800d0b8:	7dfa      	ldrb	r2, [r7, #23]
 800d0ba:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d0bc:	89bb      	ldrh	r3, [r7, #12]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d11c      	bne.n	800d0fc <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	2b40      	cmp	r3, #64	@ 0x40
 800d0c6:	d913      	bls.n	800d0f0 <get_fileinfo+0x12c>
 800d0c8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ca:	2b5a      	cmp	r3, #90	@ 0x5a
 800d0cc:	d810      	bhi.n	800d0f0 <get_fileinfo+0x12c>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	330c      	adds	r3, #12
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	2b08      	cmp	r3, #8
 800d0dc:	d901      	bls.n	800d0e2 <get_fileinfo+0x11e>
 800d0de:	2310      	movs	r3, #16
 800d0e0:	e000      	b.n	800d0e4 <get_fileinfo+0x120>
 800d0e2:	2308      	movs	r3, #8
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d002      	beq.n	800d0f0 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	3320      	adds	r3, #32
 800d0ee:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	3316      	adds	r3, #22
 800d0f8:	7dfa      	ldrb	r2, [r7, #23]
 800d0fa:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	3301      	adds	r3, #1
 800d100:	61bb      	str	r3, [r7, #24]
 800d102:	e000      	b.n	800d106 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800d104:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	2b0a      	cmp	r3, #10
 800d10a:	d9ae      	bls.n	800d06a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d10c:	89bb      	ldrh	r3, [r7, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10d      	bne.n	800d12e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	4413      	add	r3, r2
 800d118:	3316      	adds	r3, #22
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	330c      	adds	r3, #12
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <get_fileinfo+0x16a>
 800d12a:	2300      	movs	r3, #0
 800d12c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	4413      	add	r3, r2
 800d134:	3309      	adds	r3, #9
 800d136:	2200      	movs	r2, #0
 800d138:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	7ada      	ldrb	r2, [r3, #11]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a1b      	ldr	r3, [r3, #32]
 800d148:	331c      	adds	r3, #28
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fe fb14 	bl	800b778 <ld_dword>
 800d150:	4602      	mov	r2, r0
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a1b      	ldr	r3, [r3, #32]
 800d15a:	3316      	adds	r3, #22
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe fb0b 	bl	800b778 <ld_dword>
 800d162:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	b29a      	uxth	r2, r3
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	80da      	strh	r2, [r3, #6]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	0c1b      	lsrs	r3, r3, #16
 800d170:	b29a      	uxth	r2, r3
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	809a      	strh	r2, [r3, #4]
 800d176:	e000      	b.n	800d17a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d178:	bf00      	nop
}
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08a      	sub	sp, #40	@ 0x28
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	613b      	str	r3, [r7, #16]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	60fb      	str	r3, [r7, #12]
 800d198:	2300      	movs	r3, #0
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	61ba      	str	r2, [r7, #24]
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d1ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1b0:	2b1f      	cmp	r3, #31
 800d1b2:	d940      	bls.n	800d236 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d1b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1b6:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1b8:	d006      	beq.n	800d1c8 <create_name+0x48>
 800d1ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1bc:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1be:	d110      	bne.n	800d1e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d1c0:	e002      	b.n	800d1c8 <create_name+0x48>
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	61bb      	str	r3, [r7, #24]
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1d2:	d0f6      	beq.n	800d1c2 <create_name+0x42>
 800d1d4:	693a      	ldr	r2, [r7, #16]
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	4413      	add	r3, r2
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1de:	d0f0      	beq.n	800d1c2 <create_name+0x42>
			break;
 800d1e0:	e02a      	b.n	800d238 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2bfe      	cmp	r3, #254	@ 0xfe
 800d1e6:	d901      	bls.n	800d1ec <create_name+0x6c>
 800d1e8:	2306      	movs	r3, #6
 800d1ea:	e17d      	b.n	800d4e8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d1ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d1f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f001 fc2e 	bl	800ea58 <ff_convert>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d200:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <create_name+0x8a>
 800d206:	2306      	movs	r3, #6
 800d208:	e16e      	b.n	800d4e8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d20a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d20c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d20e:	d809      	bhi.n	800d224 <create_name+0xa4>
 800d210:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d212:	4619      	mov	r1, r3
 800d214:	488d      	ldr	r0, [pc, #564]	@ (800d44c <create_name+0x2cc>)
 800d216:	f7fe fb7c 	bl	800b912 <chk_chr>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d001      	beq.n	800d224 <create_name+0xa4>
 800d220:	2306      	movs	r3, #6
 800d222:	e161      	b.n	800d4e8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	617a      	str	r2, [r7, #20]
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	4413      	add	r3, r2
 800d230:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d232:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d234:	e7b4      	b.n	800d1a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d236:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	441a      	add	r2, r3
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d244:	2b1f      	cmp	r3, #31
 800d246:	d801      	bhi.n	800d24c <create_name+0xcc>
 800d248:	2304      	movs	r3, #4
 800d24a:	e000      	b.n	800d24e <create_name+0xce>
 800d24c:	2300      	movs	r3, #0
 800d24e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d252:	e011      	b.n	800d278 <create_name+0xf8>
		w = lfn[di - 1];
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d25a:	3b01      	subs	r3, #1
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	4413      	add	r3, r2
 800d262:	881b      	ldrh	r3, [r3, #0]
 800d264:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d268:	2b20      	cmp	r3, #32
 800d26a:	d002      	beq.n	800d272 <create_name+0xf2>
 800d26c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d26e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d270:	d106      	bne.n	800d280 <create_name+0x100>
		di--;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	3b01      	subs	r3, #1
 800d276:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1ea      	bne.n	800d254 <create_name+0xd4>
 800d27e:	e000      	b.n	800d282 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d280:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	4413      	add	r3, r2
 800d28a:	2200      	movs	r2, #0
 800d28c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <create_name+0x118>
 800d294:	2306      	movs	r3, #6
 800d296:	e127      	b.n	800d4e8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3324      	adds	r3, #36	@ 0x24
 800d29c:	220b      	movs	r2, #11
 800d29e:	2120      	movs	r1, #32
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fe faf4 	bl	800b88e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61bb      	str	r3, [r7, #24]
 800d2aa:	e002      	b.n	800d2b2 <create_name+0x132>
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	61bb      	str	r3, [r7, #24]
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	881b      	ldrh	r3, [r3, #0]
 800d2bc:	2b20      	cmp	r3, #32
 800d2be:	d0f5      	beq.n	800d2ac <create_name+0x12c>
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2cc:	d0ee      	beq.n	800d2ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d009      	beq.n	800d2e8 <create_name+0x168>
 800d2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2d8:	f043 0303 	orr.w	r3, r3, #3
 800d2dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d2e0:	e002      	b.n	800d2e8 <create_name+0x168>
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d009      	beq.n	800d302 <create_name+0x182>
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800d300:	d1ef      	bne.n	800d2e2 <create_name+0x162>

	i = b = 0; ni = 8;
 800d302:	2300      	movs	r3, #0
 800d304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d308:	2300      	movs	r3, #0
 800d30a:	623b      	str	r3, [r7, #32]
 800d30c:	2308      	movs	r3, #8
 800d30e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	61ba      	str	r2, [r7, #24]
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	4413      	add	r3, r2
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d322:	2b00      	cmp	r3, #0
 800d324:	f000 8090 	beq.w	800d448 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	d006      	beq.n	800d33c <create_name+0x1bc>
 800d32e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d330:	2b2e      	cmp	r3, #46	@ 0x2e
 800d332:	d10a      	bne.n	800d34a <create_name+0x1ca>
 800d334:	69ba      	ldr	r2, [r7, #24]
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d006      	beq.n	800d34a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d340:	f043 0303 	orr.w	r3, r3, #3
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d348:	e07d      	b.n	800d446 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d34a:	6a3a      	ldr	r2, [r7, #32]
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d203      	bcs.n	800d35a <create_name+0x1da>
 800d352:	69ba      	ldr	r2, [r7, #24]
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	429a      	cmp	r2, r3
 800d358:	d123      	bne.n	800d3a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	2b0b      	cmp	r3, #11
 800d35e:	d106      	bne.n	800d36e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d364:	f043 0303 	orr.w	r3, r3, #3
 800d368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d36c:	e075      	b.n	800d45a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	429a      	cmp	r2, r3
 800d374:	d005      	beq.n	800d382 <create_name+0x202>
 800d376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d37a:	f043 0303 	orr.w	r3, r3, #3
 800d37e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d382:	69ba      	ldr	r2, [r7, #24]
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	429a      	cmp	r2, r3
 800d388:	d866      	bhi.n	800d458 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	61bb      	str	r3, [r7, #24]
 800d38e:	2308      	movs	r3, #8
 800d390:	623b      	str	r3, [r7, #32]
 800d392:	230b      	movs	r3, #11
 800d394:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d396:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d3a0:	e051      	b.n	800d446 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d3a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3a6:	d914      	bls.n	800d3d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d3a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f001 fb53 	bl	800ea58 <ff_convert>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d3b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d004      	beq.n	800d3c6 <create_name+0x246>
 800d3bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3be:	3b80      	subs	r3, #128	@ 0x80
 800d3c0:	4a23      	ldr	r2, [pc, #140]	@ (800d450 <create_name+0x2d0>)
 800d3c2:	5cd3      	ldrb	r3, [r2, r3]
 800d3c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3ca:	f043 0302 	orr.w	r3, r3, #2
 800d3ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d3d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d007      	beq.n	800d3e8 <create_name+0x268>
 800d3d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3da:	4619      	mov	r1, r3
 800d3dc:	481d      	ldr	r0, [pc, #116]	@ (800d454 <create_name+0x2d4>)
 800d3de:	f7fe fa98 	bl	800b912 <chk_chr>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d008      	beq.n	800d3fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d3e8:	235f      	movs	r3, #95	@ 0x5f
 800d3ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3f0:	f043 0303 	orr.w	r3, r3, #3
 800d3f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3f8:	e01b      	b.n	800d432 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d3fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3fc:	2b40      	cmp	r3, #64	@ 0x40
 800d3fe:	d909      	bls.n	800d414 <create_name+0x294>
 800d400:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d402:	2b5a      	cmp	r3, #90	@ 0x5a
 800d404:	d806      	bhi.n	800d414 <create_name+0x294>
					b |= 2;
 800d406:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d40a:	f043 0302 	orr.w	r3, r3, #2
 800d40e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d412:	e00e      	b.n	800d432 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d416:	2b60      	cmp	r3, #96	@ 0x60
 800d418:	d90b      	bls.n	800d432 <create_name+0x2b2>
 800d41a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d41c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d41e:	d808      	bhi.n	800d432 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d420:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d424:	f043 0301 	orr.w	r3, r3, #1
 800d428:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d42c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d42e:	3b20      	subs	r3, #32
 800d430:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d432:	6a3b      	ldr	r3, [r7, #32]
 800d434:	1c5a      	adds	r2, r3, #1
 800d436:	623a      	str	r2, [r7, #32]
 800d438:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d43a:	b2d1      	uxtb	r1, r2
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	4413      	add	r3, r2
 800d440:	460a      	mov	r2, r1
 800d442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d446:	e763      	b.n	800d310 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d448:	bf00      	nop
 800d44a:	e006      	b.n	800d45a <create_name+0x2da>
 800d44c:	0800f58c 	.word	0x0800f58c
 800d450:	0800f668 	.word	0x0800f668
 800d454:	0800f598 	.word	0x0800f598
			if (si > di) break;			/* No extension */
 800d458:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d460:	2be5      	cmp	r3, #229	@ 0xe5
 800d462:	d103      	bne.n	800d46c <create_name+0x2ec>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2205      	movs	r2, #5
 800d468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	2b08      	cmp	r3, #8
 800d470:	d104      	bne.n	800d47c <create_name+0x2fc>
 800d472:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d47c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d480:	f003 030c 	and.w	r3, r3, #12
 800d484:	2b0c      	cmp	r3, #12
 800d486:	d005      	beq.n	800d494 <create_name+0x314>
 800d488:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d48c:	f003 0303 	and.w	r3, r3, #3
 800d490:	2b03      	cmp	r3, #3
 800d492:	d105      	bne.n	800d4a0 <create_name+0x320>
 800d494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d498:	f043 0302 	orr.w	r3, r3, #2
 800d49c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4a4:	f003 0302 	and.w	r3, r3, #2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d117      	bne.n	800d4dc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d4ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4b0:	f003 0303 	and.w	r3, r3, #3
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d105      	bne.n	800d4c4 <create_name+0x344>
 800d4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4bc:	f043 0310 	orr.w	r3, r3, #16
 800d4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d4c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4c8:	f003 030c 	and.w	r3, r3, #12
 800d4cc:	2b04      	cmp	r3, #4
 800d4ce:	d105      	bne.n	800d4dc <create_name+0x35c>
 800d4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4d4:	f043 0308 	orr.w	r3, r3, #8
 800d4d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d4e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800d4e6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3728      	adds	r7, #40	@ 0x28
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d504:	e002      	b.n	800d50c <follow_path+0x1c>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	3301      	adds	r3, #1
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b2f      	cmp	r3, #47	@ 0x2f
 800d512:	d0f8      	beq.n	800d506 <follow_path+0x16>
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b5c      	cmp	r3, #92	@ 0x5c
 800d51a:	d0f4      	beq.n	800d506 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	2200      	movs	r2, #0
 800d520:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2b1f      	cmp	r3, #31
 800d528:	d80a      	bhi.n	800d540 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2280      	movs	r2, #128	@ 0x80
 800d52e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d532:	2100      	movs	r1, #0
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7fe ff34 	bl	800c3a2 <dir_sdi>
 800d53a:	4603      	mov	r3, r0
 800d53c:	75fb      	strb	r3, [r7, #23]
 800d53e:	e043      	b.n	800d5c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d540:	463b      	mov	r3, r7
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff fe1b 	bl	800d180 <create_name>
 800d54a:	4603      	mov	r3, r0
 800d54c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d134      	bne.n	800d5be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7ff fb7d 	bl	800cc54 <dir_find>
 800d55a:	4603      	mov	r3, r0
 800d55c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d564:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00a      	beq.n	800d582 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d56c:	7dfb      	ldrb	r3, [r7, #23]
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d127      	bne.n	800d5c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d572:	7afb      	ldrb	r3, [r7, #11]
 800d574:	f003 0304 	and.w	r3, r3, #4
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d122      	bne.n	800d5c2 <follow_path+0xd2>
 800d57c:	2305      	movs	r3, #5
 800d57e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d580:	e01f      	b.n	800d5c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d582:	7afb      	ldrb	r3, [r7, #11]
 800d584:	f003 0304 	and.w	r3, r3, #4
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d11c      	bne.n	800d5c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	799b      	ldrb	r3, [r3, #6]
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d598:	2305      	movs	r3, #5
 800d59a:	75fb      	strb	r3, [r7, #23]
 800d59c:	e014      	b.n	800d5c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	695b      	ldr	r3, [r3, #20]
 800d5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ac:	4413      	add	r3, r2
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f7ff f87d 	bl	800c6b0 <ld_clust>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d5bc:	e7c0      	b.n	800d540 <follow_path+0x50>
			if (res != FR_OK) break;
 800d5be:	bf00      	nop
 800d5c0:	e002      	b.n	800d5c8 <follow_path+0xd8>
				break;
 800d5c2:	bf00      	nop
 800d5c4:	e000      	b.n	800d5c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d5c6:	bf00      	nop
			}
		}
	}

	return res;
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b087      	sub	sp, #28
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d5da:	f04f 33ff 	mov.w	r3, #4294967295
 800d5de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d031      	beq.n	800d64c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	617b      	str	r3, [r7, #20]
 800d5ee:	e002      	b.n	800d5f6 <get_ldnumber+0x24>
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	617b      	str	r3, [r7, #20]
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b1f      	cmp	r3, #31
 800d5fc:	d903      	bls.n	800d606 <get_ldnumber+0x34>
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b3a      	cmp	r3, #58	@ 0x3a
 800d604:	d1f4      	bne.n	800d5f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b3a      	cmp	r3, #58	@ 0x3a
 800d60c:	d11c      	bne.n	800d648 <get_ldnumber+0x76>
			tp = *path;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	1c5a      	adds	r2, r3, #1
 800d618:	60fa      	str	r2, [r7, #12]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	3b30      	subs	r3, #48	@ 0x30
 800d61e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	2b09      	cmp	r3, #9
 800d624:	d80e      	bhi.n	800d644 <get_ldnumber+0x72>
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d10a      	bne.n	800d644 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d107      	bne.n	800d644 <get_ldnumber+0x72>
					vol = (int)i;
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	3301      	adds	r3, #1
 800d63c:	617b      	str	r3, [r7, #20]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	e002      	b.n	800d64e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d648:	2300      	movs	r3, #0
 800d64a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d64c:	693b      	ldr	r3, [r7, #16]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	371c      	adds	r7, #28
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
	...

0800d65c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	70da      	strb	r2, [r3, #3]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f04f 32ff 	mov.w	r2, #4294967295
 800d672:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d674:	6839      	ldr	r1, [r7, #0]
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7fe fb16 	bl	800bca8 <move_window>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d001      	beq.n	800d686 <check_fs+0x2a>
 800d682:	2304      	movs	r3, #4
 800d684:	e038      	b.n	800d6f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	3334      	adds	r3, #52	@ 0x34
 800d68a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe f85a 	bl	800b748 <ld_word>
 800d694:	4603      	mov	r3, r0
 800d696:	461a      	mov	r2, r3
 800d698:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d001      	beq.n	800d6a4 <check_fs+0x48>
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e029      	b.n	800d6f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d6aa:	2be9      	cmp	r3, #233	@ 0xe9
 800d6ac:	d009      	beq.n	800d6c2 <check_fs+0x66>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d6b4:	2beb      	cmp	r3, #235	@ 0xeb
 800d6b6:	d11e      	bne.n	800d6f6 <check_fs+0x9a>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d6be:	2b90      	cmp	r3, #144	@ 0x90
 800d6c0:	d119      	bne.n	800d6f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	3334      	adds	r3, #52	@ 0x34
 800d6c6:	3336      	adds	r3, #54	@ 0x36
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fe f855 	bl	800b778 <ld_dword>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d6d4:	4a0a      	ldr	r2, [pc, #40]	@ (800d700 <check_fs+0xa4>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d101      	bne.n	800d6de <check_fs+0x82>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e00c      	b.n	800d6f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	3334      	adds	r3, #52	@ 0x34
 800d6e2:	3352      	adds	r3, #82	@ 0x52
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fe f847 	bl	800b778 <ld_dword>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	4a05      	ldr	r2, [pc, #20]	@ (800d704 <check_fs+0xa8>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d101      	bne.n	800d6f6 <check_fs+0x9a>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e000      	b.n	800d6f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d6f6:	2302      	movs	r3, #2
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	00544146 	.word	0x00544146
 800d704:	33544146 	.word	0x33544146

0800d708 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b096      	sub	sp, #88	@ 0x58
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	4613      	mov	r3, r2
 800d714:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2200      	movs	r2, #0
 800d71a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f7ff ff58 	bl	800d5d2 <get_ldnumber>
 800d722:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d726:	2b00      	cmp	r3, #0
 800d728:	da01      	bge.n	800d72e <find_volume+0x26>
 800d72a:	230b      	movs	r3, #11
 800d72c:	e230      	b.n	800db90 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d72e:	4aa1      	ldr	r2, [pc, #644]	@ (800d9b4 <find_volume+0x2ac>)
 800d730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d736:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d101      	bne.n	800d742 <find_volume+0x3a>
 800d73e:	230c      	movs	r3, #12
 800d740:	e226      	b.n	800db90 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d746:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d748:	79fb      	ldrb	r3, [r7, #7]
 800d74a:	f023 0301 	bic.w	r3, r3, #1
 800d74e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01a      	beq.n	800d78e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75a:	785b      	ldrb	r3, [r3, #1]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fd ff55 	bl	800b60c <disk_status>
 800d762:	4603      	mov	r3, r0
 800d764:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d768:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d76c:	f003 0301 	and.w	r3, r3, #1
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10c      	bne.n	800d78e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d774:	79fb      	ldrb	r3, [r7, #7]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d007      	beq.n	800d78a <find_volume+0x82>
 800d77a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d77e:	f003 0304 	and.w	r3, r3, #4
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d786:	230a      	movs	r3, #10
 800d788:	e202      	b.n	800db90 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800d78a:	2300      	movs	r3, #0
 800d78c:	e200      	b.n	800db90 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	2200      	movs	r2, #0
 800d792:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d796:	b2da      	uxtb	r2, r3
 800d798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79e:	785b      	ldrb	r3, [r3, #1]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fd ff4d 	bl	800b640 <disk_initialize>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d7ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7b0:	f003 0301 	and.w	r3, r3, #1
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d7b8:	2303      	movs	r3, #3
 800d7ba:	e1e9      	b.n	800db90 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d7bc:	79fb      	ldrb	r3, [r7, #7]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d007      	beq.n	800d7d2 <find_volume+0xca>
 800d7c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7c6:	f003 0304 	and.w	r3, r3, #4
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d7ce:	230a      	movs	r3, #10
 800d7d0:	e1de      	b.n	800db90 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d7d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d7d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7da:	f7ff ff3f 	bl	800d65c <check_fs>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d149      	bne.n	800d880 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7f0:	e01e      	b.n	800d830 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7fa:	011b      	lsls	r3, r3, #4
 800d7fc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d800:	4413      	add	r3, r2
 800d802:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d806:	3304      	adds	r3, #4
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d006      	beq.n	800d81c <find_volume+0x114>
 800d80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d810:	3308      	adds	r3, #8
 800d812:	4618      	mov	r0, r3
 800d814:	f7fd ffb0 	bl	800b778 <ld_dword>
 800d818:	4602      	mov	r2, r0
 800d81a:	e000      	b.n	800d81e <find_volume+0x116>
 800d81c:	2200      	movs	r2, #0
 800d81e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	3358      	adds	r3, #88	@ 0x58
 800d824:	443b      	add	r3, r7
 800d826:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d82a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d82c:	3301      	adds	r3, #1
 800d82e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d832:	2b03      	cmp	r3, #3
 800d834:	d9dd      	bls.n	800d7f2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d836:	2300      	movs	r3, #0
 800d838:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d83a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <find_volume+0x13e>
 800d840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d842:	3b01      	subs	r3, #1
 800d844:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	3358      	adds	r3, #88	@ 0x58
 800d84c:	443b      	add	r3, r7
 800d84e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d852:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d856:	2b00      	cmp	r3, #0
 800d858:	d005      	beq.n	800d866 <find_volume+0x15e>
 800d85a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d85c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d85e:	f7ff fefd 	bl	800d65c <check_fs>
 800d862:	4603      	mov	r3, r0
 800d864:	e000      	b.n	800d868 <find_volume+0x160>
 800d866:	2303      	movs	r3, #3
 800d868:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d86c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d870:	2b01      	cmp	r3, #1
 800d872:	d905      	bls.n	800d880 <find_volume+0x178>
 800d874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d876:	3301      	adds	r3, #1
 800d878:	643b      	str	r3, [r7, #64]	@ 0x40
 800d87a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d87c:	2b03      	cmp	r3, #3
 800d87e:	d9e2      	bls.n	800d846 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d880:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d884:	2b04      	cmp	r3, #4
 800d886:	d101      	bne.n	800d88c <find_volume+0x184>
 800d888:	2301      	movs	r3, #1
 800d88a:	e181      	b.n	800db90 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d88c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d890:	2b01      	cmp	r3, #1
 800d892:	d901      	bls.n	800d898 <find_volume+0x190>
 800d894:	230d      	movs	r3, #13
 800d896:	e17b      	b.n	800db90 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89a:	3334      	adds	r3, #52	@ 0x34
 800d89c:	330b      	adds	r3, #11
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fd ff52 	bl	800b748 <ld_word>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8aa:	d001      	beq.n	800d8b0 <find_volume+0x1a8>
 800d8ac:	230d      	movs	r3, #13
 800d8ae:	e16f      	b.n	800db90 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b2:	3334      	adds	r3, #52	@ 0x34
 800d8b4:	3316      	adds	r3, #22
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fd ff46 	bl	800b748 <ld_word>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d8c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d106      	bne.n	800d8d4 <find_volume+0x1cc>
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c8:	3334      	adds	r3, #52	@ 0x34
 800d8ca:	3324      	adds	r3, #36	@ 0x24
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fd ff53 	bl	800b778 <ld_dword>
 800d8d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8d8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8dc:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e6:	789b      	ldrb	r3, [r3, #2]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d005      	beq.n	800d8f8 <find_volume+0x1f0>
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ee:	789b      	ldrb	r3, [r3, #2]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d001      	beq.n	800d8f8 <find_volume+0x1f0>
 800d8f4:	230d      	movs	r3, #13
 800d8f6:	e14b      	b.n	800db90 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8fa:	789b      	ldrb	r3, [r3, #2]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d900:	fb02 f303 	mul.w	r3, r2, r3
 800d904:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d90c:	461a      	mov	r2, r3
 800d90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d910:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d914:	895b      	ldrh	r3, [r3, #10]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d008      	beq.n	800d92c <find_volume+0x224>
 800d91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d91c:	895b      	ldrh	r3, [r3, #10]
 800d91e:	461a      	mov	r2, r3
 800d920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d922:	895b      	ldrh	r3, [r3, #10]
 800d924:	3b01      	subs	r3, #1
 800d926:	4013      	ands	r3, r2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <find_volume+0x228>
 800d92c:	230d      	movs	r3, #13
 800d92e:	e12f      	b.n	800db90 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d932:	3334      	adds	r3, #52	@ 0x34
 800d934:	3311      	adds	r3, #17
 800d936:	4618      	mov	r0, r3
 800d938:	f7fd ff06 	bl	800b748 <ld_word>
 800d93c:	4603      	mov	r3, r0
 800d93e:	461a      	mov	r2, r3
 800d940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d942:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d946:	891b      	ldrh	r3, [r3, #8]
 800d948:	f003 030f 	and.w	r3, r3, #15
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <find_volume+0x24e>
 800d952:	230d      	movs	r3, #13
 800d954:	e11c      	b.n	800db90 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d958:	3334      	adds	r3, #52	@ 0x34
 800d95a:	3313      	adds	r3, #19
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fd fef3 	bl	800b748 <ld_word>
 800d962:	4603      	mov	r3, r0
 800d964:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d106      	bne.n	800d97a <find_volume+0x272>
 800d96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96e:	3334      	adds	r3, #52	@ 0x34
 800d970:	3320      	adds	r3, #32
 800d972:	4618      	mov	r0, r3
 800d974:	f7fd ff00 	bl	800b778 <ld_dword>
 800d978:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97c:	3334      	adds	r3, #52	@ 0x34
 800d97e:	330e      	adds	r3, #14
 800d980:	4618      	mov	r0, r3
 800d982:	f7fd fee1 	bl	800b748 <ld_word>
 800d986:	4603      	mov	r3, r0
 800d988:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d98a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <find_volume+0x28c>
 800d990:	230d      	movs	r3, #13
 800d992:	e0fd      	b.n	800db90 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d994:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d998:	4413      	add	r3, r2
 800d99a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d99c:	8912      	ldrh	r2, [r2, #8]
 800d99e:	0912      	lsrs	r2, r2, #4
 800d9a0:	b292      	uxth	r2, r2
 800d9a2:	4413      	add	r3, r2
 800d9a4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d9a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d204      	bcs.n	800d9b8 <find_volume+0x2b0>
 800d9ae:	230d      	movs	r3, #13
 800d9b0:	e0ee      	b.n	800db90 <find_volume+0x488>
 800d9b2:	bf00      	nop
 800d9b4:	20001b68 	.word	0x20001b68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d9b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9c0:	8952      	ldrh	r2, [r2, #10]
 800d9c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <find_volume+0x2ca>
 800d9ce:	230d      	movs	r3, #13
 800d9d0:	e0de      	b.n	800db90 <find_volume+0x488>
		fmt = FS_FAT32;
 800d9d2:	2303      	movs	r3, #3
 800d9d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9da:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d802      	bhi.n	800d9e8 <find_volume+0x2e0>
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ea:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d802      	bhi.n	800d9f8 <find_volume+0x2f0>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fa:	1c9a      	adds	r2, r3, #2
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9fe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800da00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da04:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800da06:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800da08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da0a:	441a      	add	r2, r3
 800da0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da0e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800da10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da14:	441a      	add	r2, r3
 800da16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da18:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800da1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da1e:	2b03      	cmp	r3, #3
 800da20:	d11e      	bne.n	800da60 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800da22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da24:	3334      	adds	r3, #52	@ 0x34
 800da26:	332a      	adds	r3, #42	@ 0x2a
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fd fe8d 	bl	800b748 <ld_word>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <find_volume+0x330>
 800da34:	230d      	movs	r3, #13
 800da36:	e0ab      	b.n	800db90 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800da38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3a:	891b      	ldrh	r3, [r3, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <find_volume+0x33c>
 800da40:	230d      	movs	r3, #13
 800da42:	e0a5      	b.n	800db90 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800da44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da46:	3334      	adds	r3, #52	@ 0x34
 800da48:	332c      	adds	r3, #44	@ 0x2c
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fd fe94 	bl	800b778 <ld_dword>
 800da50:	4602      	mov	r2, r0
 800da52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da54:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800da56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da58:	699b      	ldr	r3, [r3, #24]
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da5e:	e01f      	b.n	800daa0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800da60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da62:	891b      	ldrh	r3, [r3, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <find_volume+0x364>
 800da68:	230d      	movs	r3, #13
 800da6a:	e091      	b.n	800db90 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800da6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da72:	441a      	add	r2, r3
 800da74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da76:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800da78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d103      	bne.n	800da88 <find_volume+0x380>
 800da80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	e00a      	b.n	800da9e <find_volume+0x396>
 800da88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8a:	699a      	ldr	r2, [r3, #24]
 800da8c:	4613      	mov	r3, r2
 800da8e:	005b      	lsls	r3, r3, #1
 800da90:	4413      	add	r3, r2
 800da92:	085a      	lsrs	r2, r3, #1
 800da94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800da9e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800daa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa2:	69da      	ldr	r2, [r3, #28]
 800daa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daa6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800daaa:	0a5b      	lsrs	r3, r3, #9
 800daac:	429a      	cmp	r2, r3
 800daae:	d201      	bcs.n	800dab4 <find_volume+0x3ac>
 800dab0:	230d      	movs	r3, #13
 800dab2:	e06d      	b.n	800db90 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab6:	f04f 32ff 	mov.w	r2, #4294967295
 800daba:	615a      	str	r2, [r3, #20]
 800dabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabe:	695a      	ldr	r2, [r3, #20]
 800dac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac6:	2280      	movs	r2, #128	@ 0x80
 800dac8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800daca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d149      	bne.n	800db66 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad4:	3334      	adds	r3, #52	@ 0x34
 800dad6:	3330      	adds	r3, #48	@ 0x30
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fd fe35 	bl	800b748 <ld_word>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d140      	bne.n	800db66 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dae6:	3301      	adds	r3, #1
 800dae8:	4619      	mov	r1, r3
 800daea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800daec:	f7fe f8dc 	bl	800bca8 <move_window>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d137      	bne.n	800db66 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800daf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf8:	2200      	movs	r2, #0
 800dafa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafe:	3334      	adds	r3, #52	@ 0x34
 800db00:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800db04:	4618      	mov	r0, r3
 800db06:	f7fd fe1f 	bl	800b748 <ld_word>
 800db0a:	4603      	mov	r3, r0
 800db0c:	461a      	mov	r2, r3
 800db0e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800db12:	429a      	cmp	r2, r3
 800db14:	d127      	bne.n	800db66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800db16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db18:	3334      	adds	r3, #52	@ 0x34
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fd fe2c 	bl	800b778 <ld_dword>
 800db20:	4603      	mov	r3, r0
 800db22:	4a1d      	ldr	r2, [pc, #116]	@ (800db98 <find_volume+0x490>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d11e      	bne.n	800db66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800db28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db2a:	3334      	adds	r3, #52	@ 0x34
 800db2c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800db30:	4618      	mov	r0, r3
 800db32:	f7fd fe21 	bl	800b778 <ld_dword>
 800db36:	4603      	mov	r3, r0
 800db38:	4a18      	ldr	r2, [pc, #96]	@ (800db9c <find_volume+0x494>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d113      	bne.n	800db66 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800db3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db40:	3334      	adds	r3, #52	@ 0x34
 800db42:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd fe16 	bl	800b778 <ld_dword>
 800db4c:	4602      	mov	r2, r0
 800db4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db50:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800db52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db54:	3334      	adds	r3, #52	@ 0x34
 800db56:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fd fe0c 	bl	800b778 <ld_dword>
 800db60:	4602      	mov	r2, r0
 800db62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db64:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800db66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db68:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800db6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800db6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dba0 <find_volume+0x498>)
 800db70:	881b      	ldrh	r3, [r3, #0]
 800db72:	3301      	adds	r3, #1
 800db74:	b29a      	uxth	r2, r3
 800db76:	4b0a      	ldr	r3, [pc, #40]	@ (800dba0 <find_volume+0x498>)
 800db78:	801a      	strh	r2, [r3, #0]
 800db7a:	4b09      	ldr	r3, [pc, #36]	@ (800dba0 <find_volume+0x498>)
 800db7c:	881a      	ldrh	r2, [r3, #0]
 800db7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db80:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800db82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db84:	4a07      	ldr	r2, [pc, #28]	@ (800dba4 <find_volume+0x49c>)
 800db86:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800db88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db8a:	f7fe f825 	bl	800bbd8 <clear_lock>
#endif
	return FR_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	3758      	adds	r7, #88	@ 0x58
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	41615252 	.word	0x41615252
 800db9c:	61417272 	.word	0x61417272
 800dba0:	20001b6c 	.word	0x20001b6c
 800dba4:	20001b90 	.word	0x20001b90

0800dba8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dbb2:	2309      	movs	r3, #9
 800dbb4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01c      	beq.n	800dbf6 <validate+0x4e>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d018      	beq.n	800dbf6 <validate+0x4e>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d013      	beq.n	800dbf6 <validate+0x4e>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	889a      	ldrh	r2, [r3, #4]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	88db      	ldrh	r3, [r3, #6]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d10c      	bne.n	800dbf6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd fd12 	bl	800b60c <disk_status>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d101      	bne.n	800dbf6 <validate+0x4e>
			res = FR_OK;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <validate+0x5a>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	e000      	b.n	800dc04 <validate+0x5c>
 800dc02:	2300      	movs	r3, #0
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	6013      	str	r3, [r2, #0]
	return res;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b088      	sub	sp, #32
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dc26:	f107 0310 	add.w	r3, r7, #16
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fcd1 	bl	800d5d2 <get_ldnumber>
 800dc30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	da01      	bge.n	800dc3c <f_mount+0x28>
 800dc38:	230b      	movs	r3, #11
 800dc3a:	e02b      	b.n	800dc94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dc3c:	4a17      	ldr	r2, [pc, #92]	@ (800dc9c <f_mount+0x88>)
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d005      	beq.n	800dc58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dc4c:	69b8      	ldr	r0, [r7, #24]
 800dc4e:	f7fd ffc3 	bl	800bbd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	2200      	movs	r2, #0
 800dc56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	490d      	ldr	r1, [pc, #52]	@ (800dc9c <f_mount+0x88>)
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <f_mount+0x66>
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d001      	beq.n	800dc7e <f_mount+0x6a>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e00a      	b.n	800dc94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dc7e:	f107 010c 	add.w	r1, r7, #12
 800dc82:	f107 0308 	add.w	r3, r7, #8
 800dc86:	2200      	movs	r2, #0
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff fd3d 	bl	800d708 <find_volume>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3720      	adds	r7, #32
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	20001b68 	.word	0x20001b68

0800dca0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b09a      	sub	sp, #104	@ 0x68
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d101      	bne.n	800dcb8 <f_open+0x18>
 800dcb4:	2309      	movs	r3, #9
 800dcb6:	e1a9      	b.n	800e00c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dcb8:	79fb      	ldrb	r3, [r7, #7]
 800dcba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dcbe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dcc0:	79fa      	ldrb	r2, [r7, #7]
 800dcc2:	f107 0114 	add.w	r1, r7, #20
 800dcc6:	f107 0308 	add.w	r3, r7, #8
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff fd1c 	bl	800d708 <find_volume>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800dcd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f040 818d 	bne.w	800dffa <f_open+0x35a>
		dj.obj.fs = fs;
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	f107 0318 	add.w	r3, r7, #24
 800dcea:	4611      	mov	r1, r2
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7ff fbff 	bl	800d4f0 <follow_path>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dcf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d118      	bne.n	800dd32 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dd00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dd04:	b25b      	sxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	da03      	bge.n	800dd12 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dd0a:	2306      	movs	r3, #6
 800dd0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dd10:	e00f      	b.n	800dd32 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd12:	79fb      	ldrb	r3, [r7, #7]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	bf8c      	ite	hi
 800dd18:	2301      	movhi	r3, #1
 800dd1a:	2300      	movls	r3, #0
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	461a      	mov	r2, r3
 800dd20:	f107 0318 	add.w	r3, r7, #24
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fd fe0e 	bl	800b948 <chk_lock>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dd32:	79fb      	ldrb	r3, [r7, #7]
 800dd34:	f003 031c 	and.w	r3, r3, #28
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d07f      	beq.n	800de3c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800dd3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d017      	beq.n	800dd74 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dd44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd48:	2b04      	cmp	r3, #4
 800dd4a:	d10e      	bne.n	800dd6a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dd4c:	f7fd fe58 	bl	800ba00 <enq_lock>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d006      	beq.n	800dd64 <f_open+0xc4>
 800dd56:	f107 0318 	add.w	r3, r7, #24
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff f83a 	bl	800cdd4 <dir_register>
 800dd60:	4603      	mov	r3, r0
 800dd62:	e000      	b.n	800dd66 <f_open+0xc6>
 800dd64:	2312      	movs	r3, #18
 800dd66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	f043 0308 	orr.w	r3, r3, #8
 800dd70:	71fb      	strb	r3, [r7, #7]
 800dd72:	e010      	b.n	800dd96 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dd74:	7fbb      	ldrb	r3, [r7, #30]
 800dd76:	f003 0311 	and.w	r3, r3, #17
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <f_open+0xe6>
					res = FR_DENIED;
 800dd7e:	2307      	movs	r3, #7
 800dd80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dd84:	e007      	b.n	800dd96 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	f003 0304 	and.w	r3, r3, #4
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <f_open+0xf6>
 800dd90:	2308      	movs	r3, #8
 800dd92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dd96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d168      	bne.n	800de70 <f_open+0x1d0>
 800dd9e:	79fb      	ldrb	r3, [r7, #7]
 800dda0:	f003 0308 	and.w	r3, r3, #8
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d063      	beq.n	800de70 <f_open+0x1d0>
				dw = GET_FATTIME();
 800dda8:	f7fa fc42 	bl	8008630 <get_fattime>
 800ddac:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ddae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb0:	330e      	adds	r3, #14
 800ddb2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fd fd1d 	bl	800b7f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ddba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddbc:	3316      	adds	r3, #22
 800ddbe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fd fd17 	bl	800b7f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc8:	330b      	adds	r3, #11
 800ddca:	2220      	movs	r2, #32
 800ddcc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fc6b 	bl	800c6b0 <ld_clust>
 800ddda:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dde0:	2200      	movs	r2, #0
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fe fc83 	bl	800c6ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddea:	331c      	adds	r3, #28
 800ddec:	2100      	movs	r1, #0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fd fd00 	bl	800b7f4 <st_dword>
					fs->wflag = 1;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ddfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d037      	beq.n	800de70 <f_open+0x1d0>
						dw = fs->winsect;
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de04:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800de06:	f107 0318 	add.w	r3, r7, #24
 800de0a:	2200      	movs	r2, #0
 800de0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe f996 	bl	800c140 <remove_chain>
 800de14:	4603      	mov	r3, r0
 800de16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800de1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d126      	bne.n	800de70 <f_open+0x1d0>
							res = move_window(fs, dw);
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800de26:	4618      	mov	r0, r3
 800de28:	f7fd ff3e 	bl	800bca8 <move_window>
 800de2c:	4603      	mov	r3, r0
 800de2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800de36:	3a01      	subs	r2, #1
 800de38:	611a      	str	r2, [r3, #16]
 800de3a:	e019      	b.n	800de70 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800de3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de40:	2b00      	cmp	r3, #0
 800de42:	d115      	bne.n	800de70 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800de44:	7fbb      	ldrb	r3, [r7, #30]
 800de46:	f003 0310 	and.w	r3, r3, #16
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <f_open+0x1b6>
					res = FR_NO_FILE;
 800de4e:	2304      	movs	r3, #4
 800de50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800de54:	e00c      	b.n	800de70 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800de56:	79fb      	ldrb	r3, [r7, #7]
 800de58:	f003 0302 	and.w	r3, r3, #2
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d007      	beq.n	800de70 <f_open+0x1d0>
 800de60:	7fbb      	ldrb	r3, [r7, #30]
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b00      	cmp	r3, #0
 800de68:	d002      	beq.n	800de70 <f_open+0x1d0>
						res = FR_DENIED;
 800de6a:	2307      	movs	r3, #7
 800de6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800de70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de74:	2b00      	cmp	r3, #0
 800de76:	d126      	bne.n	800dec6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de78:	79fb      	ldrb	r3, [r7, #7]
 800de7a:	f003 0308 	and.w	r3, r3, #8
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d003      	beq.n	800de8a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de88:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800de92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de98:	79fb      	ldrb	r3, [r7, #7]
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	bf8c      	ite	hi
 800de9e:	2301      	movhi	r3, #1
 800dea0:	2300      	movls	r3, #0
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	461a      	mov	r2, r3
 800dea6:	f107 0318 	add.w	r3, r7, #24
 800deaa:	4611      	mov	r1, r2
 800deac:	4618      	mov	r0, r3
 800deae:	f7fd fdc9 	bl	800ba44 <inc_lock>
 800deb2:	4602      	mov	r2, r0
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d102      	bne.n	800dec6 <f_open+0x226>
 800dec0:	2302      	movs	r3, #2
 800dec2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dec6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800deca:	2b00      	cmp	r3, #0
 800decc:	f040 8095 	bne.w	800dffa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe fbea 	bl	800c6b0 <ld_clust>
 800dedc:	4602      	mov	r2, r0
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee4:	331c      	adds	r3, #28
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fd fc46 	bl	800b778 <ld_dword>
 800deec:	4602      	mov	r2, r0
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800def8:	697a      	ldr	r2, [r7, #20]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	88da      	ldrh	r2, [r3, #6]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	79fa      	ldrb	r2, [r7, #7]
 800df0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2200      	movs	r2, #0
 800df10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3330      	adds	r3, #48	@ 0x30
 800df22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df26:	2100      	movs	r1, #0
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fd fcb0 	bl	800b88e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800df2e:	79fb      	ldrb	r3, [r7, #7]
 800df30:	f003 0320 	and.w	r3, r3, #32
 800df34:	2b00      	cmp	r3, #0
 800df36:	d060      	beq.n	800dffa <f_open+0x35a>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d05c      	beq.n	800dffa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	68da      	ldr	r2, [r3, #12]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	895b      	ldrh	r3, [r3, #10]
 800df4c:	025b      	lsls	r3, r3, #9
 800df4e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df5c:	e016      	b.n	800df8c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800df62:	4618      	mov	r0, r3
 800df64:	f7fd ff5b 	bl	800be1e <get_fat>
 800df68:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800df6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d802      	bhi.n	800df76 <f_open+0x2d6>
 800df70:	2302      	movs	r3, #2
 800df72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800df76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7c:	d102      	bne.n	800df84 <f_open+0x2e4>
 800df7e:	2301      	movs	r3, #1
 800df80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df88:	1ad3      	subs	r3, r2, r3
 800df8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800df90:	2b00      	cmp	r3, #0
 800df92:	d103      	bne.n	800df9c <f_open+0x2fc>
 800df94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df98:	429a      	cmp	r2, r3
 800df9a:	d8e0      	bhi.n	800df5e <f_open+0x2be>
				}
				fp->clust = clst;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dfa0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dfa2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d127      	bne.n	800dffa <f_open+0x35a>
 800dfaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d022      	beq.n	800dffa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fd ff11 	bl	800bde0 <clust2sect>
 800dfbe:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800dfc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d103      	bne.n	800dfce <f_open+0x32e>
						res = FR_INT_ERR;
 800dfc6:	2302      	movs	r3, #2
 800dfc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dfcc:	e015      	b.n	800dffa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dfce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfd0:	0a5a      	lsrs	r2, r3, #9
 800dfd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfd4:	441a      	add	r2, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	7858      	ldrb	r0, [r3, #1]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6a1a      	ldr	r2, [r3, #32]
 800dfe8:	2301      	movs	r3, #1
 800dfea:	f7fd fb4f 	bl	800b68c <disk_read>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <f_open+0x35a>
 800dff4:	2301      	movs	r3, #1
 800dff6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dffa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d002      	beq.n	800e008 <f_open+0x368>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e008:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3768      	adds	r7, #104	@ 0x68
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b08e      	sub	sp, #56	@ 0x38
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	2200      	movs	r2, #0
 800e02a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f107 0214 	add.w	r2, r7, #20
 800e032:	4611      	mov	r1, r2
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff fdb7 	bl	800dba8 <validate>
 800e03a:	4603      	mov	r3, r0
 800e03c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e040:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e044:	2b00      	cmp	r3, #0
 800e046:	d107      	bne.n	800e058 <f_read+0x44>
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	7d5b      	ldrb	r3, [r3, #21]
 800e04c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e050:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <f_read+0x4a>
 800e058:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e05c:	e115      	b.n	800e28a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	7d1b      	ldrb	r3, [r3, #20]
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <f_read+0x5a>
 800e06a:	2307      	movs	r3, #7
 800e06c:	e10d      	b.n	800e28a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	68da      	ldr	r2, [r3, #12]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	429a      	cmp	r2, r3
 800e080:	f240 80fe 	bls.w	800e280 <f_read+0x26c>
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e088:	e0fa      	b.n	800e280 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	699b      	ldr	r3, [r3, #24]
 800e08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e092:	2b00      	cmp	r3, #0
 800e094:	f040 80c6 	bne.w	800e224 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	0a5b      	lsrs	r3, r3, #9
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	8952      	ldrh	r2, [r2, #10]
 800e0a2:	3a01      	subs	r2, #1
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d12f      	bne.n	800e10e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d103      	bne.n	800e0be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0bc:	e013      	b.n	800e0e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d007      	beq.n	800e0d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	699b      	ldr	r3, [r3, #24]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7fe f934 	bl	800c33a <clmt_clust>
 800e0d2:	6338      	str	r0, [r7, #48]	@ 0x30
 800e0d4:	e007      	b.n	800e0e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	69db      	ldr	r3, [r3, #28]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	4610      	mov	r0, r2
 800e0e0:	f7fd fe9d 	bl	800be1e <get_fat>
 800e0e4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d804      	bhi.n	800e0f6 <f_read+0xe2>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	755a      	strb	r2, [r3, #21]
 800e0f2:	2302      	movs	r3, #2
 800e0f4:	e0c9      	b.n	800e28a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fc:	d104      	bne.n	800e108 <f_read+0xf4>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	755a      	strb	r2, [r3, #21]
 800e104:	2301      	movs	r3, #1
 800e106:	e0c0      	b.n	800e28a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e10c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	69db      	ldr	r3, [r3, #28]
 800e114:	4619      	mov	r1, r3
 800e116:	4610      	mov	r0, r2
 800e118:	f7fd fe62 	bl	800bde0 <clust2sect>
 800e11c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d104      	bne.n	800e12e <f_read+0x11a>
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2202      	movs	r2, #2
 800e128:	755a      	strb	r2, [r3, #21]
 800e12a:	2302      	movs	r3, #2
 800e12c:	e0ad      	b.n	800e28a <f_read+0x276>
			sect += csect;
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	4413      	add	r3, r2
 800e134:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	0a5b      	lsrs	r3, r3, #9
 800e13a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d039      	beq.n	800e1b6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e146:	4413      	add	r3, r2
 800e148:	697a      	ldr	r2, [r7, #20]
 800e14a:	8952      	ldrh	r2, [r2, #10]
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d905      	bls.n	800e15c <f_read+0x148>
					cc = fs->csize - csect;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	895b      	ldrh	r3, [r3, #10]
 800e154:	461a      	mov	r2, r3
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	7858      	ldrb	r0, [r3, #1]
 800e160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e162:	69ba      	ldr	r2, [r7, #24]
 800e164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e166:	f7fd fa91 	bl	800b68c <disk_read>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d004      	beq.n	800e17a <f_read+0x166>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2201      	movs	r2, #1
 800e174:	755a      	strb	r2, [r3, #21]
 800e176:	2301      	movs	r3, #1
 800e178:	e087      	b.n	800e28a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	7d1b      	ldrb	r3, [r3, #20]
 800e17e:	b25b      	sxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	da14      	bge.n	800e1ae <f_read+0x19a>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6a1a      	ldr	r2, [r3, #32]
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e18e:	429a      	cmp	r2, r3
 800e190:	d90d      	bls.n	800e1ae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6a1a      	ldr	r2, [r3, #32]
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	025b      	lsls	r3, r3, #9
 800e19c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e19e:	18d0      	adds	r0, r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	3330      	adds	r3, #48	@ 0x30
 800e1a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	f7fd fb4f 	bl	800b84c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b0:	025b      	lsls	r3, r3, #9
 800e1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e1b4:	e050      	b.n	800e258 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6a1b      	ldr	r3, [r3, #32]
 800e1ba:	69ba      	ldr	r2, [r7, #24]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d02e      	beq.n	800e21e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	7d1b      	ldrb	r3, [r3, #20]
 800e1c4:	b25b      	sxtb	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	da18      	bge.n	800e1fc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	7858      	ldrb	r0, [r3, #1]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6a1a      	ldr	r2, [r3, #32]
 800e1d8:	2301      	movs	r3, #1
 800e1da:	f7fd fa77 	bl	800b6cc <disk_write>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d004      	beq.n	800e1ee <f_read+0x1da>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	755a      	strb	r2, [r3, #21]
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e04d      	b.n	800e28a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	7d1b      	ldrb	r3, [r3, #20]
 800e1f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	7858      	ldrb	r0, [r3, #1]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e206:	2301      	movs	r3, #1
 800e208:	69ba      	ldr	r2, [r7, #24]
 800e20a:	f7fd fa3f 	bl	800b68c <disk_read>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <f_read+0x20a>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2201      	movs	r2, #1
 800e218:	755a      	strb	r2, [r3, #21]
 800e21a:	2301      	movs	r3, #1
 800e21c:	e035      	b.n	800e28a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	69ba      	ldr	r2, [r7, #24]
 800e222:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e230:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	429a      	cmp	r2, r3
 800e238:	d901      	bls.n	800e23e <f_read+0x22a>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e24c:	4413      	add	r3, r2
 800e24e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e250:	4619      	mov	r1, r3
 800e252:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e254:	f7fd fafa 	bl	800b84c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25c:	4413      	add	r3, r2
 800e25e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	699a      	ldr	r2, [r3, #24]
 800e264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e266:	441a      	add	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	619a      	str	r2, [r3, #24]
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e272:	441a      	add	r2, r3
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	f47f af01 	bne.w	800e08a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3738      	adds	r7, #56	@ 0x38
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b086      	sub	sp, #24
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f107 0208 	add.w	r2, r7, #8
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7ff fc80 	bl	800dba8 <validate>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2ac:	7dfb      	ldrb	r3, [r7, #23]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d168      	bne.n	800e384 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	7d1b      	ldrb	r3, [r3, #20]
 800e2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d062      	beq.n	800e384 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	7d1b      	ldrb	r3, [r3, #20]
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da15      	bge.n	800e2f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	7858      	ldrb	r0, [r3, #1]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a1a      	ldr	r2, [r3, #32]
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	f7fd f9f8 	bl	800b6cc <disk_write>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d001      	beq.n	800e2e6 <f_sync+0x54>
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e04f      	b.n	800e386 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e2f4:	f7fa f99c 	bl	8008630 <get_fattime>
 800e2f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e300:	4619      	mov	r1, r3
 800e302:	4610      	mov	r0, r2
 800e304:	f7fd fcd0 	bl	800bca8 <move_window>
 800e308:	4603      	mov	r3, r0
 800e30a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d138      	bne.n	800e384 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e316:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	330b      	adds	r3, #11
 800e31c:	781a      	ldrb	r2, [r3, #0]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	330b      	adds	r3, #11
 800e322:	f042 0220 	orr.w	r2, r2, #32
 800e326:	b2d2      	uxtb	r2, r2
 800e328:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6818      	ldr	r0, [r3, #0]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	461a      	mov	r2, r3
 800e334:	68f9      	ldr	r1, [r7, #12]
 800e336:	f7fe f9da 	bl	800c6ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f103 021c 	add.w	r2, r3, #28
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	4619      	mov	r1, r3
 800e346:	4610      	mov	r0, r2
 800e348:	f7fd fa54 	bl	800b7f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	3316      	adds	r3, #22
 800e350:	6939      	ldr	r1, [r7, #16]
 800e352:	4618      	mov	r0, r3
 800e354:	f7fd fa4e 	bl	800b7f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3312      	adds	r3, #18
 800e35c:	2100      	movs	r1, #0
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fd fa2d 	bl	800b7be <st_word>
					fs->wflag = 1;
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	2201      	movs	r2, #1
 800e368:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fd fcc9 	bl	800bd04 <sync_fs>
 800e372:	4603      	mov	r3, r0
 800e374:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	7d1b      	ldrb	r3, [r3, #20]
 800e37a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e384:	7dfb      	ldrb	r3, [r7, #23]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b084      	sub	sp, #16
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff ff7b 	bl	800e292 <f_sync>
 800e39c:	4603      	mov	r3, r0
 800e39e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d118      	bne.n	800e3d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f107 0208 	add.w	r2, r7, #8
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff fbfa 	bl	800dba8 <validate>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e3b8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10c      	bne.n	800e3d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fd fbcc 	bl	800bb60 <dec_lock>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d102      	bne.n	800e3d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b090      	sub	sp, #64	@ 0x40
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f107 0208 	add.w	r2, r7, #8
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7ff fbd7 	bl	800dba8 <validate>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e400:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e404:	2b00      	cmp	r3, #0
 800e406:	d103      	bne.n	800e410 <f_lseek+0x2e>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	7d5b      	ldrb	r3, [r3, #21]
 800e40c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e410:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <f_lseek+0x3c>
 800e418:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e41c:	e1e6      	b.n	800e7ec <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e422:	2b00      	cmp	r3, #0
 800e424:	f000 80d1 	beq.w	800e5ca <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42e:	d15a      	bne.n	800e4e6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e434:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e438:	1d1a      	adds	r2, r3, #4
 800e43a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	2302      	movs	r3, #2
 800e442:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d03a      	beq.n	800e4c6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e452:	613b      	str	r3, [r7, #16]
 800e454:	2300      	movs	r3, #0
 800e456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e45a:	3302      	adds	r3, #2
 800e45c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e464:	3301      	adds	r3, #1
 800e466:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fd fcd6 	bl	800be1e <get_fat>
 800e472:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e476:	2b01      	cmp	r3, #1
 800e478:	d804      	bhi.n	800e484 <f_lseek+0xa2>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2202      	movs	r2, #2
 800e47e:	755a      	strb	r2, [r3, #21]
 800e480:	2302      	movs	r3, #2
 800e482:	e1b3      	b.n	800e7ec <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e48a:	d104      	bne.n	800e496 <f_lseek+0xb4>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	755a      	strb	r2, [r3, #21]
 800e492:	2301      	movs	r3, #1
 800e494:	e1aa      	b.n	800e7ec <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	3301      	adds	r3, #1
 800e49a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d0de      	beq.n	800e45e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e4a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d809      	bhi.n	800e4bc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4aa:	1d1a      	adds	r2, r3, #4
 800e4ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800e4ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b4:	1d1a      	adds	r2, r3, #4
 800e4b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d3c4      	bcc.n	800e450 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4cc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e4ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d803      	bhi.n	800e4de <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d8:	2200      	movs	r2, #0
 800e4da:	601a      	str	r2, [r3, #0]
 800e4dc:	e184      	b.n	800e7e8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e4de:	2311      	movs	r3, #17
 800e4e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e4e4:	e180      	b.n	800e7e8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d902      	bls.n	800e4f6 <f_lseek+0x114>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	683a      	ldr	r2, [r7, #0]
 800e4fa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f000 8172 	beq.w	800e7e8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	3b01      	subs	r3, #1
 800e508:	4619      	mov	r1, r3
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7fd ff15 	bl	800c33a <clmt_clust>
 800e510:	4602      	mov	r2, r0
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e516:	68ba      	ldr	r2, [r7, #8]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	69db      	ldr	r3, [r3, #28]
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f7fd fc5e 	bl	800bde0 <clust2sect>
 800e524:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d104      	bne.n	800e536 <f_lseek+0x154>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2202      	movs	r2, #2
 800e530:	755a      	strb	r2, [r3, #21]
 800e532:	2302      	movs	r3, #2
 800e534:	e15a      	b.n	800e7ec <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	3b01      	subs	r3, #1
 800e53a:	0a5b      	lsrs	r3, r3, #9
 800e53c:	68ba      	ldr	r2, [r7, #8]
 800e53e:	8952      	ldrh	r2, [r2, #10]
 800e540:	3a01      	subs	r2, #1
 800e542:	4013      	ands	r3, r2
 800e544:	69ba      	ldr	r2, [r7, #24]
 800e546:	4413      	add	r3, r2
 800e548:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e552:	2b00      	cmp	r3, #0
 800e554:	f000 8148 	beq.w	800e7e8 <f_lseek+0x406>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6a1b      	ldr	r3, [r3, #32]
 800e55c:	69ba      	ldr	r2, [r7, #24]
 800e55e:	429a      	cmp	r2, r3
 800e560:	f000 8142 	beq.w	800e7e8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	7d1b      	ldrb	r3, [r3, #20]
 800e568:	b25b      	sxtb	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	da18      	bge.n	800e5a0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	7858      	ldrb	r0, [r3, #1]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a1a      	ldr	r2, [r3, #32]
 800e57c:	2301      	movs	r3, #1
 800e57e:	f7fd f8a5 	bl	800b6cc <disk_write>
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d004      	beq.n	800e592 <f_lseek+0x1b0>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	755a      	strb	r2, [r3, #21]
 800e58e:	2301      	movs	r3, #1
 800e590:	e12c      	b.n	800e7ec <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	7d1b      	ldrb	r3, [r3, #20]
 800e596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	7858      	ldrb	r0, [r3, #1]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	69ba      	ldr	r2, [r7, #24]
 800e5ae:	f7fd f86d 	bl	800b68c <disk_read>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <f_lseek+0x1e0>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	755a      	strb	r2, [r3, #21]
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e114      	b.n	800e7ec <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	69ba      	ldr	r2, [r7, #24]
 800e5c6:	621a      	str	r2, [r3, #32]
 800e5c8:	e10e      	b.n	800e7e8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d908      	bls.n	800e5e6 <f_lseek+0x204>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	7d1b      	ldrb	r3, [r3, #20]
 800e5d8:	f003 0302 	and.w	r3, r3, #2
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5f4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 80a7 	beq.w	800e74c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	895b      	ldrh	r3, [r3, #10]
 800e602:	025b      	lsls	r3, r3, #9
 800e604:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d01b      	beq.n	800e644 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	1e5a      	subs	r2, r3, #1
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	fbb2 f2f3 	udiv	r2, r2, r3
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	1e59      	subs	r1, r3, #1
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e620:	429a      	cmp	r2, r3
 800e622:	d30f      	bcc.n	800e644 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e624:	6a3b      	ldr	r3, [r7, #32]
 800e626:	1e5a      	subs	r2, r3, #1
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	425b      	negs	r3, r3
 800e62c:	401a      	ands	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	699b      	ldr	r3, [r3, #24]
 800e636:	683a      	ldr	r2, [r7, #0]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e642:	e022      	b.n	800e68a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d119      	bne.n	800e684 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2100      	movs	r1, #0
 800e654:	4618      	mov	r0, r3
 800e656:	f7fd fdd8 	bl	800c20a <create_chain>
 800e65a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d104      	bne.n	800e66c <f_lseek+0x28a>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2202      	movs	r2, #2
 800e666:	755a      	strb	r2, [r3, #21]
 800e668:	2302      	movs	r3, #2
 800e66a:	e0bf      	b.n	800e7ec <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e672:	d104      	bne.n	800e67e <f_lseek+0x29c>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	755a      	strb	r2, [r3, #21]
 800e67a:	2301      	movs	r3, #1
 800e67c:	e0b6      	b.n	800e7ec <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e682:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e688:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d05d      	beq.n	800e74c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e690:	e03a      	b.n	800e708 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e692:	683a      	ldr	r2, [r7, #0]
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	1ad3      	subs	r3, r2, r3
 800e698:	603b      	str	r3, [r7, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	699a      	ldr	r2, [r3, #24]
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	441a      	add	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	7d1b      	ldrb	r3, [r3, #20]
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00b      	beq.n	800e6ca <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fd fda7 	bl	800c20a <create_chain>
 800e6bc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d108      	bne.n	800e6d6 <f_lseek+0x2f4>
							ofs = 0; break;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	603b      	str	r3, [r7, #0]
 800e6c8:	e022      	b.n	800e710 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fd fba5 	bl	800be1e <get_fat>
 800e6d4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6dc:	d104      	bne.n	800e6e8 <f_lseek+0x306>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	755a      	strb	r2, [r3, #21]
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e081      	b.n	800e7ec <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d904      	bls.n	800e6f8 <f_lseek+0x316>
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	699b      	ldr	r3, [r3, #24]
 800e6f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d304      	bcc.n	800e702 <f_lseek+0x320>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2202      	movs	r2, #2
 800e6fc:	755a      	strb	r2, [r3, #21]
 800e6fe:	2302      	movs	r3, #2
 800e700:	e074      	b.n	800e7ec <f_lseek+0x40a>
					fp->clust = clst;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e706:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d8c0      	bhi.n	800e692 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	699a      	ldr	r2, [r3, #24]
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	441a      	add	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e722:	2b00      	cmp	r3, #0
 800e724:	d012      	beq.n	800e74c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fd fb58 	bl	800bde0 <clust2sect>
 800e730:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e734:	2b00      	cmp	r3, #0
 800e736:	d104      	bne.n	800e742 <f_lseek+0x360>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2202      	movs	r2, #2
 800e73c:	755a      	strb	r2, [r3, #21]
 800e73e:	2302      	movs	r3, #2
 800e740:	e054      	b.n	800e7ec <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	0a5b      	lsrs	r3, r3, #9
 800e746:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e748:	4413      	add	r3, r2
 800e74a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	699a      	ldr	r2, [r3, #24]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	429a      	cmp	r2, r3
 800e756:	d90a      	bls.n	800e76e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	699a      	ldr	r2, [r3, #24]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e768:	b2da      	uxtb	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	699b      	ldr	r3, [r3, #24]
 800e772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e776:	2b00      	cmp	r3, #0
 800e778:	d036      	beq.n	800e7e8 <f_lseek+0x406>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e780:	429a      	cmp	r2, r3
 800e782:	d031      	beq.n	800e7e8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	b25b      	sxtb	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	da18      	bge.n	800e7c0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	7858      	ldrb	r0, [r3, #1]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a1a      	ldr	r2, [r3, #32]
 800e79c:	2301      	movs	r3, #1
 800e79e:	f7fc ff95 	bl	800b6cc <disk_write>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d004      	beq.n	800e7b2 <f_lseek+0x3d0>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	755a      	strb	r2, [r3, #21]
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e01c      	b.n	800e7ec <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7d1b      	ldrb	r3, [r3, #20]
 800e7b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	7858      	ldrb	r0, [r3, #1]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7ce:	f7fc ff5d 	bl	800b68c <disk_read>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d004      	beq.n	800e7e2 <f_lseek+0x400>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	755a      	strb	r2, [r3, #21]
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e004      	b.n	800e7ec <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7e6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e7e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3740      	adds	r7, #64	@ 0x40
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d101      	bne.n	800e808 <f_opendir+0x14>
 800e804:	2309      	movs	r3, #9
 800e806:	e064      	b.n	800e8d2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e80c:	f107 010c 	add.w	r1, r7, #12
 800e810:	463b      	mov	r3, r7
 800e812:	2200      	movs	r2, #0
 800e814:	4618      	mov	r0, r3
 800e816:	f7fe ff77 	bl	800d708 <find_volume>
 800e81a:	4603      	mov	r3, r0
 800e81c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e81e:	7dfb      	ldrb	r3, [r7, #23]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d14f      	bne.n	800e8c4 <f_opendir+0xd0>
		obj->fs = fs;
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	4619      	mov	r1, r3
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7fe fe5e 	bl	800d4f0 <follow_path>
 800e834:	4603      	mov	r3, r0
 800e836:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e838:	7dfb      	ldrb	r3, [r7, #23]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d13d      	bne.n	800e8ba <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e844:	b25b      	sxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	db12      	blt.n	800e870 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	799b      	ldrb	r3, [r3, #6]
 800e84e:	f003 0310 	and.w	r3, r3, #16
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00a      	beq.n	800e86c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a1b      	ldr	r3, [r3, #32]
 800e85c:	4619      	mov	r1, r3
 800e85e:	4610      	mov	r0, r2
 800e860:	f7fd ff26 	bl	800c6b0 <ld_clust>
 800e864:	4602      	mov	r2, r0
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	609a      	str	r2, [r3, #8]
 800e86a:	e001      	b.n	800e870 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e86c:	2305      	movs	r3, #5
 800e86e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e870:	7dfb      	ldrb	r3, [r7, #23]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d121      	bne.n	800e8ba <f_opendir+0xc6>
				obj->id = fs->id;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	88da      	ldrh	r2, [r3, #6]
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e87e:	2100      	movs	r1, #0
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7fd fd8e 	bl	800c3a2 <dir_sdi>
 800e886:	4603      	mov	r3, r0
 800e888:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e88a:	7dfb      	ldrb	r3, [r7, #23]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d114      	bne.n	800e8ba <f_opendir+0xc6>
					if (obj->sclust) {
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00d      	beq.n	800e8b4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e898:	2100      	movs	r1, #0
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7fd f8d2 	bl	800ba44 <inc_lock>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d105      	bne.n	800e8ba <f_opendir+0xc6>
 800e8ae:	2312      	movs	r3, #18
 800e8b0:	75fb      	strb	r3, [r7, #23]
 800e8b2:	e002      	b.n	800e8ba <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e8ba:	7dfb      	ldrb	r3, [r7, #23]
 800e8bc:	2b04      	cmp	r3, #4
 800e8be:	d101      	bne.n	800e8c4 <f_opendir+0xd0>
 800e8c0:	2305      	movs	r3, #5
 800e8c2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e8c4:	7dfb      	ldrb	r3, [r7, #23]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d002      	beq.n	800e8d0 <f_opendir+0xdc>
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3718      	adds	r7, #24
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b084      	sub	sp, #16
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f107 0208 	add.w	r2, r7, #8
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff f95c 	bl	800dba8 <validate>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d110      	bne.n	800e91c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d006      	beq.n	800e910 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	4618      	mov	r0, r3
 800e908:	f7fd f92a 	bl	800bb60 <dec_lock>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d102      	bne.n	800e91c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b084      	sub	sp, #16
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f107 0208 	add.w	r2, r7, #8
 800e936:	4611      	mov	r1, r2
 800e938:	4618      	mov	r0, r3
 800e93a:	f7ff f935 	bl	800dba8 <validate>
 800e93e:	4603      	mov	r3, r0
 800e940:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e942:	7bfb      	ldrb	r3, [r7, #15]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d126      	bne.n	800e996 <f_readdir+0x70>
		if (!fno) {
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e94e:	2100      	movs	r1, #0
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7fd fd26 	bl	800c3a2 <dir_sdi>
 800e956:	4603      	mov	r3, r0
 800e958:	73fb      	strb	r3, [r7, #15]
 800e95a:	e01c      	b.n	800e996 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e95c:	2100      	movs	r1, #0
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7fe f8d1 	bl	800cb06 <dir_read>
 800e964:	4603      	mov	r3, r0
 800e966:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	2b04      	cmp	r3, #4
 800e96c:	d101      	bne.n	800e972 <f_readdir+0x4c>
 800e96e:	2300      	movs	r3, #0
 800e970:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e972:	7bfb      	ldrb	r3, [r7, #15]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10e      	bne.n	800e996 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e978:	6839      	ldr	r1, [r7, #0]
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f7fe fb22 	bl	800cfc4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e980:	2100      	movs	r1, #0
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f7fd fd88 	bl	800c498 <dir_next>
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b04      	cmp	r3, #4
 800e990:	d101      	bne.n	800e996 <f_readdir+0x70>
 800e992:	2300      	movs	r3, #0
 800e994:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e996:	7bfb      	ldrb	r3, [r7, #15]
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b087      	sub	sp, #28
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e9b6:	4b1f      	ldr	r3, [pc, #124]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9b8:	7a5b      	ldrb	r3, [r3, #9]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d131      	bne.n	800ea24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e9c0:	4b1c      	ldr	r3, [pc, #112]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9c2:	7a5b      	ldrb	r3, [r3, #9]
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	4b1a      	ldr	r3, [pc, #104]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e9ce:	4b19      	ldr	r3, [pc, #100]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9d0:	7a5b      	ldrb	r3, [r3, #9]
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	4a17      	ldr	r2, [pc, #92]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	4413      	add	r3, r2
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e9de:	4b15      	ldr	r3, [pc, #84]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9e0:	7a5b      	ldrb	r3, [r3, #9]
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4b13      	ldr	r3, [pc, #76]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9e8:	4413      	add	r3, r2
 800e9ea:	79fa      	ldrb	r2, [r7, #7]
 800e9ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e9ee:	4b11      	ldr	r3, [pc, #68]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9f0:	7a5b      	ldrb	r3, [r3, #9]
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	b2d1      	uxtb	r1, r2
 800e9f8:	4a0e      	ldr	r2, [pc, #56]	@ (800ea34 <FATFS_LinkDriverEx+0x94>)
 800e9fa:	7251      	strb	r1, [r2, #9]
 800e9fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e9fe:	7dbb      	ldrb	r3, [r7, #22]
 800ea00:	3330      	adds	r3, #48	@ 0x30
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	223a      	movs	r2, #58	@ 0x3a
 800ea0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	3302      	adds	r3, #2
 800ea14:	222f      	movs	r2, #47	@ 0x2f
 800ea16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	3303      	adds	r3, #3
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea20:	2300      	movs	r3, #0
 800ea22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	371c      	adds	r7, #28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	20001d90 	.word	0x20001d90

0800ea38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ea42:	2200      	movs	r2, #0
 800ea44:	6839      	ldr	r1, [r7, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7ff ffaa 	bl	800e9a0 <FATFS_LinkDriverEx>
 800ea4c:	4603      	mov	r3, r0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	4603      	mov	r3, r0
 800ea60:	6039      	str	r1, [r7, #0]
 800ea62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ea64:	88fb      	ldrh	r3, [r7, #6]
 800ea66:	2b7f      	cmp	r3, #127	@ 0x7f
 800ea68:	d802      	bhi.n	800ea70 <ff_convert+0x18>
		c = chr;
 800ea6a:	88fb      	ldrh	r3, [r7, #6]
 800ea6c:	81fb      	strh	r3, [r7, #14]
 800ea6e:	e025      	b.n	800eabc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00b      	beq.n	800ea8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ea76:	88fb      	ldrh	r3, [r7, #6]
 800ea78:	2bff      	cmp	r3, #255	@ 0xff
 800ea7a:	d805      	bhi.n	800ea88 <ff_convert+0x30>
 800ea7c:	88fb      	ldrh	r3, [r7, #6]
 800ea7e:	3b80      	subs	r3, #128	@ 0x80
 800ea80:	4a12      	ldr	r2, [pc, #72]	@ (800eacc <ff_convert+0x74>)
 800ea82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea86:	e000      	b.n	800ea8a <ff_convert+0x32>
 800ea88:	2300      	movs	r3, #0
 800ea8a:	81fb      	strh	r3, [r7, #14]
 800ea8c:	e016      	b.n	800eabc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ea8e:	2300      	movs	r3, #0
 800ea90:	81fb      	strh	r3, [r7, #14]
 800ea92:	e009      	b.n	800eaa8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ea94:	89fb      	ldrh	r3, [r7, #14]
 800ea96:	4a0d      	ldr	r2, [pc, #52]	@ (800eacc <ff_convert+0x74>)
 800ea98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea9c:	88fa      	ldrh	r2, [r7, #6]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d006      	beq.n	800eab0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800eaa2:	89fb      	ldrh	r3, [r7, #14]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	81fb      	strh	r3, [r7, #14]
 800eaa8:	89fb      	ldrh	r3, [r7, #14]
 800eaaa:	2b7f      	cmp	r3, #127	@ 0x7f
 800eaac:	d9f2      	bls.n	800ea94 <ff_convert+0x3c>
 800eaae:	e000      	b.n	800eab2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800eab0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800eab2:	89fb      	ldrh	r3, [r7, #14]
 800eab4:	3380      	adds	r3, #128	@ 0x80
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800eabc:	89fb      	ldrh	r3, [r7, #14]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	0800f6f8 	.word	0x0800f6f8

0800ead0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b087      	sub	sp, #28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	4603      	mov	r3, r0
 800ead8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800eada:	88fb      	ldrh	r3, [r7, #6]
 800eadc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eae0:	d201      	bcs.n	800eae6 <ff_wtoupper+0x16>
 800eae2:	4b3e      	ldr	r3, [pc, #248]	@ (800ebdc <ff_wtoupper+0x10c>)
 800eae4:	e000      	b.n	800eae8 <ff_wtoupper+0x18>
 800eae6:	4b3e      	ldr	r3, [pc, #248]	@ (800ebe0 <ff_wtoupper+0x110>)
 800eae8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	1c9a      	adds	r2, r3, #2
 800eaee:	617a      	str	r2, [r7, #20]
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eaf4:	8a7b      	ldrh	r3, [r7, #18]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d068      	beq.n	800ebcc <ff_wtoupper+0xfc>
 800eafa:	88fa      	ldrh	r2, [r7, #6]
 800eafc:	8a7b      	ldrh	r3, [r7, #18]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d364      	bcc.n	800ebcc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	1c9a      	adds	r2, r3, #2
 800eb06:	617a      	str	r2, [r7, #20]
 800eb08:	881b      	ldrh	r3, [r3, #0]
 800eb0a:	823b      	strh	r3, [r7, #16]
 800eb0c:	8a3b      	ldrh	r3, [r7, #16]
 800eb0e:	0a1b      	lsrs	r3, r3, #8
 800eb10:	81fb      	strh	r3, [r7, #14]
 800eb12:	8a3b      	ldrh	r3, [r7, #16]
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eb18:	88fa      	ldrh	r2, [r7, #6]
 800eb1a:	8a79      	ldrh	r1, [r7, #18]
 800eb1c:	8a3b      	ldrh	r3, [r7, #16]
 800eb1e:	440b      	add	r3, r1
 800eb20:	429a      	cmp	r2, r3
 800eb22:	da49      	bge.n	800ebb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800eb24:	89fb      	ldrh	r3, [r7, #14]
 800eb26:	2b08      	cmp	r3, #8
 800eb28:	d84f      	bhi.n	800ebca <ff_wtoupper+0xfa>
 800eb2a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb30 <ff_wtoupper+0x60>)
 800eb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb30:	0800eb55 	.word	0x0800eb55
 800eb34:	0800eb67 	.word	0x0800eb67
 800eb38:	0800eb7d 	.word	0x0800eb7d
 800eb3c:	0800eb85 	.word	0x0800eb85
 800eb40:	0800eb8d 	.word	0x0800eb8d
 800eb44:	0800eb95 	.word	0x0800eb95
 800eb48:	0800eb9d 	.word	0x0800eb9d
 800eb4c:	0800eba5 	.word	0x0800eba5
 800eb50:	0800ebad 	.word	0x0800ebad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800eb54:	88fa      	ldrh	r2, [r7, #6]
 800eb56:	8a7b      	ldrh	r3, [r7, #18]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	005b      	lsls	r3, r3, #1
 800eb5c:	697a      	ldr	r2, [r7, #20]
 800eb5e:	4413      	add	r3, r2
 800eb60:	881b      	ldrh	r3, [r3, #0]
 800eb62:	80fb      	strh	r3, [r7, #6]
 800eb64:	e027      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800eb66:	88fa      	ldrh	r2, [r7, #6]
 800eb68:	8a7b      	ldrh	r3, [r7, #18]
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	88fa      	ldrh	r2, [r7, #6]
 800eb76:	1ad3      	subs	r3, r2, r3
 800eb78:	80fb      	strh	r3, [r7, #6]
 800eb7a:	e01c      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800eb7c:	88fb      	ldrh	r3, [r7, #6]
 800eb7e:	3b10      	subs	r3, #16
 800eb80:	80fb      	strh	r3, [r7, #6]
 800eb82:	e018      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	3b20      	subs	r3, #32
 800eb88:	80fb      	strh	r3, [r7, #6]
 800eb8a:	e014      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eb8c:	88fb      	ldrh	r3, [r7, #6]
 800eb8e:	3b30      	subs	r3, #48	@ 0x30
 800eb90:	80fb      	strh	r3, [r7, #6]
 800eb92:	e010      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eb94:	88fb      	ldrh	r3, [r7, #6]
 800eb96:	3b1a      	subs	r3, #26
 800eb98:	80fb      	strh	r3, [r7, #6]
 800eb9a:	e00c      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eb9c:	88fb      	ldrh	r3, [r7, #6]
 800eb9e:	3308      	adds	r3, #8
 800eba0:	80fb      	strh	r3, [r7, #6]
 800eba2:	e008      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eba4:	88fb      	ldrh	r3, [r7, #6]
 800eba6:	3b50      	subs	r3, #80	@ 0x50
 800eba8:	80fb      	strh	r3, [r7, #6]
 800ebaa:	e004      	b.n	800ebb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ebac:	88fb      	ldrh	r3, [r7, #6]
 800ebae:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ebb2:	80fb      	strh	r3, [r7, #6]
 800ebb4:	bf00      	nop
			}
			break;
 800ebb6:	e008      	b.n	800ebca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ebb8:	89fb      	ldrh	r3, [r7, #14]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d195      	bne.n	800eaea <ff_wtoupper+0x1a>
 800ebbe:	8a3b      	ldrh	r3, [r7, #16]
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ebc8:	e78f      	b.n	800eaea <ff_wtoupper+0x1a>
			break;
 800ebca:	bf00      	nop
	}

	return chr;
 800ebcc:	88fb      	ldrh	r3, [r7, #6]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	371c      	adds	r7, #28
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	0800f7f8 	.word	0x0800f7f8
 800ebe0:	0800f9ec 	.word	0x0800f9ec

0800ebe4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ebe8:	2201      	movs	r2, #1
 800ebea:	490e      	ldr	r1, [pc, #56]	@ (800ec24 <MX_USB_HOST_Init+0x40>)
 800ebec:	480e      	ldr	r0, [pc, #56]	@ (800ec28 <MX_USB_HOST_Init+0x44>)
 800ebee:	f7fb f9c0 	bl	8009f72 <USBH_Init>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ebf8:	f7f2 fde6 	bl	80017c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ebfc:	490b      	ldr	r1, [pc, #44]	@ (800ec2c <MX_USB_HOST_Init+0x48>)
 800ebfe:	480a      	ldr	r0, [pc, #40]	@ (800ec28 <MX_USB_HOST_Init+0x44>)
 800ec00:	f7fb fa45 	bl	800a08e <USBH_RegisterClass>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d001      	beq.n	800ec0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ec0a:	f7f2 fddd 	bl	80017c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ec0e:	4806      	ldr	r0, [pc, #24]	@ (800ec28 <MX_USB_HOST_Init+0x44>)
 800ec10:	f7fb fac9 	bl	800a1a6 <USBH_Start>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d001      	beq.n	800ec1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ec1a:	f7f2 fdd5 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ec1e:	bf00      	nop
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	0800ec45 	.word	0x0800ec45
 800ec28:	20001d9c 	.word	0x20001d9c
 800ec2c:	20000048 	.word	0x20000048

0800ec30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ec34:	4802      	ldr	r0, [pc, #8]	@ (800ec40 <MX_USB_HOST_Process+0x10>)
 800ec36:	f7fb fac7 	bl	800a1c8 <USBH_Process>
}
 800ec3a:	bf00      	nop
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20001d9c 	.word	0x20001d9c

0800ec44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ec50:	78fb      	ldrb	r3, [r7, #3]
 800ec52:	3b01      	subs	r3, #1
 800ec54:	2b04      	cmp	r3, #4
 800ec56:	d819      	bhi.n	800ec8c <USBH_UserProcess+0x48>
 800ec58:	a201      	add	r2, pc, #4	@ (adr r2, 800ec60 <USBH_UserProcess+0x1c>)
 800ec5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5e:	bf00      	nop
 800ec60:	0800ec8d 	.word	0x0800ec8d
 800ec64:	0800ec7d 	.word	0x0800ec7d
 800ec68:	0800ec8d 	.word	0x0800ec8d
 800ec6c:	0800ec85 	.word	0x0800ec85
 800ec70:	0800ec75 	.word	0x0800ec75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ec74:	4b09      	ldr	r3, [pc, #36]	@ (800ec9c <USBH_UserProcess+0x58>)
 800ec76:	2203      	movs	r2, #3
 800ec78:	701a      	strb	r2, [r3, #0]
  break;
 800ec7a:	e008      	b.n	800ec8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ec7c:	4b07      	ldr	r3, [pc, #28]	@ (800ec9c <USBH_UserProcess+0x58>)
 800ec7e:	2202      	movs	r2, #2
 800ec80:	701a      	strb	r2, [r3, #0]
  break;
 800ec82:	e004      	b.n	800ec8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ec84:	4b05      	ldr	r3, [pc, #20]	@ (800ec9c <USBH_UserProcess+0x58>)
 800ec86:	2201      	movs	r2, #1
 800ec88:	701a      	strb	r2, [r3, #0]
  break;
 800ec8a:	e000      	b.n	800ec8e <USBH_UserProcess+0x4a>

  default:
  break;
 800ec8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ec8e:	bf00      	nop
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	20002174 	.word	0x20002174

0800eca0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08a      	sub	sp, #40	@ 0x28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eca8:	f107 0314 	add.w	r3, r7, #20
 800ecac:	2200      	movs	r2, #0
 800ecae:	601a      	str	r2, [r3, #0]
 800ecb0:	605a      	str	r2, [r3, #4]
 800ecb2:	609a      	str	r2, [r3, #8]
 800ecb4:	60da      	str	r2, [r3, #12]
 800ecb6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ecc0:	d147      	bne.n	800ed52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	613b      	str	r3, [r7, #16]
 800ecc6:	4b25      	ldr	r3, [pc, #148]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800ecc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecca:	4a24      	ldr	r2, [pc, #144]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800eccc:	f043 0301 	orr.w	r3, r3, #1
 800ecd0:	6313      	str	r3, [r2, #48]	@ 0x30
 800ecd2:	4b22      	ldr	r3, [pc, #136]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800ecd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecd6:	f003 0301 	and.w	r3, r3, #1
 800ecda:	613b      	str	r3, [r7, #16]
 800ecdc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ecde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ece2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ece4:	2300      	movs	r3, #0
 800ece6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece8:	2300      	movs	r3, #0
 800ecea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecec:	f107 0314 	add.w	r3, r7, #20
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	481b      	ldr	r0, [pc, #108]	@ (800ed60 <HAL_HCD_MspInit+0xc0>)
 800ecf4:	f7f3 ff06 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ecf8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ecfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecfe:	2302      	movs	r3, #2
 800ed00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed02:	2300      	movs	r3, #0
 800ed04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed06:	2303      	movs	r3, #3
 800ed08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed0a:	230a      	movs	r3, #10
 800ed0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed0e:	f107 0314 	add.w	r3, r7, #20
 800ed12:	4619      	mov	r1, r3
 800ed14:	4812      	ldr	r0, [pc, #72]	@ (800ed60 <HAL_HCD_MspInit+0xc0>)
 800ed16:	f7f3 fef5 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed1a:	4b10      	ldr	r3, [pc, #64]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800ed1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed1e:	4a0f      	ldr	r2, [pc, #60]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800ed20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed24:	6353      	str	r3, [r2, #52]	@ 0x34
 800ed26:	2300      	movs	r3, #0
 800ed28:	60fb      	str	r3, [r7, #12]
 800ed2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800ed2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed2e:	4a0b      	ldr	r2, [pc, #44]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800ed30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ed34:	6453      	str	r3, [r2, #68]	@ 0x44
 800ed36:	4b09      	ldr	r3, [pc, #36]	@ (800ed5c <HAL_HCD_MspInit+0xbc>)
 800ed38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed42:	2200      	movs	r2, #0
 800ed44:	2100      	movs	r1, #0
 800ed46:	2043      	movs	r0, #67	@ 0x43
 800ed48:	f7f3 fa67 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed4c:	2043      	movs	r0, #67	@ 0x43
 800ed4e:	f7f3 fa80 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed52:	bf00      	nop
 800ed54:	3728      	adds	r7, #40	@ 0x28
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	40023800 	.word	0x40023800
 800ed60:	40020000 	.word	0x40020000

0800ed64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fb fdf5 	bl	800a962 <USBH_LL_IncTimer>
}
 800ed78:	bf00      	nop
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fb fe2d 	bl	800a9ee <USBH_LL_Connect>
}
 800ed94:	bf00      	nop
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fb fe36 	bl	800aa1c <USBH_LL_Disconnect>
}
 800edb0:	bf00      	nop
 800edb2:	3708      	adds	r7, #8
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	460b      	mov	r3, r1
 800edc2:	70fb      	strb	r3, [r7, #3]
 800edc4:	4613      	mov	r3, r2
 800edc6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800edc8:	bf00      	nop
 800edca:	370c      	adds	r7, #12
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fb fde7 	bl	800a9b6 <USBH_LL_PortEnabled>
}
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fb fde7 	bl	800a9d2 <USBH_LL_PortDisabled>
}
 800ee04:	bf00      	nop
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d12a      	bne.n	800ee74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ee1e:	4a18      	ldr	r2, [pc, #96]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a15      	ldr	r2, [pc, #84]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee2a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ee2e:	4b14      	ldr	r3, [pc, #80]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ee34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ee36:	4b12      	ldr	r3, [pc, #72]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee38:	2208      	movs	r2, #8
 800ee3a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ee3c:	4b10      	ldr	r3, [pc, #64]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee3e:	2201      	movs	r2, #1
 800ee40:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ee42:	4b0f      	ldr	r3, [pc, #60]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ee48:	4b0d      	ldr	r3, [pc, #52]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee4a:	2202      	movs	r2, #2
 800ee4c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ee4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee50:	2200      	movs	r2, #0
 800ee52:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ee54:	480a      	ldr	r0, [pc, #40]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee56:	f7f4 f8ef 	bl	8003038 <HAL_HCD_Init>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ee60:	f7f2 fcb2 	bl	80017c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ee64:	4806      	ldr	r0, [pc, #24]	@ (800ee80 <USBH_LL_Init+0x74>)
 800ee66:	f7f4 fcf3 	bl	8003850 <HAL_HCD_GetCurrentFrame>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7fb fd68 	bl	800a944 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20002178 	.word	0x20002178

0800ee84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee90:	2300      	movs	r3, #0
 800ee92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7f4 fc60 	bl	8003760 <HAL_HCD_Start>
 800eea0:	4603      	mov	r3, r0
 800eea2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
 800eea6:	4618      	mov	r0, r3
 800eea8:	f000 f992 	bl	800f1d0 <USBH_Get_USB_Status>
 800eeac:	4603      	mov	r3, r0
 800eeae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eeb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b084      	sub	sp, #16
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7f4 fc68 	bl	80037a6 <HAL_HCD_Stop>
 800eed6:	4603      	mov	r3, r0
 800eed8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 f977 	bl	800f1d0 <USBH_Get_USB_Status>
 800eee2:	4603      	mov	r3, r0
 800eee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eee6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eef8:	2301      	movs	r3, #1
 800eefa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7f4 fcb2 	bl	800386c <HAL_HCD_GetCurrentSpeed>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d00c      	beq.n	800ef28 <USBH_LL_GetSpeed+0x38>
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	d80d      	bhi.n	800ef2e <USBH_LL_GetSpeed+0x3e>
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d002      	beq.n	800ef1c <USBH_LL_GetSpeed+0x2c>
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d003      	beq.n	800ef22 <USBH_LL_GetSpeed+0x32>
 800ef1a:	e008      	b.n	800ef2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef20:	e008      	b.n	800ef34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ef22:	2301      	movs	r3, #1
 800ef24:	73fb      	strb	r3, [r7, #15]
    break;
 800ef26:	e005      	b.n	800ef34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ef28:	2302      	movs	r3, #2
 800ef2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef2c:	e002      	b.n	800ef34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	73fb      	strb	r3, [r7, #15]
    break;
 800ef32:	bf00      	nop
  }
  return  speed;
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b084      	sub	sp, #16
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7f4 fc43 	bl	80037e0 <HAL_HCD_ResetPort>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef5e:	7bfb      	ldrb	r3, [r7, #15]
 800ef60:	4618      	mov	r0, r3
 800ef62:	f000 f935 	bl	800f1d0 <USBH_Get_USB_Status>
 800ef66:	4603      	mov	r3, r0
 800ef68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ef86:	78fa      	ldrb	r2, [r7, #3]
 800ef88:	4611      	mov	r1, r2
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7f4 fc4b 	bl	8003826 <HAL_HCD_HC_GetXferCount>
 800ef90:	4603      	mov	r3, r0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ef9a:	b590      	push	{r4, r7, lr}
 800ef9c:	b089      	sub	sp, #36	@ 0x24
 800ef9e:	af04      	add	r7, sp, #16
 800efa0:	6078      	str	r0, [r7, #4]
 800efa2:	4608      	mov	r0, r1
 800efa4:	4611      	mov	r1, r2
 800efa6:	461a      	mov	r2, r3
 800efa8:	4603      	mov	r3, r0
 800efaa:	70fb      	strb	r3, [r7, #3]
 800efac:	460b      	mov	r3, r1
 800efae:	70bb      	strb	r3, [r7, #2]
 800efb0:	4613      	mov	r3, r2
 800efb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efb8:	2300      	movs	r3, #0
 800efba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800efc2:	787c      	ldrb	r4, [r7, #1]
 800efc4:	78ba      	ldrb	r2, [r7, #2]
 800efc6:	78f9      	ldrb	r1, [r7, #3]
 800efc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800efca:	9302      	str	r3, [sp, #8]
 800efcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800efd0:	9301      	str	r3, [sp, #4]
 800efd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	4623      	mov	r3, r4
 800efda:	f7f4 f88f 	bl	80030fc <HAL_HCD_HC_Init>
 800efde:	4603      	mov	r3, r0
 800efe0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800efe2:	7bfb      	ldrb	r3, [r7, #15]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f000 f8f3 	bl	800f1d0 <USBH_Get_USB_Status>
 800efea:	4603      	mov	r3, r0
 800efec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efee:	7bbb      	ldrb	r3, [r7, #14]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3714      	adds	r7, #20
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd90      	pop	{r4, r7, pc}

0800eff8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f008:	2300      	movs	r3, #0
 800f00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f012:	78fa      	ldrb	r2, [r7, #3]
 800f014:	4611      	mov	r1, r2
 800f016:	4618      	mov	r0, r3
 800f018:	f7f4 f908 	bl	800322c <HAL_HCD_HC_Halt>
 800f01c:	4603      	mov	r3, r0
 800f01e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	4618      	mov	r0, r3
 800f024:	f000 f8d4 	bl	800f1d0 <USBH_Get_USB_Status>
 800f028:	4603      	mov	r3, r0
 800f02a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f02c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f036:	b590      	push	{r4, r7, lr}
 800f038:	b089      	sub	sp, #36	@ 0x24
 800f03a:	af04      	add	r7, sp, #16
 800f03c:	6078      	str	r0, [r7, #4]
 800f03e:	4608      	mov	r0, r1
 800f040:	4611      	mov	r1, r2
 800f042:	461a      	mov	r2, r3
 800f044:	4603      	mov	r3, r0
 800f046:	70fb      	strb	r3, [r7, #3]
 800f048:	460b      	mov	r3, r1
 800f04a:	70bb      	strb	r3, [r7, #2]
 800f04c:	4613      	mov	r3, r2
 800f04e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f05e:	787c      	ldrb	r4, [r7, #1]
 800f060:	78ba      	ldrb	r2, [r7, #2]
 800f062:	78f9      	ldrb	r1, [r7, #3]
 800f064:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f068:	9303      	str	r3, [sp, #12]
 800f06a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f06c:	9302      	str	r3, [sp, #8]
 800f06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f070:	9301      	str	r3, [sp, #4]
 800f072:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	4623      	mov	r3, r4
 800f07a:	f7f4 f8fb 	bl	8003274 <HAL_HCD_HC_SubmitRequest>
 800f07e:	4603      	mov	r3, r0
 800f080:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f082:	7bfb      	ldrb	r3, [r7, #15]
 800f084:	4618      	mov	r0, r3
 800f086:	f000 f8a3 	bl	800f1d0 <USBH_Get_USB_Status>
 800f08a:	4603      	mov	r3, r0
 800f08c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	bd90      	pop	{r4, r7, pc}

0800f098 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f0aa:	78fa      	ldrb	r2, [r7, #3]
 800f0ac:	4611      	mov	r1, r2
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7f4 fba4 	bl	80037fc <HAL_HCD_HC_GetURBState>
 800f0b4:	4603      	mov	r3, r0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d103      	bne.n	800f0dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f0d4:	78fb      	ldrb	r3, [r7, #3]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 f8a6 	bl	800f228 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f0dc:	20c8      	movs	r0, #200	@ 0xc8
 800f0de:	f7f2 ff9d 	bl	800201c <HAL_Delay>
  return USBH_OK;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f102:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f104:	78fa      	ldrb	r2, [r7, #3]
 800f106:	68f9      	ldr	r1, [r7, #12]
 800f108:	4613      	mov	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	4413      	add	r3, r2
 800f10e:	00db      	lsls	r3, r3, #3
 800f110:	440b      	add	r3, r1
 800f112:	333b      	adds	r3, #59	@ 0x3b
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00a      	beq.n	800f130 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f11a:	78fa      	ldrb	r2, [r7, #3]
 800f11c:	68f9      	ldr	r1, [r7, #12]
 800f11e:	4613      	mov	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	00db      	lsls	r3, r3, #3
 800f126:	440b      	add	r3, r1
 800f128:	3350      	adds	r3, #80	@ 0x50
 800f12a:	78ba      	ldrb	r2, [r7, #2]
 800f12c:	701a      	strb	r2, [r3, #0]
 800f12e:	e009      	b.n	800f144 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f130:	78fa      	ldrb	r2, [r7, #3]
 800f132:	68f9      	ldr	r1, [r7, #12]
 800f134:	4613      	mov	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4413      	add	r3, r2
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	440b      	add	r3, r1
 800f13e:	3351      	adds	r3, #81	@ 0x51
 800f140:	78ba      	ldrb	r2, [r7, #2]
 800f142:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3714      	adds	r7, #20
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr

0800f152 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f152:	b480      	push	{r7}
 800f154:	b085      	sub	sp, #20
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
 800f15a:	460b      	mov	r3, r1
 800f15c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f168:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f16a:	78fa      	ldrb	r2, [r7, #3]
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	4613      	mov	r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4413      	add	r3, r2
 800f174:	00db      	lsls	r3, r3, #3
 800f176:	440b      	add	r3, r1
 800f178:	333b      	adds	r3, #59	@ 0x3b
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00a      	beq.n	800f196 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f180:	78fa      	ldrb	r2, [r7, #3]
 800f182:	68b9      	ldr	r1, [r7, #8]
 800f184:	4613      	mov	r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	00db      	lsls	r3, r3, #3
 800f18c:	440b      	add	r3, r1
 800f18e:	3350      	adds	r3, #80	@ 0x50
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	73fb      	strb	r3, [r7, #15]
 800f194:	e009      	b.n	800f1aa <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f196:	78fa      	ldrb	r2, [r7, #3]
 800f198:	68b9      	ldr	r1, [r7, #8]
 800f19a:	4613      	mov	r3, r2
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	4413      	add	r3, r2
 800f1a0:	00db      	lsls	r3, r3, #3
 800f1a2:	440b      	add	r3, r1
 800f1a4:	3351      	adds	r3, #81	@ 0x51
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7f2 ff2b 	bl	800201c <HAL_Delay>
}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
	...

0800f1d0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	2b03      	cmp	r3, #3
 800f1e2:	d817      	bhi.n	800f214 <USBH_Get_USB_Status+0x44>
 800f1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800f1ec <USBH_Get_USB_Status+0x1c>)
 800f1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ea:	bf00      	nop
 800f1ec:	0800f1fd 	.word	0x0800f1fd
 800f1f0:	0800f203 	.word	0x0800f203
 800f1f4:	0800f209 	.word	0x0800f209
 800f1f8:	0800f20f 	.word	0x0800f20f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f200:	e00b      	b.n	800f21a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f202:	2302      	movs	r3, #2
 800f204:	73fb      	strb	r3, [r7, #15]
    break;
 800f206:	e008      	b.n	800f21a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f208:	2301      	movs	r3, #1
 800f20a:	73fb      	strb	r3, [r7, #15]
    break;
 800f20c:	e005      	b.n	800f21a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f20e:	2302      	movs	r3, #2
 800f210:	73fb      	strb	r3, [r7, #15]
    break;
 800f212:	e002      	b.n	800f21a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f214:	2302      	movs	r3, #2
 800f216:	73fb      	strb	r3, [r7, #15]
    break;
 800f218:	bf00      	nop
  }
  return usb_status;
 800f21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3714      	adds	r7, #20
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	4603      	mov	r3, r0
 800f230:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f236:	79fb      	ldrb	r3, [r7, #7]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f23c:	2301      	movs	r3, #1
 800f23e:	73fb      	strb	r3, [r7, #15]
 800f240:	e001      	b.n	800f246 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f242:	2300      	movs	r3, #0
 800f244:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f246:	7bfb      	ldrb	r3, [r7, #15]
 800f248:	461a      	mov	r2, r3
 800f24a:	2101      	movs	r1, #1
 800f24c:	4803      	ldr	r0, [pc, #12]	@ (800f25c <MX_DriverVbusFS+0x34>)
 800f24e:	f7f3 fec1 	bl	8002fd4 <HAL_GPIO_WritePin>
}
 800f252:	bf00      	nop
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	40020800 	.word	0x40020800

0800f260 <malloc>:
 800f260:	4b02      	ldr	r3, [pc, #8]	@ (800f26c <malloc+0xc>)
 800f262:	4601      	mov	r1, r0
 800f264:	6818      	ldr	r0, [r3, #0]
 800f266:	f000 b82d 	b.w	800f2c4 <_malloc_r>
 800f26a:	bf00      	nop
 800f26c:	20000068 	.word	0x20000068

0800f270 <free>:
 800f270:	4b02      	ldr	r3, [pc, #8]	@ (800f27c <free+0xc>)
 800f272:	4601      	mov	r1, r0
 800f274:	6818      	ldr	r0, [r3, #0]
 800f276:	f000 b92d 	b.w	800f4d4 <_free_r>
 800f27a:	bf00      	nop
 800f27c:	20000068 	.word	0x20000068

0800f280 <sbrk_aligned>:
 800f280:	b570      	push	{r4, r5, r6, lr}
 800f282:	4e0f      	ldr	r6, [pc, #60]	@ (800f2c0 <sbrk_aligned+0x40>)
 800f284:	460c      	mov	r4, r1
 800f286:	6831      	ldr	r1, [r6, #0]
 800f288:	4605      	mov	r5, r0
 800f28a:	b911      	cbnz	r1, 800f292 <sbrk_aligned+0x12>
 800f28c:	f000 f8d8 	bl	800f440 <_sbrk_r>
 800f290:	6030      	str	r0, [r6, #0]
 800f292:	4621      	mov	r1, r4
 800f294:	4628      	mov	r0, r5
 800f296:	f000 f8d3 	bl	800f440 <_sbrk_r>
 800f29a:	1c43      	adds	r3, r0, #1
 800f29c:	d103      	bne.n	800f2a6 <sbrk_aligned+0x26>
 800f29e:	f04f 34ff 	mov.w	r4, #4294967295
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	bd70      	pop	{r4, r5, r6, pc}
 800f2a6:	1cc4      	adds	r4, r0, #3
 800f2a8:	f024 0403 	bic.w	r4, r4, #3
 800f2ac:	42a0      	cmp	r0, r4
 800f2ae:	d0f8      	beq.n	800f2a2 <sbrk_aligned+0x22>
 800f2b0:	1a21      	subs	r1, r4, r0
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	f000 f8c4 	bl	800f440 <_sbrk_r>
 800f2b8:	3001      	adds	r0, #1
 800f2ba:	d1f2      	bne.n	800f2a2 <sbrk_aligned+0x22>
 800f2bc:	e7ef      	b.n	800f29e <sbrk_aligned+0x1e>
 800f2be:	bf00      	nop
 800f2c0:	2000243c 	.word	0x2000243c

0800f2c4 <_malloc_r>:
 800f2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2c8:	1ccd      	adds	r5, r1, #3
 800f2ca:	f025 0503 	bic.w	r5, r5, #3
 800f2ce:	3508      	adds	r5, #8
 800f2d0:	2d0c      	cmp	r5, #12
 800f2d2:	bf38      	it	cc
 800f2d4:	250c      	movcc	r5, #12
 800f2d6:	2d00      	cmp	r5, #0
 800f2d8:	4606      	mov	r6, r0
 800f2da:	db01      	blt.n	800f2e0 <_malloc_r+0x1c>
 800f2dc:	42a9      	cmp	r1, r5
 800f2de:	d904      	bls.n	800f2ea <_malloc_r+0x26>
 800f2e0:	230c      	movs	r3, #12
 800f2e2:	6033      	str	r3, [r6, #0]
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f3c0 <_malloc_r+0xfc>
 800f2ee:	f000 f869 	bl	800f3c4 <__malloc_lock>
 800f2f2:	f8d8 3000 	ldr.w	r3, [r8]
 800f2f6:	461c      	mov	r4, r3
 800f2f8:	bb44      	cbnz	r4, 800f34c <_malloc_r+0x88>
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	4630      	mov	r0, r6
 800f2fe:	f7ff ffbf 	bl	800f280 <sbrk_aligned>
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	4604      	mov	r4, r0
 800f306:	d158      	bne.n	800f3ba <_malloc_r+0xf6>
 800f308:	f8d8 4000 	ldr.w	r4, [r8]
 800f30c:	4627      	mov	r7, r4
 800f30e:	2f00      	cmp	r7, #0
 800f310:	d143      	bne.n	800f39a <_malloc_r+0xd6>
 800f312:	2c00      	cmp	r4, #0
 800f314:	d04b      	beq.n	800f3ae <_malloc_r+0xea>
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	4639      	mov	r1, r7
 800f31a:	4630      	mov	r0, r6
 800f31c:	eb04 0903 	add.w	r9, r4, r3
 800f320:	f000 f88e 	bl	800f440 <_sbrk_r>
 800f324:	4581      	cmp	r9, r0
 800f326:	d142      	bne.n	800f3ae <_malloc_r+0xea>
 800f328:	6821      	ldr	r1, [r4, #0]
 800f32a:	1a6d      	subs	r5, r5, r1
 800f32c:	4629      	mov	r1, r5
 800f32e:	4630      	mov	r0, r6
 800f330:	f7ff ffa6 	bl	800f280 <sbrk_aligned>
 800f334:	3001      	adds	r0, #1
 800f336:	d03a      	beq.n	800f3ae <_malloc_r+0xea>
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	442b      	add	r3, r5
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	f8d8 3000 	ldr.w	r3, [r8]
 800f342:	685a      	ldr	r2, [r3, #4]
 800f344:	bb62      	cbnz	r2, 800f3a0 <_malloc_r+0xdc>
 800f346:	f8c8 7000 	str.w	r7, [r8]
 800f34a:	e00f      	b.n	800f36c <_malloc_r+0xa8>
 800f34c:	6822      	ldr	r2, [r4, #0]
 800f34e:	1b52      	subs	r2, r2, r5
 800f350:	d420      	bmi.n	800f394 <_malloc_r+0xd0>
 800f352:	2a0b      	cmp	r2, #11
 800f354:	d917      	bls.n	800f386 <_malloc_r+0xc2>
 800f356:	1961      	adds	r1, r4, r5
 800f358:	42a3      	cmp	r3, r4
 800f35a:	6025      	str	r5, [r4, #0]
 800f35c:	bf18      	it	ne
 800f35e:	6059      	strne	r1, [r3, #4]
 800f360:	6863      	ldr	r3, [r4, #4]
 800f362:	bf08      	it	eq
 800f364:	f8c8 1000 	streq.w	r1, [r8]
 800f368:	5162      	str	r2, [r4, r5]
 800f36a:	604b      	str	r3, [r1, #4]
 800f36c:	4630      	mov	r0, r6
 800f36e:	f000 f82f 	bl	800f3d0 <__malloc_unlock>
 800f372:	f104 000b 	add.w	r0, r4, #11
 800f376:	1d23      	adds	r3, r4, #4
 800f378:	f020 0007 	bic.w	r0, r0, #7
 800f37c:	1ac2      	subs	r2, r0, r3
 800f37e:	bf1c      	itt	ne
 800f380:	1a1b      	subne	r3, r3, r0
 800f382:	50a3      	strne	r3, [r4, r2]
 800f384:	e7af      	b.n	800f2e6 <_malloc_r+0x22>
 800f386:	6862      	ldr	r2, [r4, #4]
 800f388:	42a3      	cmp	r3, r4
 800f38a:	bf0c      	ite	eq
 800f38c:	f8c8 2000 	streq.w	r2, [r8]
 800f390:	605a      	strne	r2, [r3, #4]
 800f392:	e7eb      	b.n	800f36c <_malloc_r+0xa8>
 800f394:	4623      	mov	r3, r4
 800f396:	6864      	ldr	r4, [r4, #4]
 800f398:	e7ae      	b.n	800f2f8 <_malloc_r+0x34>
 800f39a:	463c      	mov	r4, r7
 800f39c:	687f      	ldr	r7, [r7, #4]
 800f39e:	e7b6      	b.n	800f30e <_malloc_r+0x4a>
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	42a3      	cmp	r3, r4
 800f3a6:	d1fb      	bne.n	800f3a0 <_malloc_r+0xdc>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	6053      	str	r3, [r2, #4]
 800f3ac:	e7de      	b.n	800f36c <_malloc_r+0xa8>
 800f3ae:	230c      	movs	r3, #12
 800f3b0:	6033      	str	r3, [r6, #0]
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f000 f80c 	bl	800f3d0 <__malloc_unlock>
 800f3b8:	e794      	b.n	800f2e4 <_malloc_r+0x20>
 800f3ba:	6005      	str	r5, [r0, #0]
 800f3bc:	e7d6      	b.n	800f36c <_malloc_r+0xa8>
 800f3be:	bf00      	nop
 800f3c0:	20002440 	.word	0x20002440

0800f3c4 <__malloc_lock>:
 800f3c4:	4801      	ldr	r0, [pc, #4]	@ (800f3cc <__malloc_lock+0x8>)
 800f3c6:	f000 b875 	b.w	800f4b4 <__retarget_lock_acquire_recursive>
 800f3ca:	bf00      	nop
 800f3cc:	20002580 	.word	0x20002580

0800f3d0 <__malloc_unlock>:
 800f3d0:	4801      	ldr	r0, [pc, #4]	@ (800f3d8 <__malloc_unlock+0x8>)
 800f3d2:	f000 b870 	b.w	800f4b6 <__retarget_lock_release_recursive>
 800f3d6:	bf00      	nop
 800f3d8:	20002580 	.word	0x20002580

0800f3dc <memset>:
 800f3dc:	4402      	add	r2, r0
 800f3de:	4603      	mov	r3, r0
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d100      	bne.n	800f3e6 <memset+0xa>
 800f3e4:	4770      	bx	lr
 800f3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ea:	e7f9      	b.n	800f3e0 <memset+0x4>

0800f3ec <strncpy>:
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	3901      	subs	r1, #1
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	b132      	cbz	r2, 800f402 <strncpy+0x16>
 800f3f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f3f8:	f803 4b01 	strb.w	r4, [r3], #1
 800f3fc:	3a01      	subs	r2, #1
 800f3fe:	2c00      	cmp	r4, #0
 800f400:	d1f7      	bne.n	800f3f2 <strncpy+0x6>
 800f402:	441a      	add	r2, r3
 800f404:	2100      	movs	r1, #0
 800f406:	4293      	cmp	r3, r2
 800f408:	d100      	bne.n	800f40c <strncpy+0x20>
 800f40a:	bd10      	pop	{r4, pc}
 800f40c:	f803 1b01 	strb.w	r1, [r3], #1
 800f410:	e7f9      	b.n	800f406 <strncpy+0x1a>

0800f412 <strstr>:
 800f412:	780a      	ldrb	r2, [r1, #0]
 800f414:	b570      	push	{r4, r5, r6, lr}
 800f416:	b96a      	cbnz	r2, 800f434 <strstr+0x22>
 800f418:	bd70      	pop	{r4, r5, r6, pc}
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d109      	bne.n	800f432 <strstr+0x20>
 800f41e:	460c      	mov	r4, r1
 800f420:	4605      	mov	r5, r0
 800f422:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f426:	2b00      	cmp	r3, #0
 800f428:	d0f6      	beq.n	800f418 <strstr+0x6>
 800f42a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f42e:	429e      	cmp	r6, r3
 800f430:	d0f7      	beq.n	800f422 <strstr+0x10>
 800f432:	3001      	adds	r0, #1
 800f434:	7803      	ldrb	r3, [r0, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d1ef      	bne.n	800f41a <strstr+0x8>
 800f43a:	4618      	mov	r0, r3
 800f43c:	e7ec      	b.n	800f418 <strstr+0x6>
	...

0800f440 <_sbrk_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4d06      	ldr	r5, [pc, #24]	@ (800f45c <_sbrk_r+0x1c>)
 800f444:	2300      	movs	r3, #0
 800f446:	4604      	mov	r4, r0
 800f448:	4608      	mov	r0, r1
 800f44a:	602b      	str	r3, [r5, #0]
 800f44c:	f7f2 fb44 	bl	8001ad8 <_sbrk>
 800f450:	1c43      	adds	r3, r0, #1
 800f452:	d102      	bne.n	800f45a <_sbrk_r+0x1a>
 800f454:	682b      	ldr	r3, [r5, #0]
 800f456:	b103      	cbz	r3, 800f45a <_sbrk_r+0x1a>
 800f458:	6023      	str	r3, [r4, #0]
 800f45a:	bd38      	pop	{r3, r4, r5, pc}
 800f45c:	2000257c 	.word	0x2000257c

0800f460 <__errno>:
 800f460:	4b01      	ldr	r3, [pc, #4]	@ (800f468 <__errno+0x8>)
 800f462:	6818      	ldr	r0, [r3, #0]
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop
 800f468:	20000068 	.word	0x20000068

0800f46c <__libc_init_array>:
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	4d0d      	ldr	r5, [pc, #52]	@ (800f4a4 <__libc_init_array+0x38>)
 800f470:	4c0d      	ldr	r4, [pc, #52]	@ (800f4a8 <__libc_init_array+0x3c>)
 800f472:	1b64      	subs	r4, r4, r5
 800f474:	10a4      	asrs	r4, r4, #2
 800f476:	2600      	movs	r6, #0
 800f478:	42a6      	cmp	r6, r4
 800f47a:	d109      	bne.n	800f490 <__libc_init_array+0x24>
 800f47c:	4d0b      	ldr	r5, [pc, #44]	@ (800f4ac <__libc_init_array+0x40>)
 800f47e:	4c0c      	ldr	r4, [pc, #48]	@ (800f4b0 <__libc_init_array+0x44>)
 800f480:	f000 f872 	bl	800f568 <_init>
 800f484:	1b64      	subs	r4, r4, r5
 800f486:	10a4      	asrs	r4, r4, #2
 800f488:	2600      	movs	r6, #0
 800f48a:	42a6      	cmp	r6, r4
 800f48c:	d105      	bne.n	800f49a <__libc_init_array+0x2e>
 800f48e:	bd70      	pop	{r4, r5, r6, pc}
 800f490:	f855 3b04 	ldr.w	r3, [r5], #4
 800f494:	4798      	blx	r3
 800f496:	3601      	adds	r6, #1
 800f498:	e7ee      	b.n	800f478 <__libc_init_array+0xc>
 800f49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f49e:	4798      	blx	r3
 800f4a0:	3601      	adds	r6, #1
 800f4a2:	e7f2      	b.n	800f48a <__libc_init_array+0x1e>
 800f4a4:	0800fab0 	.word	0x0800fab0
 800f4a8:	0800fab0 	.word	0x0800fab0
 800f4ac:	0800fab0 	.word	0x0800fab0
 800f4b0:	0800fab4 	.word	0x0800fab4

0800f4b4 <__retarget_lock_acquire_recursive>:
 800f4b4:	4770      	bx	lr

0800f4b6 <__retarget_lock_release_recursive>:
 800f4b6:	4770      	bx	lr

0800f4b8 <memcpy>:
 800f4b8:	440a      	add	r2, r1
 800f4ba:	4291      	cmp	r1, r2
 800f4bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4c0:	d100      	bne.n	800f4c4 <memcpy+0xc>
 800f4c2:	4770      	bx	lr
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4ce:	4291      	cmp	r1, r2
 800f4d0:	d1f9      	bne.n	800f4c6 <memcpy+0xe>
 800f4d2:	bd10      	pop	{r4, pc}

0800f4d4 <_free_r>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	d041      	beq.n	800f560 <_free_r+0x8c>
 800f4dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4e0:	1f0c      	subs	r4, r1, #4
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	bfb8      	it	lt
 800f4e6:	18e4      	addlt	r4, r4, r3
 800f4e8:	f7ff ff6c 	bl	800f3c4 <__malloc_lock>
 800f4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800f564 <_free_r+0x90>)
 800f4ee:	6813      	ldr	r3, [r2, #0]
 800f4f0:	b933      	cbnz	r3, 800f500 <_free_r+0x2c>
 800f4f2:	6063      	str	r3, [r4, #4]
 800f4f4:	6014      	str	r4, [r2, #0]
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4fc:	f7ff bf68 	b.w	800f3d0 <__malloc_unlock>
 800f500:	42a3      	cmp	r3, r4
 800f502:	d908      	bls.n	800f516 <_free_r+0x42>
 800f504:	6820      	ldr	r0, [r4, #0]
 800f506:	1821      	adds	r1, r4, r0
 800f508:	428b      	cmp	r3, r1
 800f50a:	bf01      	itttt	eq
 800f50c:	6819      	ldreq	r1, [r3, #0]
 800f50e:	685b      	ldreq	r3, [r3, #4]
 800f510:	1809      	addeq	r1, r1, r0
 800f512:	6021      	streq	r1, [r4, #0]
 800f514:	e7ed      	b.n	800f4f2 <_free_r+0x1e>
 800f516:	461a      	mov	r2, r3
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	b10b      	cbz	r3, 800f520 <_free_r+0x4c>
 800f51c:	42a3      	cmp	r3, r4
 800f51e:	d9fa      	bls.n	800f516 <_free_r+0x42>
 800f520:	6811      	ldr	r1, [r2, #0]
 800f522:	1850      	adds	r0, r2, r1
 800f524:	42a0      	cmp	r0, r4
 800f526:	d10b      	bne.n	800f540 <_free_r+0x6c>
 800f528:	6820      	ldr	r0, [r4, #0]
 800f52a:	4401      	add	r1, r0
 800f52c:	1850      	adds	r0, r2, r1
 800f52e:	4283      	cmp	r3, r0
 800f530:	6011      	str	r1, [r2, #0]
 800f532:	d1e0      	bne.n	800f4f6 <_free_r+0x22>
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	6053      	str	r3, [r2, #4]
 800f53a:	4408      	add	r0, r1
 800f53c:	6010      	str	r0, [r2, #0]
 800f53e:	e7da      	b.n	800f4f6 <_free_r+0x22>
 800f540:	d902      	bls.n	800f548 <_free_r+0x74>
 800f542:	230c      	movs	r3, #12
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	e7d6      	b.n	800f4f6 <_free_r+0x22>
 800f548:	6820      	ldr	r0, [r4, #0]
 800f54a:	1821      	adds	r1, r4, r0
 800f54c:	428b      	cmp	r3, r1
 800f54e:	bf04      	itt	eq
 800f550:	6819      	ldreq	r1, [r3, #0]
 800f552:	685b      	ldreq	r3, [r3, #4]
 800f554:	6063      	str	r3, [r4, #4]
 800f556:	bf04      	itt	eq
 800f558:	1809      	addeq	r1, r1, r0
 800f55a:	6021      	streq	r1, [r4, #0]
 800f55c:	6054      	str	r4, [r2, #4]
 800f55e:	e7ca      	b.n	800f4f6 <_free_r+0x22>
 800f560:	bd38      	pop	{r3, r4, r5, pc}
 800f562:	bf00      	nop
 800f564:	20002440 	.word	0x20002440

0800f568 <_init>:
 800f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56a:	bf00      	nop
 800f56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56e:	bc08      	pop	{r3}
 800f570:	469e      	mov	lr, r3
 800f572:	4770      	bx	lr

0800f574 <_fini>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	bf00      	nop
 800f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57a:	bc08      	pop	{r3}
 800f57c:	469e      	mov	lr, r3
 800f57e:	4770      	bx	lr
